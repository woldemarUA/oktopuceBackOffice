(function (React, designSystem, require$$0, adminjs) {
	'use strict';

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var React__default = /*#__PURE__*/_interopDefault(React);
	var require$$0__default = /*#__PURE__*/_interopDefault(require$$0);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var styledComponents_browser_cjs = {};

	var reactIs$2 = {exports: {}};

	var reactIs_development$1 = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.SuspenseList = SuspenseList;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isSuspenseList = isSuspenseList;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$2.exports = reactIs_development$1;
	}

	var reactIsExports$1 = reactIs$2.exports;

	//

	var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};

	var stylis_browser_cjs = {};

	Object.defineProperty(stylis_browser_cjs, '__esModule', { value: true });

	function stylis_min (W) {
	  function M(d, c, e, h, a) {
	    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
	      g = e.charCodeAt(l);
	      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

	      if (0 === b + n + v + m) {
	        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
	          switch (g) {
	            case 32:
	            case 9:
	            case 59:
	            case 13:
	            case 10:
	              break;

	            default:
	              f += e.charAt(l);
	          }

	          g = 59;
	        }

	        switch (g) {
	          case 123:
	            f = f.trim();
	            q = f.charCodeAt(0);
	            k = 1;

	            for (t = ++l; l < B;) {
	              switch (g = e.charCodeAt(l)) {
	                case 123:
	                  k++;
	                  break;

	                case 125:
	                  k--;
	                  break;

	                case 47:
	                  switch (g = e.charCodeAt(l + 1)) {
	                    case 42:
	                    case 47:
	                      a: {
	                        for (u = l + 1; u < J; ++u) {
	                          switch (e.charCodeAt(u)) {
	                            case 47:
	                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
	                                l = u + 1;
	                                break a;
	                              }

	                              break;

	                            case 10:
	                              if (47 === g) {
	                                l = u + 1;
	                                break a;
	                              }

	                          }
	                        }

	                        l = u;
	                      }

	                  }

	                  break;

	                case 91:
	                  g++;

	                case 40:
	                  g++;

	                case 34:
	                case 39:
	                  for (; l++ < J && e.charCodeAt(l) !== g;) {
	                  }

	              }

	              if (0 === k) break;
	              l++;
	            }

	            k = e.substring(t, l);
	            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

	            switch (q) {
	              case 64:
	                0 < r && (f = f.replace(N, ''));
	                g = f.charCodeAt(1);

	                switch (g) {
	                  case 100:
	                  case 109:
	                  case 115:
	                  case 45:
	                    r = c;
	                    break;

	                  default:
	                    r = O;
	                }

	                k = M(c, r, k, g, a + 1);
	                t = k.length;
	                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
	                if (0 < t) switch (g) {
	                  case 115:
	                    f = f.replace(da, ea);

	                  case 100:
	                  case 109:
	                  case 45:
	                    k = f + '{' + k + '}';
	                    break;

	                  case 107:
	                    f = f.replace(fa, '$1 $2');
	                    k = f + '{' + k + '}';
	                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
	                    break;

	                  default:
	                    k = f + k, 112 === h && (k = (p += k, ''));
	                } else k = '';
	                break;

	              default:
	                k = M(c, X(c, f, I), k, h, a + 1);
	            }

	            F += k;
	            k = I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	            break;

	          case 125:
	          case 59:
	            f = (0 < r ? f.replace(N, '') : f).trim();
	            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
	              case 0:
	                break;

	              case 64:
	                if (105 === g || 99 === g) {
	                  G += f + e.charAt(l);
	                  break;
	                }

	              default:
	                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
	            }
	            I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	        }
	      }

	      switch (g) {
	        case 13:
	        case 10:
	          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
	          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
	          z = 1;
	          D++;
	          break;

	        case 59:
	        case 125:
	          if (0 === b + n + v + m) {
	            z++;
	            break;
	          }

	        default:
	          z++;
	          y = e.charAt(l);

	          switch (g) {
	            case 9:
	            case 32:
	              if (0 === n + m + b) switch (x) {
	                case 44:
	                case 58:
	                case 9:
	                case 32:
	                  y = '';
	                  break;

	                default:
	                  32 !== g && (y = ' ');
	              }
	              break;

	            case 0:
	              y = '\\0';
	              break;

	            case 12:
	              y = '\\f';
	              break;

	            case 11:
	              y = '\\v';
	              break;

	            case 38:
	              0 === n + b + m && (r = I = 1, y = '\f' + y);
	              break;

	            case 108:
	              if (0 === n + b + m + E && 0 < u) switch (l - u) {
	                case 2:
	                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

	                case 8:
	                  111 === K && (E = K);
	              }
	              break;

	            case 58:
	              0 === n + b + m && (u = l);
	              break;

	            case 44:
	              0 === b + v + n + m && (r = 1, y += '\r');
	              break;

	            case 34:
	            case 39:
	              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
	              break;

	            case 91:
	              0 === n + b + v && m++;
	              break;

	            case 93:
	              0 === n + b + v && m--;
	              break;

	            case 41:
	              0 === n + b + m && v--;
	              break;

	            case 40:
	              if (0 === n + b + m) {
	                if (0 === q) switch (2 * x + 3 * K) {
	                  case 533:
	                    break;

	                  default:
	                    q = 1;
	                }
	                v++;
	              }

	              break;

	            case 64:
	              0 === b + v + n + m + u + k && (k = 1);
	              break;

	            case 42:
	            case 47:
	              if (!(0 < n + m + v)) switch (b) {
	                case 0:
	                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
	                    case 235:
	                      b = 47;
	                      break;

	                    case 220:
	                      t = l, b = 42;
	                  }

	                  break;

	                case 42:
	                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
	              }
	          }

	          0 === b && (f += y);
	      }

	      K = x;
	      x = g;
	      l++;
	    }

	    t = p.length;

	    if (0 < t) {
	      r = c;
	      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
	      p = r.join(',') + '{' + p + '}';

	      if (0 !== w * E) {
	        2 !== w || L(p, 2) || (E = 0);

	        switch (E) {
	          case 111:
	            p = p.replace(ha, ':-moz-$1') + p;
	            break;

	          case 112:
	            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
	        }

	        E = 0;
	      }
	    }

	    return G + p + F;
	  }

	  function X(d, c, e) {
	    var h = c.trim().split(ia);
	    c = h;
	    var a = h.length,
	        m = d.length;

	    switch (m) {
	      case 0:
	      case 1:
	        var b = 0;

	        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
	          c[b] = Z(d, c[b], e).trim();
	        }

	        break;

	      default:
	        var v = b = 0;

	        for (c = []; b < a; ++b) {
	          for (var n = 0; n < m; ++n) {
	            c[v++] = Z(d[n] + ' ', h[b], e).trim();
	          }
	        }

	    }

	    return c;
	  }

	  function Z(d, c, e) {
	    var h = c.charCodeAt(0);
	    33 > h && (h = (c = c.trim()).charCodeAt(0));

	    switch (h) {
	      case 38:
	        return c.replace(F, '$1' + d.trim());

	      case 58:
	        return d.trim() + c.replace(F, '$1' + d.trim());

	      default:
	        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
	    }

	    return d + c;
	  }

	  function P(d, c, e, h) {
	    var a = d + ';',
	        m = 2 * c + 3 * e + 4 * h;

	    if (944 === m) {
	      d = a.indexOf(':', 9) + 1;
	      var b = a.substring(d, a.length - 1).trim();
	      b = a.substring(0, d).trim() + b + ';';
	      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
	    }

	    if (0 === w || 2 === w && !L(a, 1)) return a;

	    switch (m) {
	      case 1015:
	        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

	      case 951:
	        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

	      case 963:
	        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

	      case 1009:
	        if (100 !== a.charCodeAt(4)) break;

	      case 969:
	      case 942:
	        return '-webkit-' + a + a;

	      case 978:
	        return '-webkit-' + a + '-moz-' + a + a;

	      case 1019:
	      case 983:
	        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

	      case 883:
	        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
	        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
	        break;

	      case 932:
	        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
	          case 103:
	            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

	          case 115:
	            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

	          case 98:
	            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
	        }
	        return '-webkit-' + a + '-ms-' + a + a;

	      case 964:
	        return '-webkit-' + a + '-ms-flex-' + a + a;

	      case 1023:
	        if (99 !== a.charCodeAt(8)) break;
	        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
	        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

	      case 1005:
	        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

	      case 1e3:
	        b = a.substring(13).trim();
	        c = b.indexOf('-') + 1;

	        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
	          case 226:
	            b = a.replace(G, 'tb');
	            break;

	          case 232:
	            b = a.replace(G, 'tb-rl');
	            break;

	          case 220:
	            b = a.replace(G, 'lr');
	            break;

	          default:
	            return a;
	        }

	        return '-webkit-' + a + '-ms-' + b + a;

	      case 1017:
	        if (-1 === a.indexOf('sticky', 9)) break;

	      case 975:
	        c = (a = d).length - 10;
	        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

	        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
	          case 203:
	            if (111 > b.charCodeAt(8)) break;

	          case 115:
	            a = a.replace(b, '-webkit-' + b) + ';' + a;
	            break;

	          case 207:
	          case 102:
	            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
	        }

	        return a + ';';

	      case 938:
	        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
	          case 105:
	            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

	          case 115:
	            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

	          default:
	            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
	        }
	        break;

	      case 973:
	      case 989:
	        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

	      case 931:
	      case 953:
	        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
	        break;

	      case 962:
	        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
	    }

	    return a;
	  }

	  function L(d, c) {
	    var e = d.indexOf(1 === c ? ':' : '{'),
	        h = d.substring(0, 3 !== c ? e : 10);
	    e = d.substring(e + 1, d.length - 1);
	    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
	  }

	  function ea(d, c) {
	    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
	    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
	  }

	  function H(d, c, e, h, a, m, b, v, n, q) {
	    for (var g = 0, x = c, w; g < A; ++g) {
	      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
	        case void 0:
	        case !1:
	        case !0:
	        case null:
	          break;

	        default:
	          x = w;
	      }
	    }

	    if (x !== c) return x;
	  }

	  function T(d) {
	    switch (d) {
	      case void 0:
	      case null:
	        A = S.length = 0;
	        break;

	      default:
	        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
	          T(d[c]);
	        } else Y = !!d | 0;
	    }

	    return T;
	  }

	  function U(d) {
	    d = d.prefix;
	    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
	    return U;
	  }

	  function B(d, c) {
	    var e = d;
	    33 > e.charCodeAt(0) && (e = e.trim());
	    V = e;
	    e = [V];

	    if (0 < A) {
	      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
	      void 0 !== h && 'string' === typeof h && (c = h);
	    }

	    var a = M(O, e, c, 0, 0);
	    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
	    V = '';
	    E = 0;
	    z = D = 1;
	    return a;
	  }

	  var ca = /^\0+/g,
	      N = /[\0\r\f]/g,
	      aa = /: */g,
	      ka = /zoo|gra/,
	      ma = /([,: ])(transform)/g,
	      ia = /,\r+?/g,
	      F = /([\t\r\n ])*\f?&/g,
	      fa = /@(k\w+)\s*(\S*)\s*/,
	      Q = /::(place)/g,
	      ha = /:(read-only)/g,
	      G = /[svh]\w+-[tblr]{2}/,
	      da = /\(\s*(.*)\s*\)/g,
	      oa = /([\s\S]*?);/g,
	      ba = /-self|flex-/g,
	      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
	      la = /stretch|:\s*\w+\-(?:conte|avail)/,
	      ja = /([^-])(image-set\()/,
	      z = 1,
	      D = 1,
	      E = 0,
	      w = 1,
	      O = [],
	      S = [],
	      A = 0,
	      R = null,
	      Y = 0,
	      V = '';
	  B.use = T;
	  B.set = U;
	  void 0 !== W && U(W);
	  return B;
	}

	stylis_browser_cjs.default = stylis_min;

	var unitless_browser_cjs = {};

	Object.defineProperty(unitless_browser_cjs, '__esModule', { value: true });

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	unitless_browser_cjs.default = unitlessKeys;

	function memoize(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	var emotionIsPropValid_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: isPropValid
	});

	var require$$5 = /*@__PURE__*/getAugmentedNamespace(emotionIsPropValid_esm);

	var reactIs$1 = {exports: {}};

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$1.exports = reactIs_development;
	}

	var reactIsExports = reactIs$1.exports;

	var reactIs = reactIsExports;

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf$1 = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf$1(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols$1) {
	      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	var _default;
	function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(styledComponents_browser_cjs,"__esModule",{value:!0});var t=reactIsExports$1,n=React__default.default,r=e(n),o=e(shallowequal),s=e(stylis_browser_cjs),i=e(unitless_browser_cjs),a=e(require$$5),c=e(hoistNonReactStatics_cjs);function u(){return (u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e}).apply(this,arguments)}var l=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},d=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!t.typeOf(e)},h=Object.freeze([]),p=Object.freeze({});function f(e){return "function"==typeof e}function m(e){return "string"==typeof e&&e||e.displayName||e.name||"Component"}function y(e){return e&&"string"==typeof e.styledComponentId}var v="undefined"!=typeof process&&void 0!==process.env&&(AdminJS.env.REACT_APP_SC_ATTR||AdminJS.env.SC_ATTR)||"data-styled",g="undefined"!=typeof window&&"HTMLElement"in window,S=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY&&AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==AdminJS.env.SC_DISABLE_SPEEDY&&""!==AdminJS.env.SC_DISABLE_SPEEDY?"false"!==AdminJS.env.SC_DISABLE_SPEEDY&&AdminJS.env.SC_DISABLE_SPEEDY:"production"!=="development")),w={},E={1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"};function b(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t);})),e}function _(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error(b.apply(void 0,[E[e]].concat(n)).trim())}var N=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e;}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&_(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0;}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++);},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n);}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),C=new Map,A=new Map,I=1,P=function(e){if(C.has(e))return C.get(e);for(;A.has(I);)I++;var t=I++;return ((0|t)<0||t>1<<30)&&_(16,""+t),C.set(e,t),A.set(t,e),t},O=function(e){return A.get(e)},x=function(e,t){t>=I&&(I=t+1),C.set(e,t),A.set(t,e);},R="style["+v+'][data-styled-version="5.3.9"]',D=new RegExp("^"+v+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),T=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r);},j=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(D);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(x(u,c),T(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0;}else r.push(i);}}},k=function(){return "undefined"!=typeof __webpack_nonce__?__webpack_nonce__:null},V=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(v))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(v,"active"),r.setAttribute("data-styled-version","5.3.9");var i=k();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},M=function(){function e(e){var t=this.element=V(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}_(17);}(t),this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return !1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--;},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),B=function(){function e(e){var t=this.element=V(e);this.nodes=t.childNodes,this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return !1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--;},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),z=function(){function e(e){this.rules=[],this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--;},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),q=g,G={isServer:!g,useCSSOMInjection:!S},L=function(){function e(e,t,n){void 0===e&&(e=p),void 0===t&&(t={}),this.options=u({},G,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&g&&q&&(q=!1,function(e){for(var t=document.querySelectorAll(R),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(v)&&(j(e,o),o.parentNode&&o.parentNode.removeChild(o));}}(this));}e.registerId=function(e){return P(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(u({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new z(o):r?new M(o):new B(o),new N(e)));var e,t,n,r,o;},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(P(e),this.names.has(e))this.names.get(e).add(t);else {var n=new Set;n.add(t),this.names.set(e,n);}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(P(e),n);},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear();},t.clearRules=function(e){this.getTag().clearGroup(P(e)),this.clearNames(e);},t.clearTag=function(){this.tag=void 0;},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=O(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=v+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",");})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n';}}}return r}(this)},e}(),F=/(a)(d)/gi,Y=function(e){return String.fromCharCode(e+(e>25?39:97))};function H(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Y(t%52)+n;return (Y(t%52)+n).replace(F,"$1-$2")}var $=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},W=function(e){return $(5381,e)};function U(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(f(n)&&!y(n))return !1}return !0}var J=W("5.3.9"),X=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic="production"==="development",this.componentId=t,this.baseHash=$(J,t),this.baseStyle=n,L.registerId(t);}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else {var s=me(this.rules,e,t,n).join(""),i=H($(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a);}o.push(i),this.staticRulesId=i;}else {for(var c=this.rules.length,u=$(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h,(u=$(u,h+d));else if(h){var p=me(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=$(u,f+d),l+=f;}}if(l){var m=H(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y);}o.push(m);}}return o.join(" ")},e}(),Z=/^\s*\/\/.*$/gm,K=[":","[",".","#"];function Q(e){var t,n,r,o,i=void 0===e?p:e,a=i.options,c=void 0===a?p:a,u=i.plugins,l=void 0===u?h:u,d=new s(c),f=[],m=function(e){function t(t){if(t)try{e(t+"}");}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t);}}}((function(e){f.push(e);})),y=function(e,r,s){return 0===r&&-1!==K.indexOf(s[n.length])||s.match(o)?e:"."+t};function v(e,s,i,a){void 0===a&&(a="&");var c=e.replace(Z,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),d(i||!s?"":s,u)}return d.use([].concat(l,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,y));},m,function(e){if(-2===e){var t=f;return f=[],t}}])),v.hash=l.length?l.reduce((function(e,t){return t.name||_(15),$(e,t.name)}),5381).toString():"",v}var ee=r.createContext(),te=ee.Consumer,ne=r.createContext(),re=(ne.Consumer,new L),oe=Q();function se(){return n.useContext(ee)||re}function ie(){return n.useContext(ne)||oe}function ae(e){var t=n.useState(e.stylisPlugins),s=t[0],i=t[1],a=se(),c=n.useMemo((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),u=n.useMemo((function(){return Q({options:{prefix:!e.disableVendorPrefixes},plugins:s})}),[e.disableVendorPrefixes,s]);return n.useEffect((function(){o(s,e.stylisPlugins)||i(e.stylisPlugins);}),[e.stylisPlugins]),r.createElement(ee.Provider,{value:c},r.createElement(ne.Provider,{value:u},r.Children.only(e.children)))}var ce=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=oe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"));},this.toString=function(){return _(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t;}return e.prototype.getName=function(e){return void 0===e&&(e=oe),this.name+e.hash},e}(),ue=/([A-Z])/,le=/([A-Z])/g,de=/^ms-/,he=function(e){return "-"+e.toLowerCase()};function pe(e){return ue.test(e)?e.replace(le,he).replace(de,"-ms-"):e}var fe=function(e){return null==e||!1===e||""===e};function me(e,n,r,o){if(Array.isArray(e)){for(var s,a=[],c=0,u=e.length;c<u;c+=1)""!==(s=me(e[c],n,r,o))&&(Array.isArray(s)?a.push.apply(a,s):a.push(s));return a}if(fe(e))return "";if(y(e))return "."+e.styledComponentId;if(f(e)){if("function"!=typeof(h=e)||h.prototype&&h.prototype.isReactComponent||!n)return e;var l=e(n);return t.isElement(l)&&console.warn(m(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),me(l,n,r,o)}var h;return e instanceof ce?r?(e.inject(r,o),e.getName(o)):e:d(e)?function e(t,n){var r,o,s=[];for(var a in t)t.hasOwnProperty(a)&&!fe(t[a])&&(Array.isArray(t[a])&&t[a].isCss||f(t[a])?s.push(pe(a)+":",t[a],";"):d(t[a])?s.push.apply(s,e(t[a],a)):s.push(pe(a)+": "+(r=a,null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in i?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var ye=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ve(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return f(e)||d(e)?ye(me(l(h,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:ye(me(l(e,n)))}var ge=/invalid hook call/i,Se=new Set,we=function(e,t){{var r="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",o=console.error;try{var s=!0;console.error=function(e){if(ge.test(e))s=!1,Se.delete(r);else {for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];o.apply(void 0,[e].concat(n));}},n.useRef(),s&&!Se.has(r)&&(console.warn(r),Se.add(r));}catch(e){ge.test(e.message)&&Se.delete(r);}finally{console.error=o;}}},Ee=function(e,t,n){return void 0===n&&(n=p),e.theme!==n.theme&&e.theme||t||n.theme},be=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,_e=/(^-|-$)/g;function Ne(e){return e.replace(be,"-").replace(_e,"")}var Ce=function(e){return H(W(e)>>>0)};function Ae(e){return "string"==typeof e&&(e.charAt(0)===e.charAt(0).toLowerCase())}var Ie=function(e){return "function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Pe=function(e){return "__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Oe(e,t,n){var r=e[n];Ie(t)&&Ie(r)?xe(r,t):e[n]=t;}function xe(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ie(i))for(var a in i)Pe(a)&&Oe(e,i[a],a);}return e}var Re=r.createContext(),De=Re.Consumer,Te={};function je(e,t,o){var s=y(e),i=!Ae(e),l=t.attrs,d=void 0===l?h:l,v=t.componentId,g=void 0===v?function(e,t){var n="string"!=typeof e?"sc":Ne(e);Te[n]=(Te[n]||0)+1;var r=n+"-"+Ce("5.3.9"+n+Te[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):v,S=t.displayName,w=void 0===S?function(e){return Ae(e)?"styled."+e:"Styled("+m(e)+")"}(e):S,E=t.displayName&&t.componentId?Ne(t.displayName)+"-"+t.componentId:t.componentId||g,b=s&&e.attrs?Array.prototype.concat(e.attrs,d).filter(Boolean):d,_=t.shouldForwardProp;s&&e.shouldForwardProp&&(_=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var N,C=new X(o,E,s?e.componentStyle:void 0),A=C.isStatic&&0===d.length,I=function(e,t){return function(e,t,r,o){var s=e.attrs,i=e.componentStyle,c=e.defaultProps,l=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,m=e.target;n.useDebugValue(h);var y=function(e,t,n){void 0===e&&(e=p);var r=u({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in f(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t];})),[r,o]}(Ee(t,n.useContext(Re),c)||p,t,s),v=y[0],g=y[1],S=function(e,t,r,o){var s=se(),i=ie(),a=t?e.generateAndInjectStyles(p,s,i):e.generateAndInjectStyles(r,s,i);return n.useDebugValue(a),!t&&o&&o(a),a}(i,o,v,e.warnTooManyClasses),w=r,E=g.$as||t.$as||g.as||t.as||m,b=Ae(E),_=g!==t?u({},t,{},g):t,N={};for(var C in _)"$"!==C[0]&&"as"!==C&&("forwardedAs"===C?N.as=_[C]:(d?d(C,a,E):!b||a(C))&&(N[C]=_[C]));return t.style&&g.style!==t.style&&(N.style=u({},t.style,{},g.style)),N.className=Array.prototype.concat(l,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),N.ref=w,n.createElement(E,N)}(N,e,t,A)};return I.displayName=w,(N=r.forwardRef(I)).attrs=b,N.componentStyle=C,N.displayName=w,N.shouldForwardProp=_,N.foldedComponentIds=s?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):h,N.styledComponentId=E,N.target=s?e.target:e,N.withComponent=function(e){var n=t.componentId,r=function(e,t){if(null==e)return {};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=n&&n+"-"+(Ae(e)?e:Ne(m(e)));return je(e,u({},r,{attrs:b,componentId:s}),o)},Object.defineProperty(N,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=s?xe({},e.defaultProps,t):t;}}),(we(w,E),N.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+s+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={};}}}(w,E)),Object.defineProperty(N,"toString",{value:function(){return "."+N.styledComponentId}}),i&&c(N,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),N}var ke=function(e){return function e(n,r,o){if(void 0===o&&(o=p),!t.isValidElementType(r))return _(1,String(r));var s=function(){return n(r,o,ve.apply(void 0,arguments))};return s.withConfig=function(t){return e(n,r,u({},o,{},t))},s.attrs=function(t){return e(n,r,u({},o,{attrs:Array.prototype.concat(o.attrs,t).filter(Boolean)}))},s}(je,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){ke[e]=ke(e);}));var Ve=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=U(e),L.registerId(this.componentId+1);}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(me(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o);},t.removeStyles=function(e,t){t.clearRules(this.componentId+e);},t.renderStyles=function(e,t,n,r){e>2&&L.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r);},e}(),Me=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return "";var n=k();return "<style "+[n&&'nonce="'+n+'"',v+'="true"','data-styled-version="5.3.9"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?_(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return _(2);var n=((t={})[v]="",t["data-styled-version"]="5.3.9",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=k();return o&&(n.nonce=o),[r.createElement("style",u({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0;},this.instance=new L({isServer:!0}),this.sealed=!1;}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?_(2):r.createElement(ae,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return _(3)},e}(),Be={StyleSheet:L,masterSheet:re};"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"),"undefined"!=typeof window&&(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1),styledComponents_browser_cjs.ServerStyleSheet=Me,styledComponents_browser_cjs.StyleSheetConsumer=te,styledComponents_browser_cjs.StyleSheetContext=ee,styledComponents_browser_cjs.StyleSheetManager=ae,styledComponents_browser_cjs.ThemeConsumer=De,styledComponents_browser_cjs.ThemeContext=Re,styledComponents_browser_cjs.ThemeProvider=function(e){var t=n.useContext(Re),o=n.useMemo((function(){return function(e,t){if(!e)return _(14);if(f(e)){var n=e(t);return null!==n&&!Array.isArray(n)&&"object"==typeof n?n:_(7)}return Array.isArray(e)||"object"!=typeof e?_(8):t?u({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?r.createElement(Re.Provider,{value:o},e.children):null},styledComponents_browser_cjs.__PRIVATE__=Be,styledComponents_browser_cjs.createGlobalStyle=function(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),s=1;s<t;s++)o[s-1]=arguments[s];var i=ve.apply(void 0,[e].concat(o)),a="sc-global-"+Ce(JSON.stringify(i)),c=new Ve(i,a);function l(e){var t=se(),o=ie(),s=n.useContext(Re),u=n.useRef(t.allocateGSInstance(a)).current;return r.Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."),i.some((function(e){return "string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),t.server&&d(u,e,t,s,o),n.useLayoutEffect((function(){if(!t.server)return d(u,e,t,s,o),function(){return c.removeStyles(u,t)}}),[u,e,t,s,o]),null}function d(e,t,n,r,o){if(c.isStatic)c.renderStyles(e,w,n,o);else {var s=u({},t,{theme:Ee(t,r,l.defaultProps)});c.renderStyles(e,s,n,o);}}return we(a),r.memo(l)},styledComponents_browser_cjs.css=ve,_default = styledComponents_browser_cjs.default=ke,styledComponents_browser_cjs.isStyledComponent=y,styledComponents_browser_cjs.keyframes=function(e){"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=ve.apply(void 0,[e].concat(n)).join(""),s=Ce(o);return new ce(s,o)},styledComponents_browser_cjs.useTheme=function(){return n.useContext(Re)},styledComponents_browser_cjs.version="5.3.9",styledComponents_browser_cjs.withTheme=function(e){var t=r.forwardRef((function(t,o){var s=n.useContext(Re),i=e.defaultProps,a=Ee(t,s,i);return void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "'+m(e)+'"'),r.createElement(e,u({},t,{theme:a,ref:o}))}));return c(t,e),t.displayName="WithTheme("+m(e)+")",t};

	var dist$c = {};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$1.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	dist$c.__esModule = true;
	dist$c.compose = dist$c.system = dist$c.createStyleFunction = dist$c.createParser = dist$c.get = dist$c.merge = void 0;

	var _objectAssign = _interopRequireDefault(objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var merge$1 = function merge(a, b) {
	  var result = (0, _objectAssign["default"])({}, a, b);

	  for (var key in a) {
	    var _assign;

	    if (!a[key] || typeof b[key] !== 'object') continue;
	    (0, _objectAssign["default"])(result, (_assign = {}, _assign[key] = (0, _objectAssign["default"])(a[key], b[key]), _assign));
	  }

	  return result;
	}; // sort object-value responsive styles


	dist$c.merge = merge$1;

	var sort = function sort(obj) {
	  var next = {};
	  Object.keys(obj).sort(function (a, b) {
	    return a.localeCompare(b, undefined, {
	      numeric: true,
	      sensitivity: 'base'
	    });
	  }).forEach(function (key) {
	    next[key] = obj[key];
	  });
	  return next;
	};

	var defaults$1 = {
	  breakpoints: [40, 52, 64].map(function (n) {
	    return n + 'em';
	  })
	};

	var createMediaQuery = function createMediaQuery(n) {
	  return "@media screen and (min-width: " + n + ")";
	};

	var getValue = function getValue(n, scale) {
	  return get(scale, n, n);
	};

	var get = function get(obj, key, def, p, undef) {
	  key = key && key.split ? key.split('.') : [key];

	  for (p = 0; p < key.length; p++) {
	    obj = obj ? obj[key[p]] : undef;
	  }

	  return obj === undef ? def : obj;
	};

	dist$c.get = get;

	var createParser = function createParser(config) {
	  var cache = {};

	  var parse = function parse(props) {
	    var styles = {};
	    var shouldSort = false;
	    var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;

	    for (var key in props) {
	      if (!config[key]) continue;
	      var sx = config[key];
	      var raw = props[key];
	      var scale = get(props.theme, sx.scale, sx.defaults);

	      if (typeof raw === 'object') {
	        cache.breakpoints = !isCacheDisabled && cache.breakpoints || get(props.theme, 'breakpoints', defaults$1.breakpoints);

	        if (Array.isArray(raw)) {
	          cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
	          styles = merge$1(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
	          continue;
	        }

	        if (raw !== null) {
	          styles = merge$1(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
	          shouldSort = true;
	        }

	        continue;
	      }

	      (0, _objectAssign["default"])(styles, sx(raw, scale, props));
	    } // sort object-based responsive styles


	    if (shouldSort) {
	      styles = sort(styles);
	    }

	    return styles;
	  };

	  parse.config = config;
	  parse.propNames = Object.keys(config);
	  parse.cache = cache;
	  var keys = Object.keys(config).filter(function (k) {
	    return k !== 'config';
	  });

	  if (keys.length > 1) {
	    keys.forEach(function (key) {
	      var _createParser;

	      parse[key] = createParser((_createParser = {}, _createParser[key] = config[key], _createParser));
	    });
	  }

	  return parse;
	};

	dist$c.createParser = createParser;

	var parseResponsiveStyle = function parseResponsiveStyle(mediaQueries, sx, scale, raw, _props) {
	  var styles = {};
	  raw.slice(0, mediaQueries.length).forEach(function (value, i) {
	    var media = mediaQueries[i];
	    var style = sx(value, scale, _props);

	    if (!media) {
	      (0, _objectAssign["default"])(styles, style);
	    } else {
	      var _assign2;

	      (0, _objectAssign["default"])(styles, (_assign2 = {}, _assign2[media] = (0, _objectAssign["default"])({}, styles[media], style), _assign2));
	    }
	  });
	  return styles;
	};

	var parseResponsiveObject = function parseResponsiveObject(breakpoints, sx, scale, raw, _props) {
	  var styles = {};

	  for (var key in raw) {
	    var breakpoint = breakpoints[key];
	    var value = raw[key];
	    var style = sx(value, scale, _props);

	    if (!breakpoint) {
	      (0, _objectAssign["default"])(styles, style);
	    } else {
	      var _assign3;

	      var media = createMediaQuery(breakpoint);
	      (0, _objectAssign["default"])(styles, (_assign3 = {}, _assign3[media] = (0, _objectAssign["default"])({}, styles[media], style), _assign3));
	    }
	  }

	  return styles;
	};

	var createStyleFunction = function createStyleFunction(_ref) {
	  var properties = _ref.properties,
	      property = _ref.property,
	      scale = _ref.scale,
	      _ref$transform = _ref.transform,
	      transform = _ref$transform === void 0 ? getValue : _ref$transform,
	      defaultScale = _ref.defaultScale;
	  properties = properties || [property];

	  var sx = function sx(value, scale, _props) {
	    var result = {};
	    var n = transform(value, scale, _props);
	    if (n === null) return;
	    properties.forEach(function (prop) {
	      result[prop] = n;
	    });
	    return result;
	  };

	  sx.scale = scale;
	  sx.defaults = defaultScale;
	  return sx;
	}; // new v5 API


	dist$c.createStyleFunction = createStyleFunction;

	var system$1 = function system(args) {
	  if (args === void 0) {
	    args = {};
	  }

	  var config = {};
	  Object.keys(args).forEach(function (key) {
	    var conf = args[key];

	    if (conf === true) {
	      // shortcut definition
	      config[key] = createStyleFunction({
	        property: key,
	        scale: key
	      });
	      return;
	    }

	    if (typeof conf === 'function') {
	      config[key] = conf;
	      return;
	    }

	    config[key] = createStyleFunction(conf);
	  });
	  var parser = createParser(config);
	  return parser;
	};

	dist$c.system = system$1;

	var compose = function compose() {
	  var config = {};

	  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
	    parsers[_key] = arguments[_key];
	  }

	  parsers.forEach(function (parser) {
	    if (!parser || !parser.config) return;
	    (0, _objectAssign["default"])(config, parser.config);
	  });
	  var parser = createParser(config);
	  return parser;
	};

	dist$c.compose = compose;

	var dist$b = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.layout = void 0;

		var _core = dist$c;

		var isNumber = function isNumber(n) {
		  return typeof n === 'number' && !isNaN(n);
		};

		var getWidth = function getWidth(n, scale) {
		  return (0, _core.get)(scale, n, !isNumber(n) || n > 1 ? n : n * 100 + '%');
		};

		var config = {
		  width: {
		    property: 'width',
		    scale: 'sizes',
		    transform: getWidth
		  },
		  height: {
		    property: 'height',
		    scale: 'sizes'
		  },
		  minWidth: {
		    property: 'minWidth',
		    scale: 'sizes'
		  },
		  minHeight: {
		    property: 'minHeight',
		    scale: 'sizes'
		  },
		  maxWidth: {
		    property: 'maxWidth',
		    scale: 'sizes'
		  },
		  maxHeight: {
		    property: 'maxHeight',
		    scale: 'sizes'
		  },
		  size: {
		    properties: ['width', 'height'],
		    scale: 'sizes'
		  },
		  overflow: true,
		  overflowX: true,
		  overflowY: true,
		  display: true,
		  verticalAlign: true
		};
		var layout = (0, _core.system)(config);
		exports.layout = layout;
		var _default = layout;
		exports["default"] = _default; 
	} (dist$b));

	var dist$a = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.color = void 0;

		var _core = dist$c;

		var config = {
		  color: {
		    property: 'color',
		    scale: 'colors'
		  },
		  backgroundColor: {
		    property: 'backgroundColor',
		    scale: 'colors'
		  },
		  opacity: true
		};
		config.bg = config.backgroundColor;
		var color = (0, _core.system)(config);
		exports.color = color;
		var _default = color;
		exports["default"] = _default; 
	} (dist$a));

	var dist$9 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.typography = void 0;

		var _core = dist$c;

		var defaults = {
		  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
		};
		var config = {
		  fontFamily: {
		    property: 'fontFamily',
		    scale: 'fonts'
		  },
		  fontSize: {
		    property: 'fontSize',
		    scale: 'fontSizes',
		    defaultScale: defaults.fontSizes
		  },
		  fontWeight: {
		    property: 'fontWeight',
		    scale: 'fontWeights'
		  },
		  lineHeight: {
		    property: 'lineHeight',
		    scale: 'lineHeights'
		  },
		  letterSpacing: {
		    property: 'letterSpacing',
		    scale: 'letterSpacings'
		  },
		  textAlign: true,
		  fontStyle: true
		};
		var typography = (0, _core.system)(config);
		exports.typography = typography;
		var _default = typography;
		exports["default"] = _default; 
	} (dist$9));

	var dist$8 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.flexbox = void 0;

		var _core = dist$c;

		var config = {
		  alignItems: true,
		  alignContent: true,
		  justifyItems: true,
		  justifyContent: true,
		  flexWrap: true,
		  flexDirection: true,
		  // item
		  flex: true,
		  flexGrow: true,
		  flexShrink: true,
		  flexBasis: true,
		  justifySelf: true,
		  alignSelf: true,
		  order: true
		};
		var flexbox = (0, _core.system)(config);
		exports.flexbox = flexbox;
		var _default = flexbox;
		exports["default"] = _default; 
	} (dist$8));

	var dist$7 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.grid = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};
		var config = {
		  gridGap: {
		    property: 'gridGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridColumnGap: {
		    property: 'gridColumnGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridRowGap: {
		    property: 'gridRowGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridColumn: true,
		  gridRow: true,
		  gridAutoFlow: true,
		  gridAutoColumns: true,
		  gridAutoRows: true,
		  gridTemplateColumns: true,
		  gridTemplateRows: true,
		  gridTemplateAreas: true,
		  gridArea: true
		};
		var grid = (0, _core.system)(config);
		exports.grid = grid;
		var _default = grid;
		exports["default"] = _default; 
	} (dist$7));

	var dist$6 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.border = void 0;

		var _core = dist$c;

		var config = {
		  border: {
		    property: 'border',
		    scale: 'borders'
		  },
		  borderWidth: {
		    property: 'borderWidth',
		    scale: 'borderWidths'
		  },
		  borderStyle: {
		    property: 'borderStyle',
		    scale: 'borderStyles'
		  },
		  borderColor: {
		    property: 'borderColor',
		    scale: 'colors'
		  },
		  borderRadius: {
		    property: 'borderRadius',
		    scale: 'radii'
		  },
		  borderTop: {
		    property: 'borderTop',
		    scale: 'borders'
		  },
		  borderTopLeftRadius: {
		    property: 'borderTopLeftRadius',
		    scale: 'radii'
		  },
		  borderTopRightRadius: {
		    property: 'borderTopRightRadius',
		    scale: 'radii'
		  },
		  borderRight: {
		    property: 'borderRight',
		    scale: 'borders'
		  },
		  borderBottom: {
		    property: 'borderBottom',
		    scale: 'borders'
		  },
		  borderBottomLeftRadius: {
		    property: 'borderBottomLeftRadius',
		    scale: 'radii'
		  },
		  borderBottomRightRadius: {
		    property: 'borderBottomRightRadius',
		    scale: 'radii'
		  },
		  borderLeft: {
		    property: 'borderLeft',
		    scale: 'borders'
		  },
		  borderX: {
		    properties: ['borderLeft', 'borderRight'],
		    scale: 'borders'
		  },
		  borderY: {
		    properties: ['borderTop', 'borderBottom'],
		    scale: 'borders'
		  }
		};
		config.borderTopWidth = {
		  property: 'borderTopWidth',
		  scale: 'borderWidths'
		};
		config.borderTopColor = {
		  property: 'borderTopColor',
		  scale: 'colors'
		};
		config.borderTopStyle = {
		  property: 'borderTopStyle',
		  scale: 'borderStyles'
		};
		config.borderTopLeftRadius = {
		  property: 'borderTopLeftRadius',
		  scale: 'radii'
		};
		config.borderTopRightRadius = {
		  property: 'borderTopRightRadius',
		  scale: 'radii'
		};
		config.borderBottomWidth = {
		  property: 'borderBottomWidth',
		  scale: 'borderWidths'
		};
		config.borderBottomColor = {
		  property: 'borderBottomColor',
		  scale: 'colors'
		};
		config.borderBottomStyle = {
		  property: 'borderBottomStyle',
		  scale: 'borderStyles'
		};
		config.borderBottomLeftRadius = {
		  property: 'borderBottomLeftRadius',
		  scale: 'radii'
		};
		config.borderBottomRightRadius = {
		  property: 'borderBottomRightRadius',
		  scale: 'radii'
		};
		config.borderLeftWidth = {
		  property: 'borderLeftWidth',
		  scale: 'borderWidths'
		};
		config.borderLeftColor = {
		  property: 'borderLeftColor',
		  scale: 'colors'
		};
		config.borderLeftStyle = {
		  property: 'borderLeftStyle',
		  scale: 'borderStyles'
		};
		config.borderRightWidth = {
		  property: 'borderRightWidth',
		  scale: 'borderWidths'
		};
		config.borderRightColor = {
		  property: 'borderRightColor',
		  scale: 'colors'
		};
		config.borderRightStyle = {
		  property: 'borderRightStyle',
		  scale: 'borderStyles'
		};
		var border = (0, _core.system)(config);
		exports.border = border;
		var _default = border;
		exports["default"] = _default; 
	} (dist$6));

	var dist$5 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.background = void 0;

		var _core = dist$c;

		var config = {
		  background: true,
		  backgroundImage: true,
		  backgroundSize: true,
		  backgroundPosition: true,
		  backgroundRepeat: true
		};
		config.bgImage = config.backgroundImage;
		config.bgSize = config.backgroundSize;
		config.bgPosition = config.backgroundPosition;
		config.bgRepeat = config.backgroundRepeat;
		var background = (0, _core.system)(config);
		exports.background = background;
		var _default = background;
		exports["default"] = _default; 
	} (dist$5));

	var dist$4 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.position = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};
		var config = {
		  position: true,
		  zIndex: {
		    property: 'zIndex',
		    scale: 'zIndices'
		  },
		  top: {
		    property: 'top',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  right: {
		    property: 'right',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  bottom: {
		    property: 'bottom',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  left: {
		    property: 'left',
		    scale: 'space',
		    defaultScale: defaults.space
		  }
		};
		var position = (0, _core.system)(config);
		exports.position = position;
		var _default = position;
		exports["default"] = _default; 
	} (dist$4));

	var dist$3 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.space = exports.padding = exports.margin = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};

		var isNumber = function isNumber(n) {
		  return typeof n === 'number' && !isNaN(n);
		};

		var getMargin = function getMargin(n, scale) {
		  if (!isNumber(n)) {
		    return (0, _core.get)(scale, n, n);
		  }

		  var isNegative = n < 0;
		  var absolute = Math.abs(n);
		  var value = (0, _core.get)(scale, absolute, absolute);

		  if (!isNumber(value)) {
		    return isNegative ? '-' + value : value;
		  }

		  return value * (isNegative ? -1 : 1);
		};

		var configs = {};
		configs.margin = {
		  margin: {
		    property: 'margin',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginTop: {
		    property: 'marginTop',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginRight: {
		    property: 'marginRight',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginBottom: {
		    property: 'marginBottom',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginLeft: {
		    property: 'marginLeft',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginX: {
		    properties: ['marginLeft', 'marginRight'],
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginY: {
		    properties: ['marginTop', 'marginBottom'],
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  }
		};
		configs.margin.m = configs.margin.margin;
		configs.margin.mt = configs.margin.marginTop;
		configs.margin.mr = configs.margin.marginRight;
		configs.margin.mb = configs.margin.marginBottom;
		configs.margin.ml = configs.margin.marginLeft;
		configs.margin.mx = configs.margin.marginX;
		configs.margin.my = configs.margin.marginY;
		configs.padding = {
		  padding: {
		    property: 'padding',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingTop: {
		    property: 'paddingTop',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingRight: {
		    property: 'paddingRight',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingBottom: {
		    property: 'paddingBottom',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingLeft: {
		    property: 'paddingLeft',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingX: {
		    properties: ['paddingLeft', 'paddingRight'],
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingY: {
		    properties: ['paddingTop', 'paddingBottom'],
		    scale: 'space',
		    defaultScale: defaults.space
		  }
		};
		configs.padding.p = configs.padding.padding;
		configs.padding.pt = configs.padding.paddingTop;
		configs.padding.pr = configs.padding.paddingRight;
		configs.padding.pb = configs.padding.paddingBottom;
		configs.padding.pl = configs.padding.paddingLeft;
		configs.padding.px = configs.padding.paddingX;
		configs.padding.py = configs.padding.paddingY;
		var margin = (0, _core.system)(configs.margin);
		exports.margin = margin;
		var padding = (0, _core.system)(configs.padding);
		exports.padding = padding;
		var space = (0, _core.compose)(margin, padding);
		exports.space = space;
		var _default = space;
		exports["default"] = _default; 
	} (dist$3));

	var dist$2 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.shadow = void 0;

		var _core = dist$c;

		var shadow = (0, _core.system)({
		  boxShadow: {
		    property: 'boxShadow',
		    scale: 'shadows'
		  },
		  textShadow: {
		    property: 'textShadow',
		    scale: 'shadows'
		  }
		});
		exports.shadow = shadow;
		var _default = shadow;
		exports["default"] = _default; 
	} (dist$2));

	var dist$1 = {};

	var dist = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.css = exports.responsive = exports.get = void 0;

		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

		// based on https://github.com/developit/dlv
		var get = function get(obj, key, def, p, undef) {
		  key = key && key.split ? key.split('.') : [key];

		  for (p = 0; p < key.length; p++) {
		    obj = obj ? obj[key[p]] : undef;
		  }

		  return obj === undef ? def : obj;
		};

		exports.get = get;
		var defaultBreakpoints = [40, 52, 64].map(function (n) {
		  return n + 'em';
		});
		var defaultTheme = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
		  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
		};
		var aliases = {
		  bg: 'backgroundColor',
		  m: 'margin',
		  mt: 'marginTop',
		  mr: 'marginRight',
		  mb: 'marginBottom',
		  ml: 'marginLeft',
		  mx: 'marginX',
		  my: 'marginY',
		  p: 'padding',
		  pt: 'paddingTop',
		  pr: 'paddingRight',
		  pb: 'paddingBottom',
		  pl: 'paddingLeft',
		  px: 'paddingX',
		  py: 'paddingY'
		};
		var multiples = {
		  marginX: ['marginLeft', 'marginRight'],
		  marginY: ['marginTop', 'marginBottom'],
		  paddingX: ['paddingLeft', 'paddingRight'],
		  paddingY: ['paddingTop', 'paddingBottom'],
		  size: ['width', 'height']
		};
		var scales = {
		  color: 'colors',
		  backgroundColor: 'colors',
		  borderColor: 'colors',
		  margin: 'space',
		  marginTop: 'space',
		  marginRight: 'space',
		  marginBottom: 'space',
		  marginLeft: 'space',
		  marginX: 'space',
		  marginY: 'space',
		  padding: 'space',
		  paddingTop: 'space',
		  paddingRight: 'space',
		  paddingBottom: 'space',
		  paddingLeft: 'space',
		  paddingX: 'space',
		  paddingY: 'space',
		  top: 'space',
		  right: 'space',
		  bottom: 'space',
		  left: 'space',
		  gridGap: 'space',
		  gridColumnGap: 'space',
		  gridRowGap: 'space',
		  gap: 'space',
		  columnGap: 'space',
		  rowGap: 'space',
		  fontFamily: 'fonts',
		  fontSize: 'fontSizes',
		  fontWeight: 'fontWeights',
		  lineHeight: 'lineHeights',
		  letterSpacing: 'letterSpacings',
		  border: 'borders',
		  borderTop: 'borders',
		  borderRight: 'borders',
		  borderBottom: 'borders',
		  borderLeft: 'borders',
		  borderWidth: 'borderWidths',
		  borderStyle: 'borderStyles',
		  borderRadius: 'radii',
		  borderTopRightRadius: 'radii',
		  borderTopLeftRadius: 'radii',
		  borderBottomRightRadius: 'radii',
		  borderBottomLeftRadius: 'radii',
		  borderTopWidth: 'borderWidths',
		  borderTopColor: 'colors',
		  borderTopStyle: 'borderStyles',
		  borderBottomWidth: 'borderWidths',
		  borderBottomColor: 'colors',
		  borderBottomStyle: 'borderStyles',
		  borderLeftWidth: 'borderWidths',
		  borderLeftColor: 'colors',
		  borderLeftStyle: 'borderStyles',
		  borderRightWidth: 'borderWidths',
		  borderRightColor: 'colors',
		  borderRightStyle: 'borderStyles',
		  outlineColor: 'colors',
		  boxShadow: 'shadows',
		  textShadow: 'shadows',
		  zIndex: 'zIndices',
		  width: 'sizes',
		  minWidth: 'sizes',
		  maxWidth: 'sizes',
		  height: 'sizes',
		  minHeight: 'sizes',
		  maxHeight: 'sizes',
		  flexBasis: 'sizes',
		  size: 'sizes',
		  // svg
		  fill: 'colors',
		  stroke: 'colors'
		};

		var positiveOrNegative = function positiveOrNegative(scale, value) {
		  if (typeof value !== 'number' || value >= 0) {
		    return get(scale, value, value);
		  }

		  var absolute = Math.abs(value);
		  var n = get(scale, absolute, absolute);
		  if (typeof n === 'string') return '-' + n;
		  return n * -1;
		};

		var transforms = ['margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'top', 'bottom', 'left', 'right'].reduce(function (acc, curr) {
		  var _extends2;

		  return _extends({}, acc, (_extends2 = {}, _extends2[curr] = positiveOrNegative, _extends2));
		}, {});

		var responsive = function responsive(styles) {
		  return function (theme) {
		    var next = {};
		    var breakpoints = get(theme, 'breakpoints', defaultBreakpoints);
		    var mediaQueries = [null].concat(breakpoints.map(function (n) {
		      return "@media screen and (min-width: " + n + ")";
		    }));

		    for (var key in styles) {
		      var value = typeof styles[key] === 'function' ? styles[key](theme) : styles[key];
		      if (value == null) continue;

		      if (!Array.isArray(value)) {
		        next[key] = value;
		        continue;
		      }

		      for (var i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
		        var media = mediaQueries[i];

		        if (!media) {
		          next[key] = value[i];
		          continue;
		        }

		        next[media] = next[media] || {};
		        if (value[i] == null) continue;
		        next[media][key] = value[i];
		      }
		    }

		    return next;
		  };
		};

		exports.responsive = responsive;

		var css = function css(args) {
		  return function (props) {
		    if (props === void 0) {
		      props = {};
		    }

		    var theme = _extends({}, defaultTheme, {}, props.theme || props);

		    var result = {};
		    var obj = typeof args === 'function' ? args(theme) : args;
		    var styles = responsive(obj)(theme);

		    for (var key in styles) {
		      var x = styles[key];
		      var val = typeof x === 'function' ? x(theme) : x;

		      if (key === 'variant') {
		        var variant = css(get(theme, val))(theme);
		        result = _extends({}, result, {}, variant);
		        continue;
		      }

		      if (val && typeof val === 'object') {
		        result[key] = css(val)(theme);
		        continue;
		      }

		      var prop = get(aliases, key, key);
		      var scaleName = get(scales, prop);
		      var scale = get(theme, scaleName, get(theme, prop, {}));
		      var transform = get(transforms, prop, get);
		      var value = transform(scale, val, val);

		      if (multiples[prop]) {
		        var dirs = multiples[prop];

		        for (var i = 0; i < dirs.length; i++) {
		          result[dirs[i]] = value;
		        }
		      } else {
		        result[prop] = value;
		      }
		    }

		    return result;
		  };
		};

		exports.css = css;
		var _default = css;
		exports["default"] = _default; 
	} (dist));

	(function (exports) {

		exports.__esModule = true;
		exports.colorStyle = exports.textStyle = exports.buttonStyle = exports["default"] = exports.variant = void 0;

		var _core = dist$c;

		var _css = _interopRequireDefault(dist);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var variant = function variant(_ref) {
		  var _config;

		  var scale = _ref.scale,
		      _ref$prop = _ref.prop,
		      prop = _ref$prop === void 0 ? 'variant' : _ref$prop,
		      _ref$variants = _ref.variants,
		      variants = _ref$variants === void 0 ? {} : _ref$variants,
		      key = _ref.key;
		  var sx;

		  if (Object.keys(variants).length) {
		    sx = function sx(value, scale, props) {
		      return (0, _css["default"])((0, _core.get)(scale, value, null))(props.theme);
		    };
		  } else {
		    sx = function sx(value, scale) {
		      return (0, _core.get)(scale, value, null);
		    };
		  }

		  sx.scale = scale || key;
		  sx.defaults = variants;
		  var config = (_config = {}, _config[prop] = sx, _config);
		  var parser = (0, _core.createParser)(config);
		  return parser;
		};

		exports.variant = variant;
		var _default = variant;
		exports["default"] = _default;
		var buttonStyle = variant({
		  key: 'buttons'
		});
		exports.buttonStyle = buttonStyle;
		var textStyle = variant({
		  key: 'textStyles',
		  prop: 'textStyle'
		});
		exports.textStyle = textStyle;
		var colorStyle = variant({
		  key: 'colorStyles',
		  prop: 'colors'
		});
		exports.colorStyle = colorStyle; 
	} (dist$1));

	space = system = void 0;

	var _core = dist$c;
	var system = _core.system;

	var _layout = _interopRequireWildcard(dist$b);

	var layout = _layout.layout;

	var _color = _interopRequireWildcard(dist$a);

	var color = _color.color;

	var _typography = _interopRequireWildcard(dist$9);

	_typography.typography;

	var _flexbox = _interopRequireWildcard(dist$8);

	_flexbox.flexbox;

	var _grid = _interopRequireWildcard(dist$7);

	_grid.grid;

	var _border = _interopRequireWildcard(dist$6);

	_border.border;
	_border["default"];

	var _background = _interopRequireWildcard(dist$5);

	_background.background;

	var _position = _interopRequireWildcard(dist$4);

	_position.position;

	var _space = dist$3;

	_space.margin;
	_space.padding;
	var space = _space.space;

	var _shadow = _interopRequireWildcard(dist$2);

	_shadow.shadow;
	_shadow["default"];
	_shadow["default"];

	var _variant = dist$1;

	_variant.variant;
	_variant.buttonStyle;
	_variant.textStyle;
	_variant.colorStyle;

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// v4 api shims
	_layout["default"].width;
	    _layout["default"].height;
	    _layout["default"].minWidth;
	    _layout["default"].minHeight;
	    _layout["default"].maxWidth;
	    _layout["default"].maxHeight;
	    _layout["default"].size;
	    _layout["default"].verticalAlign;
	    _layout["default"].display;
	    _layout["default"].overflow;
	    _layout["default"].overflowX;
	    _layout["default"].overflowY;
	_color["default"].opacity;
	_typography["default"].fontSize;
	    _typography["default"].fontFamily;
	    _typography["default"].fontWeight;
	    _typography["default"].lineHeight;
	    _typography["default"].textAlign;
	    _typography["default"].fontStyle;
	    _typography["default"].letterSpacing;
	_flexbox["default"].alignItems;
	    _flexbox["default"].alignContent;
	    _flexbox["default"].justifyItems;
	    _flexbox["default"].justifyContent;
	    _flexbox["default"].flexWrap;
	    _flexbox["default"].flexDirection;
	    _flexbox["default"].flex;
	    _flexbox["default"].flexGrow;
	    _flexbox["default"].flexShrink;
	    _flexbox["default"].flexBasis;
	    _flexbox["default"].justifySelf;
	    _flexbox["default"].alignSelf;
	    _flexbox["default"].order;
	_grid["default"].gridGap;
	    _grid["default"].gridColumnGap;
	    _grid["default"].gridRowGap;
	    _grid["default"].gridColumn;
	    _grid["default"].gridRow;
	    _grid["default"].gridAutoFlow;
	    _grid["default"].gridAutoColumns;
	    _grid["default"].gridAutoRows;
	    _grid["default"].gridTemplateColumns;
	    _grid["default"].gridTemplateRows;
	    _grid["default"].gridTemplateAreas;
	    _grid["default"].gridArea;
	_border["default"].borderWidth;
	    _border["default"].borderStyle;
	    _border["default"].borderColor;
	    _border["default"].borderTop;
	    _border["default"].borderRight;
	    _border["default"].borderBottom;
	    _border["default"].borderLeft;
	    _border["default"].borderRadius;
	_background["default"].backgroundImage;
	    _background["default"].backgroundSize;
	    _background["default"].backgroundPosition;
	    _background["default"].backgroundRepeat;
	_position["default"].zIndex;
	    _position["default"].top;
	    _position["default"].right;
	    _position["default"].bottom;
	    _position["default"].left;

	const colors = {
	  bg: '#000000',
	  // Black background
	  primary: '#39FF14',
	  // Neon Green
	  approval: '#39FF14',
	  // Neon Green
	  danger: '#DC143C',
	  // Crimson Red
	  grey100: '#CCCCCC',
	  // Light Grey
	  grey80: '#333333',
	  // Dark Grey
	  white: '#FFFFFF' // White
	};
	const Button = _default.button`
  background-color: ${props => colors[props.bgColor] || 'none'};
  color: ${colors.white}; // Assuming you want the text color to contrast the background
  padding: 8px 16px; // Example padding, adjust as needed
  border: none; // Assuming no border is needed
  border-radius: 4px; // Giving the button rounded corners
  cursor: pointer; // Changes the cursor to a pointer on hover

  &:hover {
    background-color: ${props => colors[props.hoverColor] || colors.approval}; // Optional: change color on hover
  }

  ${space} ${layout}
`;
	const Section = _default.section`
  //   background-color: #f0f0f0;
  border: 2px solid #ccc;
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Heading = _default.h6`
  color: green;
  font-style: italic;
  margin-bottom: 10px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Row = _default.div`
  display: flex;
  flex-direction: column; /* default mobile view */
  justify-content: space-between;

  @media (min-width: 768px) {
    /* example breakpoint */
    flex-direction: row;
  }
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Cell = _default.div`
  flex-grow: 1;
  margin-bottom: 0.1rem;
  margin-right: 0.5rem;
  width: auto;
  min-width: fit-content;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.div`
  display: flex;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.select`
  border: 2px solid #ccc;
  padding: 8px 12px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.input`
  border: 1px solid #ccc;
  padding: 8px 12px;
  border-radius: 5px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Image$1 = _default.img`
  border: 1px solid #ccc;

  border-radius: 5px;

  width: auto;
  min-width: 150px;
  ${space} ${layout}
`;
	_default.textarea`
  border: 2px solid #ccc;
  padding: 8px 12px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  resize: vertical; // Allows the user to resize the textarea vertically
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Paragraph = _default.p`
  font-style: ${props => props.fontStyle || 'normal'};
  color: ${props => props.fontColor || 'none'} ${space} ${layout}; // Allows space and layout props from styled-system
`;
	const ColoredSpan = _default.span`
  font-style: ${props => props.fontStyle || 'normal'};
  color: ${props => props.fontColor ? colors[props.fontColor] : 'inherit'};
  ${space}
  ${layout}
`;
	const AHref = _default.a`
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.label`
  display: flex; // Changes display to flex to use flexbox properties

  align-items: center; // Vertically centers the children
  justify-content: space-between; // Spreads the children out across the label's width
  cursor: pointer;
  ${space}
`;
	const InputAtom = _default.input`
  border: 2px solid #ccc;
  border-radius: 10px;
  ${space} ${layout}
`;
	const Box$1 = _default.div`
  display: flex;
  flex-direction: ${props => props.direction || 'column'};
  justify-content: space-between;
  @media (max-width: 768px) {
    flex-direction: column;
  }
  ${space}
`;
	const CanvasContainer = _default.div`
  // background-color: ${colors.grey100};
  // border-radius: 10px;
  // border: 2px solid ${colors.grey100};
  display: flex;
  justify-content: center;
  align-items: center;
  // overflow: hidden; // Ensures no overflow of the canvas edges
  // width: 100%; // Takes full width of the container
  // height: auto; // Default height, can be adjusted or made responsive

  // @media (min-width: 768px) {
  //   height: 500px; // Larger height for larger screens
  // }

  ${space} ${layout} // Incorporates space and layout for padding, margin adjustments
`;

	// Styled grid container
	const CheckboxGrid = _default.div`
  display: grid;
  background-color: ${props => props.bgColor || 'none'}; // Corrected syntax and default color
  grid-template-columns: repeat(
    ${props => props.columns || 2},
    // Corrected property name
    1fr
  ); // Dynamically sets the number of columns, defaults to 2
  grid-gap: 16px; // Adds space between the grid items
  @media (max-width: 768px) {
    grid-template-columns: 1fr; // One column when the screen is less than 768px
  }
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Box = _default.div`
  display: flex;
  flex-direction: ${props => props.direction || 'column'};
  justify-content: space-between;
  @media (max-width: 768px) {
    flex-direction: column;
  }
  ${space}
`;
	const Label = _default.label`
  display: flex; // Changes display to flex to use flexbox properties

  align-items: center; // Vertically centers the children
  justify-content: space-between; // Spreads the children out across the label's width
  cursor: pointer;
  ${space}
`;
	_default.input`
  ${space} ${layout}
`;
	const StyledTextArea = _default.textarea`
  width: 100%; // Corresponds to width={1}
  margin-top: 40px; // my={10} assumes 4 is the base unit for margins
  margin-bottom: 40px; // my={10}
  background-color: white; // bg='white'

  &:focus {
    outline: none;
    border-color: #4a90e2; // Example focus style
  }
`;

	//  import models

	// [
	//   rowConfig,
	//   [
	//     ['site_id', cellConfig],
	//     ['nfc_tag_id', cellConfig],
	//     ['parent_equipment_id', cellConfig],
	//     ['installation_date', cellConfig],
	//   ],
	// ],

	const EquipmentForm = ({
	  resource
	}) => {
	  console.log(props);
	  // console.log(props.resource.properties.produit_id.availableValues);

	  return /*#__PURE__*/React__default.default.createElement(Section, null, /*#__PURE__*/React__default.default.createElement(Heading, null, "Parametrage"));
	};

	const DashboardCard = () => {
	  // Define the inline styles
	  const containerStyle = {
	    display: 'flex',
	    justifyContent: 'center',
	    alignItems: 'center',
	    height: '100vh'
	    // backgroundColor: '#f4f4f4', // Light grey background
	  };
	  const cardStyle = {
	    width: '300px',
	    // Adjust width as needed
	    padding: '20px',
	    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
	    // backgroundColor: 'white',
	    textAlign: 'center',
	    borderRadius: '8px'
	  };
	  const logoStyle = {
	    width: '100px',
	    // Adjust size as needed
	    height: 'auto',
	    marginBottom: '20px'
	  };
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    style: containerStyle
	  }, /*#__PURE__*/React__default.default.createElement("div", {
	    style: cardStyle
	  }, /*#__PURE__*/React__default.default.createElement("img", {
	    src: "https://oktopuce.com/build/images/logo.5fd235f1.svg",
	    alt: "Company Logo",
	    style: logoStyle
	  }), /*#__PURE__*/React__default.default.createElement("h1", null, "Bienvenue dans votre tableau de bord personnalis\xE9"), /*#__PURE__*/React__default.default.createElement("p", null, "Il s'agit d'une page de tableau de bord personnalis\xE9e pour votre panneau Oktopuce."), /*#__PURE__*/React__default.default.createElement("p", null, "Il sera d\xE9velopp\xE9 dans une page plus utile")));
	};

	const CustomSelect = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [options, setOptions] = React.useState([]);
	  const [parentField, setParentField] = React.useState(property.props.parent);
	  const [parentValue, setParentValue] = React.useState(record.params[property.props.parent]);
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const handleChange = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.path, selectedOption.value);
	  };
	  async function fetchOptions() {
	    if (parentField && parentValue !== undefined) {
	      try {
	        const response = await fetch(`/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`);
	        // `/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`
	        if (!response.ok) {
	          throw new Error(`HTTP error! Status: ${response.status}`);
	        }
	        const data = await response.json();
	        const formattedOptions = data.records.map(item => ({
	          value: item.id,
	          label: item.title
	        }));
	        setOptions(formattedOptions);
	        // FOR EDIT ACTION Set initial value after options have loaded
	        if (record && record.params[property.name]) {
	          const initialValue = formattedOptions.find(opt => opt.value === record.params[property.name]);
	          console.log(initialValue);
	          setSelectedOptionValue(initialValue);
	        }
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	      }
	    }
	  }
	  React.useEffect(() => {
	    setParentField(property.props.parent);
	    setParentValue(record.params[property.props.parent]);
	  }, [record.params]); //, property.props.parent

	  React.useEffect(() => {
	    setOptions([]);
	    setSelectedOptionValue(null);
	    record.params[property.name] = null;
	    fetchOptions();
	  }, [parentField, parentValue]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
	    error: ''
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: options,
	    onChange: selectedOption => handleChange(selectedOption),
	    name: property.name,
	    value: selectedOptionValue
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, '')));
	};

	// Styled label
	const ToggleLabel = _default.label`
  position: relative;
  display: inline-block;
  width: 56px; // Tailwind's w-14 is 3.5rem or 56px
  height: 32px; // Tailwind's h-8 is 2rem or 32px
  background-color: #e5e7eb; // Tailwind's bg-gray-200
  border-radius: 9999px; // Tailwind's rounded-full
  cursor: pointer;
  ${space} ${layout} ${color}
`;

	// Styled input (checkbox)
	const ToggleInput = _default.input.attrs(props => ({
	  type: 'checkbox'
	}))`
  opacity: 0;
  width: 100%;
  height: 100%;
  position: absolute;
  z-index: -1;
  ${space}
`;

	// Styled toggle indicator
	const ToggleIndicator = _default.span`
  position: absolute;
  left: 4px; // Tailwind's left-1 is 0.25rem or 4px
  top: 4px; // Tailwind's top-1 is 0.25rem or 4px
  width: 24px; // Tailwind's w-6 is 1.5rem or 24px
  height: 24px; // Tailwind's h-6 is 1.5rem or 24px
  border-radius: 9999px;
  background-color: ${({
  checked
}) => checked ? '#065f46' : '#b91c1c'}; // Tailwind's bg-teal-600 and bg-red-600
  transform: ${({
  checked
}) => checked ? 'translateX(24px)' : 'translateX(0px)'};
  transition: transform 0.2s;
  ${system({
  bg: {
    property: 'backgroundColor',
    scale: 'colors'
  }
})}
`;

	function ToggleSwitch({
	  id,
	  checked,
	  onChange,
	  name,
	  label
	}) {
	  return /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: id
	  }, /*#__PURE__*/React__default.default.createElement("span", null, label), /*#__PURE__*/React__default.default.createElement(ToggleLabel, {
	    htmlFor: id
	  }, /*#__PURE__*/React__default.default.createElement(ToggleInput, {
	    id: id,
	    checked: checked,
	    onChange: onChange,
	    name: name
	  }), /*#__PURE__*/React__default.default.createElement(ToggleIndicator, {
	    checked: checked
	  })));
	}

	const CustomCheckBox = props => {
	  const {
	    onChange,
	    record,
	    property,
	    resource
	  } = props;
	  const checkBoxes = property.availableValues;
	  React.useState(record.params[property.props.parent]);
	  const initialState = checkBoxes.reduce((acc, check) => {
	    acc[check.value] = false;
	    return acc;
	  }, {});
	  const [isVisible, setIsVisible] = React.useState(property.props.isVisible.includes(record.params[property.props.parent]));
	  const [checked, setChecked] = React.useState(initialState);
	  const handleChange = field => {
	    setChecked(prevState => ({
	      ...prevState,
	      [field]: !checked[field]
	    }));
	  };
	  React.useEffect(() => {
	    const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	    setIsVisible(newVisibility);
	  }, [record.params[property.props.parent]]); // record.params[property.props.parent]  JSON.stringify(record.params[property.props.parent])

	  React.useEffect(() => {
	    Object.keys(checked).forEach(key => onChange(key, checked[key]));
	  }, [checked]);
	  React.useEffect(() => {
	    if (!isVisible) setChecked(initialState);
	  }, [isVisible]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.H6, null, property.props.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, checkBoxes.map((box, i) => /*#__PURE__*/React__default.default.createElement(Box, {
	    key: i
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: i
	  }, box.label, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: i,
	    onChange: e => handleChange(box.value, e.target.checked),
	    checked: checked[box.value],
	    name: box.value
	  })))))));
	};

	const LocationInfoComponent = props => {
	  const {
	    record,
	    property,
	    onChange,
	    resource
	  } = props;
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [inputValue, setInputValue] = React.useState('');
	  const [options, setOptions] = React.useState([]);
	  const [hasMore, setHasMore] = React.useState(true);
	  const [isLoading, setIsLoading] = React.useState(false);
	  const [page, setPage] = React.useState(0);
	  const perPage = 10; // Quanbtité des options par requette

	  // gerer le precision

	  const [showPrecision, setShowPrecision] = React.useState(false);
	  const loadOptions = async (inputValue, callback) => {
	    if (!hasMore && inputValue === '') return; // pas des action sil ny a pas des options

	    setIsLoading(true);
	    try {
	      const response = await fetch(`/api/resources/equipment_locations/actions/list?perPage=${perPage}&page=${page}`);
	      if (!response.ok) {
	        throw new Error(`HTTP error! Status: ${response.status}`);
	      }
	      const data = await response.json();
	      const newOptions = data.records.map(item => ({
	        value: item.id,
	        label: item.title
	      }));
	      setOptions(prev => [...prev, ...newOptions]); // Jounte les options
	      setHasMore(data.records.length >= perPage); // Vefirier si il y aura encore des pages
	      setPage(prev => prev + 1); // MAj Page numero
	      setIsLoading(false);
	      callback(newOptions);
	    } catch (error) {
	      console.error('Failed to fetch options:', error);
	      setIsLoading(false);
	    }
	  };
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const [textFieldValue, setTextFieldValue] = React.useState('');
	  const handleChangeSelect = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.props.select.value, selectedOption.value);
	  };
	  const handleChangeTextField = text => {
	    setTextFieldValue(text);
	    onChange(property.props.textField.value, textFieldValue);
	  };
	  // SET VISIBILITY - CHANGE THE STATE ONCE FINISHED

	  React.useEffect(() => {
	    setIsVisible(property.props.isVisible.includes(record.params[property.props.parent]));
	  }, [record.params[property.props.parent]]);
	  React.useEffect(() => {
	    loadOptions(inputValue, () => {});
	  }, [isVisible]);
	  React.useEffect(() => {
	    if (!isVisible) {
	      onChange(property.props.select.value, null);
	      onChange(property.props.textField.value, '');
	    }
	  }, [isVisible]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.H6, null, property.props.select.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    onInputChange: value => setInputValue(value),
	    options: options,
	    onMenuScrollToBottom: () => {
	      if (!isLoading && hasMore) {
	        loadOptions(inputValue, () => {});
	      }
	    },
	    onChange: selectedOption => handleChangeSelect(selectedOption),
	    isLoading: isLoading,
	    isSearchable: true,
	    flexGrow: 1,
	    width: 2 / 3,
	    minWidth: "fi/t-content"
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    flexGrow: 1,
	    width: 1 / 3
	  }, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    label: property.props.checkBox.label,
	    id: "precision_toggle",
	    checked: showPrecision,
	    onChange: () => setShowPrecision(!showPrecision)
	  }))), showPrecision && /*#__PURE__*/React__default.default.createElement(StyledTextArea, {
	    id: resource.properties[property.props.textField.value].propertyPath,
	    name: resource.properties[property.props.textField.value].propertyPath,
	    onChange: e => handleChangeTextField(e.target.value),
	    rows: 3,
	    placeholder: property.props.textField.label
	  })));
	};

	const SingleSelect = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [options, setOptions] = React.useState([]);
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const handleChange = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.path, selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (typeof property.props.isVisible === 'boolean') {
	      setIsVisible(property.props.isVisible);
	    } else {
	      const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	      setIsVisible(newVisibility);
	      //   console.log('Visibility updated to:', newVisibility);
	    }
	  }, [property.props.isVisible, record.params[property.props.parent]]);
	  const fetchOptions = async () => {
	    try {
	      const response = await fetch(`/api/resources/${property.props.tableName}/actions/list`);
	      // `/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`
	      if (!response.ok) {
	        throw new Error(`HTTP error! Status: ${response.status}`);
	      }
	      const data = await response.json();
	      setOptions(data.records.map(item => ({
	        value: item.id,
	        label: item.title
	      })));
	    } catch (error) {
	      console.error('Failed to fetch options:', error);
	    }
	  };
	  React.useEffect(() => {
	    if (property.props.options) return setOptions(property.props.options);
	    fetchOptions();
	  }, [property.props.tableName]);

	  //   console.log(record.params);

	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: options,
	    onChange: selectedOption => handleChange(selectedOption),
	    name: property.name,
	    value: selectedOptionValue
	  })));
	};

	const controleEtancheite = (poids, potentiel, detection) => {
	  if (!poids) return `s'il vous plait tapez le poids / choissez type de gaz `;
	  const charge = poids * potentiel / 1000;
	  // console.log(charge);

	  if (isNaN(charge)) return `Pas assez d'information`;
	  if (charge < 5) {
	    return detection ? `pas
        d’obligation` // Avec système de détection
	    : 'Une fois par an'; // Sans système de détection
	  }
	  if (charge >= 5 && charge <= 50) {
	    return detection ? 'Tous les 2 ans' // Avec système de détection
	    : 'Tous les 6 mois'; // Sans système de détection
	  }
	  if (charge > 50 && charge <= 500) {
	    return detection ? 'Tous les ans' // Avec système de détection
	    : 'Tous les 6 mois'; // Sans système de détection
	  }

	  // En supposant des charges supérieures à 500 t Eq. CO2
	  return detection ? 'Tous les 6 mois' // Avec système de détection
	  : 'Tous les 3 mois'; // Sans système de détection
	};
	const temperatureOptions = (start, end, step = 1) => {
	  const range = [];
	  if (step > 0) {
	    for (let i = start; i < end; i += step) {
	      range.push(i);
	    }
	  } else if (step < 0) {
	    for (let i = start; i > end; i += step) {
	      range.push(i);
	    }
	  }
	  const options = [];
	  range.forEach(r => options.push({
	    value: r,
	    label: r
	  }));
	  return options;
	};

	const GasParamsComponent = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [periodicite, setPeriodicite] = React.useState(controleEtancheite());
	  const [poidsGaz, setPoidGaz] = React.useState(0);
	  const [has_leak_detection, set_has_leak_detection] = React.useState(false);
	  React.useEffect(() => {
	    const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	    setIsVisible(newVisibility);
	  }, [record.params[property.props.parent]]);
	  const gasTypeProperty = {
	    ...property,
	    label: 'gas_type_id',
	    name: 'gas_type_id',
	    path: 'gas_type_id',
	    propertyPath: 'gas_type_id',
	    props: {
	      ...property.props,
	      label: 'Type de gaz',
	      isVisible: true
	    }
	  };
	  const handleInputValue = gas_weight => {
	    console.log(gas_weight);
	    setPoidGaz(parseFloat(gas_weight));
	    onChange('gas_weight', parseFloat(gas_weight));
	  };
	  const handleLeakDetection = () => {
	    set_has_leak_detection(!has_leak_detection);
	  };
	  React.useEffect(() => {
	    const potentiel = property.props.potentiel[record.params.gas_type_id];
	    setPeriodicite(controleEtancheite(poidsGaz, potentiel, has_leak_detection));
	    onChange('has_leak_detection', has_leak_detection);
	    onChange('leak_detection_periodicity', periodicite);
	  }, [record.params.gas_type_id, poidsGaz, has_leak_detection]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, null, property.props.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, {
	    mb: "3"
	  }, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(SingleSelect, {
	    property: gasTypeProperty,
	    record: record,
	    onChange: onChange
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: "gas_weight"
	  }, "Poids de gaz"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
	    id: "gas_weight",
	    name: "gas_weight",
	    type: "number",
	    step: "0.01",
	    onChange: e => handleInputValue(e.target.value)
	  }))), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: "has_leak_detection",
	    onChange: () => handleLeakDetection(),
	    checked: has_leak_detection,
	    label: "D\xE9tecteur de fuite",
	    name: "has_leak_detection"
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement("span", null, "Contr\xF4le d\u2019\xE9tanch\xE9it\xE9 obligatoire:"), /*#__PURE__*/React__default.default.createElement("span", null, periodicite)))));
	};

	const SoufflageComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [releveValue, setReleveValue] = React.useState('');
	  const [repriseValue, setRepriseValue] = React.useState('');
	  const [soufDeltaValue, setSoufDeltaValue] = React.useState(null);
	  const mode = auxQuestions && auxQuestions[0];
	  const tempReleve = auxQuestions && auxQuestions[1];
	  const tempReprise = auxQuestions && auxQuestions[2];
	  const soufflageDelta = auxQuestions && auxQuestions[3];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handleReleve = selectedOption => {
	    setReleveValue(selectedOption.value);
	  };
	  const handleReprise = selectedOption => {
	    setRepriseValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: tempReleve.id,
	        response: releveValue
	      });
	      questionsValuesHandler({
	        id: tempReprise.id,
	        response: repriseValue
	      });
	      questionsValuesHandler({
	        id: soufflageDelta.id,
	        response: soufDeltaValue
	      });
	    }
	  }, [modeOption, releveValue, repriseValue, soufflageDelta, soufDeltaValue, auxQuestions]);
	  React.useEffect(() => {
	    if (releveValue !== null && releveValue !== undefined && repriseValue !== null && repriseValue !== undefined) {
	      setSoufDeltaValue(releveValue - repriseValue);
	    } else {
	      setSoufDeltaValue(null);
	    }
	  }, [releveValue, repriseValue]);

	  // useEffect(() => {

	  //   setSoufDeltaValue(
	  //     releveValue && repriseValue ? releveValue - repriseValue : null
	  //   );
	  // }, [releveValue, repriseValue]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: tempReleve.id,
	    mb: 1
	  }, tempReleve.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 61),
	    onChange: selectedOption => handleReleve(selectedOption),
	    name: tempReleve.name,
	    value: releveValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: tempReprise.id,
	    mb: 1
	  }, tempReprise.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 41),
	    onChange: selectedOption => handleReprise(selectedOption),
	    name: tempReprise.name,
	    value: repriseValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: soufflageDelta.id,
	    mb: 1
	  }, soufflageDelta.name), /*#__PURE__*/React__default.default.createElement("span", null, soufDeltaValue ? soufDeltaValue : 'Entrez releve ou reprise'))));
	};

	const PressionsComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [pressionReleveValue, setPressionReleveValue] = React.useState('');
	  const mode = auxQuestions && auxQuestions[0];
	  const pressionReleve = auxQuestions && auxQuestions[1];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handlePressionReleve = selectedOption => {
	    setPressionReleveValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: pressionReleve.id,
	        response: pressionReleveValue
	      });
	    }
	  }, [modeOption, pressionReleveValue, auxQuestions]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: pressionReleve.id,
	    mb: 1
	  }, pressionReleve.name, ", BAR"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(1, 40),
	    onChange: selectedOption => handlePressionReleve(selectedOption),
	    name: pressionReleve.name,
	    value: pressionReleveValue.value
	  }))));
	};

	const PompeEauComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [departEauValue, setDepartEauValue] = React.useState('');
	  const [retourEauValue, setRetourEauValue] = React.useState('');
	  const mode = auxQuestions && auxQuestions[1];
	  const departEau = auxQuestions && auxQuestions[2];
	  const retourEau = auxQuestions && auxQuestions[3];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handleDepart = selectedOption => {
	    setDepartEauValue(selectedOption.value);
	  };
	  const handleRetour = selectedOption => {
	    setRetourEauValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: departEau.id,
	        response: departEauValue
	      });
	      questionsValuesHandler({
	        id: retourEau.id,
	        response: retourEauValue
	      });
	    }
	  }, [modeOption, departEauValue, retourEauValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: departEau.id,
	    mb: 1
	  }, departEau.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 71),
	    onChange: selectedOption => handleDepart(selectedOption),
	    name: departEau.name,
	    value: departEauValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: retourEau.id,
	    mb: 1
	  }, retourEau.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 71),
	    onChange: selectedOption => handleRetour(selectedOption),
	    name: retourEau.name,
	    value: retourEauValue.value
	  }))));
	};

	const EtancheiteComponent = ({
	  parent,
	  fetchAux,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [etancheReseauxValue, setEtancheReseauxValue] = React.useState(false);
	  const etancheReseaux = auxQuestions && auxQuestions[0];
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: etancheReseaux.id,
	        response: etancheReseauxValue
	      });
	    }
	  }, [etancheReseauxValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  console.log(auxQuestions);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: etancheReseaux.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, etancheReseaux.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: etancheReseaux.id,
	    name: etancheReseaux.id,
	    checked: etancheReseauxValue,
	    onChange: () => setEtancheReseauxValue(!etancheReseauxValue)
	  })))));
	};

	const SecuriteComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [fonctionGroupeValue, setFonctionGroupeValue] = React.useState(false);
	  const fonctionGroupe = auxQuestions && auxQuestions[0];
	  const mode = auxQuestions && auxQuestions[1];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: fonctionGroupe.id,
	        response: fonctionGroupeValue
	      });
	    }
	  }, [modeOption, fonctionGroupeValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: fonctionGroupe.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, fonctionGroupe.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: fonctionGroupe.id,
	    name: fonctionGroupe.id,
	    checked: fonctionGroupeValue,
	    onChange: () => setFonctionGroupeValue(!fonctionGroupeValue)
	  }))), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  }))));
	};

	const ResistanceComponent = ({
	  parent,
	  fetchAux,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [fonctionGroupeValue, setFonctionGroupeValue] = React.useState(false);
	  const fonctionGroupe = auxQuestions && auxQuestions[0];
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: fonctionGroupe.id,
	        response: fonctionGroupeValue
	      });
	    }
	  }, [fonctionGroupeValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: fonctionGroupe.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, fonctionGroupe.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: fonctionGroupe.id,
	    name: fonctionGroupe.id,
	    checked: fonctionGroupeValue,
	    onChange: () => setFonctionGroupeValue(!fonctionGroupeValue)
	  })))));
	};

	const fetchAdditionalQuestions = async (parentId, childId = null) => {
	  try {
	    const url = `/api/resources/interventions_dep_questions/actions/getDepQuestions?parent_q_id=${parentId}${childId !== null ? `&child_q_id=${childId}` : ''}`;
	    const response = await fetch(url);
	    if (!response.ok) {
	      throw new Error(`HTTP error! Status: ${response.status}`);
	    }
	    const data = await response.json();
	    return data;
	  } catch (error) {
	    console.error('Failed to fetch options:', error);
	    return null;
	  }
	};
	const optionsMapper = str => {
	  return str.split(',').map(option => ({
	    value: option,
	    label: option
	  }));
	};
	const QuestionComponent = ({
	  question,
	  record,
	  questionsValuesHandler,
	  childQuestionsHandler
	}) => {
	  const [parentIds, setParentIds] = React.useState([]);

	  // api/resources/interventions_dep_questions/actions/getParentAll

	  const [auxQuestions, setAuxQuestions] = React.useState([]);
	  const [response, setResponse] = React.useState(false);
	  const [auxComp, setAuxComp] = React.useState(null);
	  const auxMapping = new Map([[6,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SoufflageComponent, {
	    parent: 7,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [7,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SoufflageComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [51,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PressionsComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [28,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PompeEauComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [69,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PompeEauComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [57,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SecuriteComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [58, /*#__PURE__*/React__default.default.createElement(ResistanceComponent // added
	  , {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    questionsValuesHandler: questionsValuesHandler
	  })], [5, /*#__PURE__*/React__default.default.createElement(EtancheiteComponent, {
	    parent: 5,
	    child: 17,
	    fetchAux: fetchAdditionalQuestions,
	    questionsValuesHandler: questionsValuesHandler
	  })]]);
	  //   aux deps - intervention_type_id

	  const handleChange = () => {
	    setAuxComp(null);
	    setResponse(!response);
	  };
	  React.useEffect(() => {
	    questionsValuesHandler({
	      id: question.id,
	      response: response
	    });
	  }, [question, response]);
	  React.useEffect(() => {
	    async function setChildIds() {
	      if (!response && parentIds.includes(question.id)) {
	        const childIds = await fetchAdditionalQuestions(question.id);
	        childQuestionsHandler(childIds.questions.map(question => question.id));
	      }
	    }
	    setChildIds();
	  }, [response, question]);
	  React.useEffect(() => {
	    if (response && parentIds.includes(question.id)) {
	      if (record.params.intervention_type_id === 1 && record.params.equipment_type_id === 28 && question.id !== 5) {
	        // handle pompe mis en service int
	        return setAuxComp(auxMapping.get(record.params.equipment_type_id));
	      }
	      setAuxComp(auxMapping.get(question.id));
	    }
	  }, [response, record.params.intervention_type_id, record.params.produit_id]);
	  React.useEffect(() => {
	    async function fetchAux() {
	      try {
	        const response = await fetchAdditionalQuestions(question.id);
	        const parentArray = await fetch(`/api/resources/interventions_dep_questions/actions/getParentAll`);
	        const data = await parentArray.json();
	        setParentIds(data.questions);
	        setAuxQuestions(response);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchAux();
	  }, [question]);

	  // console.log(record.params);

	  return /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: question.id
	  }, question.name, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: question.id,
	    name: question.id,
	    checked: response,
	    onChange: handleChange
	  })), auxComp);
	};

	const InterventionsQuestionsComponent = ({
	  onChange,
	  record
	}) => {
	  const [questions, setQuestions] = React.useState([]);
	  const [questionValues, setQuestionValues] = React.useState([]);
	  const [childQuestionIds, setChildQuestionIds] = React.useState([]);
	  const [interventionType, setInterventionType] = React.useState(null);
	  React.useEffect(() => {
	    setInterventionType(record.params.intervention_type_id);
	  }, [record.params.intervention_type_id]);

	  //  Set questions into the JSON objet pour backend
	  React.useEffect(() => {
	    onChange('questions', JSON.stringify(questionValues));
	  }, [questionValues]);

	  // check for the duplicated values

	  const questionsValuesHandler = newQuestion => {
	    setQuestionValues(prevState => {
	      const newState = [...prevState];
	      const existingIndex = prevState.findIndex(q => q.id === newQuestion.id);
	      if (existingIndex > -1) {
	        // Replace the existing object with the new one
	        newState[existingIndex] = newQuestion;
	      } else {
	        // Add the new question to the array
	        newState.push(newQuestion);
	      }
	      // Check if the question is a parent and the response is false,
	      // then remove all child questions responses
	      if (newQuestion.response === false) {
	        return newState.filter(q => !childQuestionIds.includes(q.id));
	      }
	      return newState;
	    });
	  };

	  // console.log(questionValues);
	  // console.log(record.params.questions);
	  React.useEffect(() => {
	    setQuestionValues([]);
	    fetch(`/api/resources/interventions_questions_equipment/actions/getInterventionQuestions?intervention_type_id=${record.params.intervention_type_id}&equipment_type_id=${record.params.equipment_type_id}`).then(res => res.json()).then(data => {
	      // const questions = questionsStateMapper(data.questions);
	      setQuestions(data.questions);
	    });
	  }, [record.params.equipment_type_id,
	  // record.params.intervention_type_id,
	  interventionType, record.params.produit_id, record.params.endroit_id]);
	  return /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, questions.length > 0 ? questions.map(question => /*#__PURE__*/React__default.default.createElement(QuestionComponent, {
	    key: question.id,
	    question: question,
	    record: record,
	    questionsValuesHandler: questionsValuesHandler,
	    childQuestionsHandler: setChildQuestionIds
	  })) : /*#__PURE__*/React__default.default.createElement("div", null, "Choissisez Type d'intervention et / ou equipment"));
	};

	const convertOptions = str => {
	  return str.split(',').map(option => ({
	    value: option,
	    label: option
	  }));
	};
	const convertQuestions = arr => {
	  const obj = {
	    ...arr[0]
	  };
	  delete obj.parentIndex;
	  return Object.values(obj);
	};
	const AdditionalQuestionsComponent = ({
	  questions,
	  onChange,
	  property,
	  record
	}) => {
	  const questionItems = convertQuestions(questions);
	  // console.log(questionItems);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, questionItems.map((question, i) => question.options ? /*#__PURE__*/React__default.default.createElement("div", {
	    key: i
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: i
	  }, "Mode"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    key: i,
	    id: i,
	    options: convertOptions(question.options)
	  })) : /*#__PURE__*/React__default.default.createElement(Label, {
	    key: i,
	    htmlFor: question.id
	  }, question.name, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: question.id
	  }))));
	};

	const trueFalseConverter = q => {
	  if (q.type === 'checkbox') {
	    return parseInt(q.response, 10) ? 'Oui' : 'Non';
	  }
	  return q.response;
	};
	const InterventionQuestionsShow = ({
	  record
	}) => {
	  const [questions, setQuestions] = React.useState([]);
	  React.useEffect(() => {
	    const fetchQuestions = async () => {
	      try {
	        const response = await fetch(`/api/resources/interventions_questions/actions/getQuestions?intervention_id=${record.params.id}`);
	        if (!response.ok) {
	          throw new Error(`HTTP error! Status: ${response.status}`);
	        }
	        const data = await response.json();
	        setQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	      }
	    };
	    fetchQuestions();
	  }, [record.params.id]);
	  return /*#__PURE__*/React__default.default.createElement(CheckboxGrid, {
	    columns: 4
	  }, questions && questions.map(q => /*#__PURE__*/React__default.default.createElement(Box, {
	    key: q.id
	  }, /*#__PURE__*/React__default.default.createElement("span", null, q.name), /*#__PURE__*/React__default.default.createElement("span", null, trueFalseConverter(q)))));
	};

	const ProductShow = ({
	  produit,
	  endroit,
	  equipment
	}) => {
	  return /*#__PURE__*/React__default.default.createElement(Row, null, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "Sur quel produit est install\xE9 la puce "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_produit/records/${produit.id}/show`
	  }, produit.name || 'Link to produit')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "A quel endroit"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_endroit/records/${endroit.id}/show`
	  }, endroit.name || 'Link to endroit')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "Type d\u2019unit\xE9"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_types/records/${equipment.id}/show`
	  }, equipment.name || 'Link to unité')));
	};

	const ParametrageShowComponent = ({
	  record
	}) => {
	  const produit = {
	    id: record.populated.produit_id.id,
	    name: record.populated.produit_id.title
	  };
	  const endroit = {
	    id: record.populated.endroit_id.id,
	    name: record.populated.endroit_id.title
	  };
	  const equipment = {
	    id: record.populated.equipment_type_id.id,
	    name: record.populated.equipment_type_id.title
	  };
	  return /*#__PURE__*/React__default.default.createElement(ProductShow, {
	    produit: produit,
	    endroit: endroit,
	    equipment: equipment
	  });
	};

	async function fetchOptions(tableName, parentField = null, parentValue = null) {
	  try {
	    const url = `/api/resources/${tableName}/actions/list${parentField && parentValue ? `?filters.${parentField}=${parentValue}` : ''}`;
	    const response = await fetch(url);
	    if (!response.ok) {
	      throw new Error(`HTTP error! Status: ${response.status}`);
	    }
	    const data = await response.json();
	    const formattedOptions = data.records.map(item => ({
	      value: item.id,
	      label: item.title
	    }));
	    return formattedOptions;
	  } catch (error) {
	    console.error('Failed to fetch options:', error);
	  }
	}

	const PRODUCT_FIELD_NAME = 'produit_id';
	const PRODUCT_TABLE_NAME = 'equipment_produit';
	const ENDROIT_FIELD_NAME = 'endroit_id';
	const ENDROIT_TABLE_NAME = 'equipment_endroit';
	const EQUIPMENT_TYPE_FIELD_NAME = 'equipment_type_id';
	const EQUIPMENT_TYPE_TABLE_NAME = 'equipment_types';
	const ProductSelect = ({
	  record,
	  onChange
	}) => {
	  const [productOptions, setProductOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [product_id, setProductID] = React.useState(null);
	  const [productSelected, setProductSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [endroitOptions, setEndroitOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [endroit_id, setEndroitID] = React.useState(null);
	  const [endroitSelected, setEndroitSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [equipmentTypeOptions, setEquipmentTypeOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez endroit'
	  }]);
	  const [equipment_type_id, setEquipmentTypeId] = React.useState(null);
	  const [equipmentSelected, setEquipmentSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez endroit'
	  }]);

	  // initial setup

	  React.useEffect(() => {
	    async function fetchProductOptions() {
	      const res = await fetchOptions(PRODUCT_TABLE_NAME);
	      setProductOptions(res);
	    }
	    fetchProductOptions();
	  }, [record.params.PRODUCT_FIELD_NAME]);
	  React.useEffect(() => {
	    setEndroitSelected([{
	      value: '',
	      label: 'Choissisez produit'
	    }]);
	    setEndroitID(null);
	    async function fetchEndroitOptions() {
	      if (!product_id) return;
	      const res = await fetchOptions(ENDROIT_TABLE_NAME, PRODUCT_FIELD_NAME, product_id);
	      setEndroitOptions(res);
	    }
	    fetchEndroitOptions();
	  }, [product_id, record.params.PRODUCT_FIELD_NAME]);
	  React.useEffect(() => {
	    setEquipmentSelected([{
	      value: '',
	      label: 'Choissisez endroit'
	    }]);
	    setEquipmentTypeId(null);
	    async function fetchEquipmentOptions() {
	      if (!product_id || !endroit_id) return;
	      const res = await fetchOptions(EQUIPMENT_TYPE_TABLE_NAME, ENDROIT_FIELD_NAME, endroit_id);
	      setEquipmentTypeOptions(res);
	    }
	    fetchEquipmentOptions();
	  }, [product_id, endroit_id, record.params.ENDROIT_FIELD_NAME, record.params.PRODUCT_FIELD_NAME]);

	  // handlers
	  const handleProductSelect = selectedOption => {
	    setProductSelected(selectedOption);
	    setProductID(selectedOption.value);
	  };
	  const handleEndroitSelect = selectedOption => {
	    setEndroitSelected(selectedOption);
	    setEndroitID(selectedOption.value);
	  };
	  const handleEquipmentSelect = selectedOption => {
	    setEquipmentSelected(selectedOption);
	    setEquipmentTypeId(selectedOption.value);
	  };

	  // on change useEffect

	  React.useEffect(() => {
	    onChange(PRODUCT_FIELD_NAME, product_id);
	    onChange(ENDROIT_FIELD_NAME, endroit_id);
	    onChange(EQUIPMENT_TYPE_FIELD_NAME, equipment_type_id);
	  }, [product_id, endroit_id, equipment_type_id]);

	  // setOptions(formattedOptions);
	  // // FOR EDIT ACTION Set initial value after options have loaded
	  // if (record && record.params[property.name]) {
	  //   const initialValue = formattedOptions.find(
	  //     (opt) => opt.value === record.params[property.name]
	  //   );
	  //   console.log(initialValue);
	  //   setSelectedOptionValue(initialValue);
	  // }
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    direction: "row"
	  }, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: PRODUCT_FIELD_NAME,
	    mb: 1
	  }, "Sur quel produit est install\xE9 le puce?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: PRODUCT_FIELD_NAME,
	    options: productOptions,
	    onChange: selectedOption => handleProductSelect(selectedOption),
	    name: PRODUCT_FIELD_NAME,
	    value: productSelected
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: ENDROIT_FIELD_NAME,
	    my: 1
	  }, "A quel endroit?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: ENDROIT_FIELD_NAME,
	    options: endroitOptions,
	    onChange: selectedOption => handleEndroitSelect(selectedOption),
	    name: ENDROIT_FIELD_NAME,
	    value: endroitSelected
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: EQUIPMENT_TYPE_FIELD_NAME,
	    my: 1
	  }, "Type d'unit\xE9?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: EQUIPMENT_TYPE_FIELD_NAME,
	    options: equipmentTypeOptions,
	    onChange: selectedOption => handleEquipmentSelect(selectedOption),
	    name: EQUIPMENT_TYPE_FIELD_NAME,
	    value: equipmentSelected
	  })));
	};

	const FrenchDate = ({
	  date
	}) => {
	  // Create a new date object if the date is a string or use the date object directly
	  const dateObj = typeof date === 'string' ? new Date(date) : date;

	  // Format the date using the French locale
	  const formattedDate = new Intl.DateTimeFormat('fr-FR', {
	    day: 'numeric',
	    month: 'long',
	    year: 'numeric'
	  }).format(dateObj);

	  // Output the formatted date in the desired structure "jour - mois - année"
	  const [day, month, year] = formattedDate.split(' ');
	  const displayDate = `${day} - ${month} - ${year}`;
	  return /*#__PURE__*/React__default.default.createElement("span", null, displayDate);
	};

	const getAllProperties = record => {
	  const allEntries = {};
	  for (const entry of Object.entries(record.params)) {
	    allEntries[entry[0]] = entry[1];
	  }
	  for (const entry of Object.entries(record.populated)) {
	    const key = entry[0];
	    const val = entry[1].params;
	    allEntries[key] = val;
	  }
	  return allEntries;
	};
	const EquipmentShowComponent = ({
	  record
	}) => {
	  const allEntries = getAllProperties(record);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Section, {
	    mx: "auto"
	  }, /*#__PURE__*/React__default.default.createElement(Heading, null, "Parametrage"), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 3
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Site:"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/sites/records/${allEntries.site_id.id}/show`
	  }, allEntries.site_id.name || 'Link to Site')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Puce id: "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/nfc_tags/records/${allEntries.nfc_tag_id.id}/show`
	  }, allEntries.nfc_tag_id.id || 'Link to Puce')), allEntries.parent_equipment_id && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Pi\xE8ce coupl\xE9e: "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipments/records/${allEntries.parent_equipment_id.id}/show`
	  }, allEntries.parent_equipment_id.id || 'Link to Puce')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Date d'installation: "), /*#__PURE__*/React__default.default.createElement(FrenchDate, {
	    date: allEntries.installation_date
	  }))), /*#__PURE__*/React__default.default.createElement(ProductShow, {
	    produit: {
	      id: allEntries.produit_id.id,
	      name: allEntries.produit_id.name
	    },
	    endroit: {
	      id: allEntries.endroit_id.id,
	      name: allEntries.endroit_id.name
	    },
	    equipment: {
	      id: allEntries.equipment_type_id.id,
	      name: allEntries.equipment_type_id.name
	    }
	  })), /*#__PURE__*/React__default.default.createElement(Section, null, /*#__PURE__*/React__default.default.createElement(Heading, null, "Informations"), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Marque"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.equipment_brand_id.name)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Model"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.equipment_model)), allEntries.serial_number && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "N de serie"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.serial_number)), allEntries.remote_control_number && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Telecommande"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.remote_control_number)), allEntries.equipment_type_id.is_int && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Type"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.unite_interieur_type_id ? allEntries.unite_interieur_type_id.name : 'non spécifié ')), allEntries.equipment_type_id.is_ext && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Type"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.unite_exterieur_type_id ? allEntries.unite_exterieur_type_id.name : 'non spécifié '))), allEntries.equipment_type_id.is_finalite && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    fontStyle: "italic",
	    fontColor: "#39FF14",
	    mb: 1
	  }, "Finalit\xE9s")), /*#__PURE__*/React__default.default.createElement(Row, null, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Plancher chauffant :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_plancher_chauffant ? 'approval' : 'danger'
	  }, allEntries.is_plancher_chauffant ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Plancher raffraichissant :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_plancher_raffraichssant ? 'approval' : 'danger'
	  }, allEntries.is_plancher_raffraichssant ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Radiateurs : "), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_radiateurs ? 'approval' : 'danger'
	  }, allEntries.is_radiateurs ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Ventilo-onvecteur(s) :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.ventilo_convecteurs ? 'approval' : 'danger'
	  }, ` ${allEntries.ventilo_convecteurs ? ' Oui' : ' Non'}`)))), allEntries.equipment_type_id.is_gas && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    fontStyle: "italic",
	    fontColor: "#39FF14",
	    mb: 1
	  }, "Gas Informations")), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Type de gaz"), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.gas_type_id.name)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Poids de gaz"), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.gas_weight)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "D\xE9tecteur de fuite: "), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.has_leak_detection ? 'approval' : 'danger'
	  }, allEntries.has_leak_detection ? 'Oui' : 'Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Contr\xF4le d\u2019\xE9tanch\xE9it\xE9 obligatoire: "), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.leak_detection_periodicity))))));
	};

	const InterventionShowComponent = ({
	  record
	}) => {
	  const allEntries = getAllProperties(record);
	  console.log(allEntries);
	  return /*#__PURE__*/React__default.default.createElement("div", null, "InterventionShowComponent");
	};

	function bind(fn, thisArg) {
	  return function wrap() {
	    return fn.apply(thisArg, arguments);
	  };
	}

	// utils is a library of generic helper functions non-specific to axios

	const {toString} = Object.prototype;
	const {getPrototypeOf} = Object;

	const kindOf = (cache => thing => {
	    const str = toString.call(thing);
	    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
	})(Object.create(null));

	const kindOfTest = (type) => {
	  type = type.toLowerCase();
	  return (thing) => kindOf(thing) === type
	};

	const typeOfTest = type => thing => typeof thing === type;

	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 *
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	const {isArray} = Array;

	/**
	 * Determine if a value is undefined
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	const isUndefined = typeOfTest('undefined');

	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
	}

	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	const isArrayBuffer = kindOfTest('ArrayBuffer');


	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  let result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
	  }
	  return result;
	}

	/**
	 * Determine if a value is a String
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	const isString = typeOfTest('string');

	/**
	 * Determine if a value is a Function
	 *
	 * @param {*} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	const isFunction = typeOfTest('function');

	/**
	 * Determine if a value is a Number
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	const isNumber = typeOfTest('number');

	/**
	 * Determine if a value is an Object
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	const isObject = (thing) => thing !== null && typeof thing === 'object';

	/**
	 * Determine if a value is a Boolean
	 *
	 * @param {*} thing The value to test
	 * @returns {boolean} True if value is a Boolean, otherwise false
	 */
	const isBoolean = thing => thing === true || thing === false;

	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a plain Object, otherwise false
	 */
	const isPlainObject = (val) => {
	  if (kindOf(val) !== 'object') {
	    return false;
	  }

	  const prototype = getPrototypeOf(val);
	  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
	};

	/**
	 * Determine if a value is a Date
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	const isDate$1 = kindOfTest('Date');

	/**
	 * Determine if a value is a File
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFile = kindOfTest('File');

	/**
	 * Determine if a value is a Blob
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	const isBlob = kindOfTest('Blob');

	/**
	 * Determine if a value is a FileList
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	const isFileList = kindOfTest('FileList');

	/**
	 * Determine if a value is a Stream
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	const isStream = (val) => isObject(val) && isFunction(val.pipe);

	/**
	 * Determine if a value is a FormData
	 *
	 * @param {*} thing The value to test
	 *
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	const isFormData = (thing) => {
	  let kind;
	  return thing && (
	    (typeof FormData === 'function' && thing instanceof FormData) || (
	      isFunction(thing.append) && (
	        (kind = kindOf(thing)) === 'formdata' ||
	        // detect form-data instance
	        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
	      )
	    )
	  )
	};

	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	const isURLSearchParams = kindOfTest('URLSearchParams');

	const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 *
	 * @returns {String} The String freed of excess whitespace
	 */
	const trim = (str) => str.trim ?
	  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 *
	 * @param {Boolean} [allOwnKeys = false]
	 * @returns {any}
	 */
	function forEach(obj, fn, {allOwnKeys = false} = {}) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }

	  let i;
	  let l;

	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
	    const len = keys.length;
	    let key;

	    for (i = 0; i < len; i++) {
	      key = keys[i];
	      fn.call(null, obj[key], key, obj);
	    }
	  }
	}

	function findKey$1(obj, key) {
	  key = key.toLowerCase();
	  const keys = Object.keys(obj);
	  let i = keys.length;
	  let _key;
	  while (i-- > 0) {
	    _key = keys[i];
	    if (key === _key.toLowerCase()) {
	      return _key;
	    }
	  }
	  return null;
	}

	const _global = (() => {
	  /*eslint no-undef:0*/
	  if (typeof globalThis !== "undefined") return globalThis;
	  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
	})();

	const isContextDefined = (context) => !isUndefined(context) && context !== _global;

	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 *
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  const {caseless} = isContextDefined(this) && this || {};
	  const result = {};
	  const assignValue = (val, key) => {
	    const targetKey = caseless && findKey$1(result, key) || key;
	    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
	      result[targetKey] = merge(result[targetKey], val);
	    } else if (isPlainObject(val)) {
	      result[targetKey] = merge({}, val);
	    } else if (isArray(val)) {
	      result[targetKey] = val.slice();
	    } else {
	      result[targetKey] = val;
	    }
	  };

	  for (let i = 0, l = arguments.length; i < l; i++) {
	    arguments[i] && forEach(arguments[i], assignValue);
	  }
	  return result;
	}

	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 *
	 * @param {Boolean} [allOwnKeys]
	 * @returns {Object} The resulting value of object a
	 */
	const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
	  forEach(b, (val, key) => {
	    if (thisArg && isFunction(val)) {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  }, {allOwnKeys});
	  return a;
	};

	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 *
	 * @returns {string} content value without BOM
	 */
	const stripBOM = (content) => {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }
	  return content;
	};

	/**
	 * Inherit the prototype methods from one constructor into another
	 * @param {function} constructor
	 * @param {function} superConstructor
	 * @param {object} [props]
	 * @param {object} [descriptors]
	 *
	 * @returns {void}
	 */
	const inherits = (constructor, superConstructor, props, descriptors) => {
	  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
	  constructor.prototype.constructor = constructor;
	  Object.defineProperty(constructor, 'super', {
	    value: superConstructor.prototype
	  });
	  props && Object.assign(constructor.prototype, props);
	};

	/**
	 * Resolve object with deep prototype chain to a flat object
	 * @param {Object} sourceObj source object
	 * @param {Object} [destObj]
	 * @param {Function|Boolean} [filter]
	 * @param {Function} [propFilter]
	 *
	 * @returns {Object}
	 */
	const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
	  let props;
	  let i;
	  let prop;
	  const merged = {};

	  destObj = destObj || {};
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  if (sourceObj == null) return destObj;

	  do {
	    props = Object.getOwnPropertyNames(sourceObj);
	    i = props.length;
	    while (i-- > 0) {
	      prop = props[i];
	      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
	        destObj[prop] = sourceObj[prop];
	        merged[prop] = true;
	      }
	    }
	    sourceObj = filter !== false && getPrototypeOf(sourceObj);
	  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

	  return destObj;
	};

	/**
	 * Determines whether a string ends with the characters of a specified string
	 *
	 * @param {String} str
	 * @param {String} searchString
	 * @param {Number} [position= 0]
	 *
	 * @returns {boolean}
	 */
	const endsWith = (str, searchString, position) => {
	  str = String(str);
	  if (position === undefined || position > str.length) {
	    position = str.length;
	  }
	  position -= searchString.length;
	  const lastIndex = str.indexOf(searchString, position);
	  return lastIndex !== -1 && lastIndex === position;
	};


	/**
	 * Returns new array from array like object or null if failed
	 *
	 * @param {*} [thing]
	 *
	 * @returns {?Array}
	 */
	const toArray = (thing) => {
	  if (!thing) return null;
	  if (isArray(thing)) return thing;
	  let i = thing.length;
	  if (!isNumber(i)) return null;
	  const arr = new Array(i);
	  while (i-- > 0) {
	    arr[i] = thing[i];
	  }
	  return arr;
	};

	/**
	 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
	 * thing passed in is an instance of Uint8Array
	 *
	 * @param {TypedArray}
	 *
	 * @returns {Array}
	 */
	// eslint-disable-next-line func-names
	const isTypedArray = (TypedArray => {
	  // eslint-disable-next-line func-names
	  return thing => {
	    return TypedArray && thing instanceof TypedArray;
	  };
	})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

	/**
	 * For each entry in the object, call the function with the key and value.
	 *
	 * @param {Object<any, any>} obj - The object to iterate over.
	 * @param {Function} fn - The function to call for each entry.
	 *
	 * @returns {void}
	 */
	const forEachEntry = (obj, fn) => {
	  const generator = obj && obj[Symbol.iterator];

	  const iterator = generator.call(obj);

	  let result;

	  while ((result = iterator.next()) && !result.done) {
	    const pair = result.value;
	    fn.call(obj, pair[0], pair[1]);
	  }
	};

	/**
	 * It takes a regular expression and a string, and returns an array of all the matches
	 *
	 * @param {string} regExp - The regular expression to match against.
	 * @param {string} str - The string to search.
	 *
	 * @returns {Array<boolean>}
	 */
	const matchAll = (regExp, str) => {
	  let matches;
	  const arr = [];

	  while ((matches = regExp.exec(str)) !== null) {
	    arr.push(matches);
	  }

	  return arr;
	};

	/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
	const isHTMLForm = kindOfTest('HTMLFormElement');

	const toCamelCase = str => {
	  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
	    function replacer(m, p1, p2) {
	      return p1.toUpperCase() + p2;
	    }
	  );
	};

	/* Creating a function that will check if an object has a property. */
	const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

	/**
	 * Determine if a value is a RegExp object
	 *
	 * @param {*} val The value to test
	 *
	 * @returns {boolean} True if value is a RegExp object, otherwise false
	 */
	const isRegExp = kindOfTest('RegExp');

	const reduceDescriptors = (obj, reducer) => {
	  const descriptors = Object.getOwnPropertyDescriptors(obj);
	  const reducedDescriptors = {};

	  forEach(descriptors, (descriptor, name) => {
	    let ret;
	    if ((ret = reducer(descriptor, name, obj)) !== false) {
	      reducedDescriptors[name] = ret || descriptor;
	    }
	  });

	  Object.defineProperties(obj, reducedDescriptors);
	};

	/**
	 * Makes all methods read-only
	 * @param {Object} obj
	 */

	const freezeMethods = (obj) => {
	  reduceDescriptors(obj, (descriptor, name) => {
	    // skip restricted props in strict mode
	    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
	      return false;
	    }

	    const value = obj[name];

	    if (!isFunction(value)) return;

	    descriptor.enumerable = false;

	    if ('writable' in descriptor) {
	      descriptor.writable = false;
	      return;
	    }

	    if (!descriptor.set) {
	      descriptor.set = () => {
	        throw Error('Can not rewrite read-only method \'' + name + '\'');
	      };
	    }
	  });
	};

	const toObjectSet = (arrayOrString, delimiter) => {
	  const obj = {};

	  const define = (arr) => {
	    arr.forEach(value => {
	      obj[value] = true;
	    });
	  };

	  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

	  return obj;
	};

	const noop = () => {};

	const toFiniteNumber = (value, defaultValue) => {
	  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
	};

	const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

	const DIGIT = '0123456789';

	const ALPHABET = {
	  DIGIT,
	  ALPHA,
	  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
	};

	const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
	  let str = '';
	  const {length} = alphabet;
	  while (size--) {
	    str += alphabet[Math.random() * length|0];
	  }

	  return str;
	};

	/**
	 * If the thing is a FormData object, return true, otherwise return false.
	 *
	 * @param {unknown} thing - The thing to check.
	 *
	 * @returns {boolean}
	 */
	function isSpecCompliantForm(thing) {
	  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
	}

	const toJSONObject = (obj) => {
	  const stack = new Array(10);

	  const visit = (source, i) => {

	    if (isObject(source)) {
	      if (stack.indexOf(source) >= 0) {
	        return;
	      }

	      if(!('toJSON' in source)) {
	        stack[i] = source;
	        const target = isArray(source) ? [] : {};

	        forEach(source, (value, key) => {
	          const reducedValue = visit(value, i + 1);
	          !isUndefined(reducedValue) && (target[key] = reducedValue);
	        });

	        stack[i] = undefined;

	        return target;
	      }
	    }

	    return source;
	  };

	  return visit(obj, 0);
	};

	const isAsyncFn = kindOfTest('AsyncFunction');

	const isThenable = (thing) =>
	  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

	var utils$1 = {
	  isArray,
	  isArrayBuffer,
	  isBuffer,
	  isFormData,
	  isArrayBufferView,
	  isString,
	  isNumber,
	  isBoolean,
	  isObject,
	  isPlainObject,
	  isReadableStream,
	  isRequest,
	  isResponse,
	  isHeaders,
	  isUndefined,
	  isDate: isDate$1,
	  isFile,
	  isBlob,
	  isRegExp,
	  isFunction,
	  isStream,
	  isURLSearchParams,
	  isTypedArray,
	  isFileList,
	  forEach,
	  merge,
	  extend,
	  trim,
	  stripBOM,
	  inherits,
	  toFlatObject,
	  kindOf,
	  kindOfTest,
	  endsWith,
	  toArray,
	  forEachEntry,
	  matchAll,
	  isHTMLForm,
	  hasOwnProperty,
	  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
	  reduceDescriptors,
	  freezeMethods,
	  toObjectSet,
	  toCamelCase,
	  noop,
	  toFiniteNumber,
	  findKey: findKey$1,
	  global: _global,
	  isContextDefined,
	  ALPHABET,
	  generateString,
	  isSpecCompliantForm,
	  toJSONObject,
	  isAsyncFn,
	  isThenable
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [config] The config.
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 *
	 * @returns {Error} The created error.
	 */
	function AxiosError(message, code, config, request, response) {
	  Error.call(this);

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = (new Error()).stack;
	  }

	  this.message = message;
	  this.name = 'AxiosError';
	  code && (this.code = code);
	  config && (this.config = config);
	  request && (this.request = request);
	  response && (this.response = response);
	}

	utils$1.inherits(AxiosError, Error, {
	  toJSON: function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: utils$1.toJSONObject(this.config),
	      code: this.code,
	      status: this.response && this.response.status ? this.response.status : null
	    };
	  }
	});

	const prototype$1 = AxiosError.prototype;
	const descriptors = {};

	[
	  'ERR_BAD_OPTION_VALUE',
	  'ERR_BAD_OPTION',
	  'ECONNABORTED',
	  'ETIMEDOUT',
	  'ERR_NETWORK',
	  'ERR_FR_TOO_MANY_REDIRECTS',
	  'ERR_DEPRECATED',
	  'ERR_BAD_RESPONSE',
	  'ERR_BAD_REQUEST',
	  'ERR_CANCELED',
	  'ERR_NOT_SUPPORT',
	  'ERR_INVALID_URL'
	// eslint-disable-next-line func-names
	].forEach(code => {
	  descriptors[code] = {value: code};
	});

	Object.defineProperties(AxiosError, descriptors);
	Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

	// eslint-disable-next-line func-names
	AxiosError.from = (error, code, config, request, response, customProps) => {
	  const axiosError = Object.create(prototype$1);

	  utils$1.toFlatObject(error, axiosError, function filter(obj) {
	    return obj !== Error.prototype;
	  }, prop => {
	    return prop !== 'isAxiosError';
	  });

	  AxiosError.call(axiosError, error.message, code, config, request, response);

	  axiosError.cause = error;

	  axiosError.name = error.name;

	  customProps && Object.assign(axiosError, customProps);

	  return axiosError;
	};

	// eslint-disable-next-line strict
	var httpAdapter = null;

	/**
	 * Determines if the given thing is a array or js object.
	 *
	 * @param {string} thing - The object or array to be visited.
	 *
	 * @returns {boolean}
	 */
	function isVisitable(thing) {
	  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
	}

	/**
	 * It removes the brackets from the end of a string
	 *
	 * @param {string} key - The key of the parameter.
	 *
	 * @returns {string} the key without the brackets.
	 */
	function removeBrackets(key) {
	  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
	}

	/**
	 * It takes a path, a key, and a boolean, and returns a string
	 *
	 * @param {string} path - The path to the current key.
	 * @param {string} key - The key of the current object being iterated over.
	 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
	 *
	 * @returns {string} The path to the current key.
	 */
	function renderKey(path, key, dots) {
	  if (!path) return key;
	  return path.concat(key).map(function each(token, i) {
	    // eslint-disable-next-line no-param-reassign
	    token = removeBrackets(token);
	    return !dots && i ? '[' + token + ']' : token;
	  }).join(dots ? '.' : '');
	}

	/**
	 * If the array is an array and none of its elements are visitable, then it's a flat array.
	 *
	 * @param {Array<any>} arr - The array to check
	 *
	 * @returns {boolean}
	 */
	function isFlatArray(arr) {
	  return utils$1.isArray(arr) && !arr.some(isVisitable);
	}

	const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
	  return /^is[A-Z]/.test(prop);
	});

	/**
	 * Convert a data object to FormData
	 *
	 * @param {Object} obj
	 * @param {?Object} [formData]
	 * @param {?Object} [options]
	 * @param {Function} [options.visitor]
	 * @param {Boolean} [options.metaTokens = true]
	 * @param {Boolean} [options.dots = false]
	 * @param {?Boolean} [options.indexes = false]
	 *
	 * @returns {Object}
	 **/

	/**
	 * It converts an object into a FormData object
	 *
	 * @param {Object<any, any>} obj - The object to convert to form data.
	 * @param {string} formData - The FormData object to append to.
	 * @param {Object<string, any>} options
	 *
	 * @returns
	 */
	function toFormData(obj, formData, options) {
	  if (!utils$1.isObject(obj)) {
	    throw new TypeError('target must be an object');
	  }

	  // eslint-disable-next-line no-param-reassign
	  formData = formData || new (FormData)();

	  // eslint-disable-next-line no-param-reassign
	  options = utils$1.toFlatObject(options, {
	    metaTokens: true,
	    dots: false,
	    indexes: false
	  }, false, function defined(option, source) {
	    // eslint-disable-next-line no-eq-null,eqeqeq
	    return !utils$1.isUndefined(source[option]);
	  });

	  const metaTokens = options.metaTokens;
	  // eslint-disable-next-line no-use-before-define
	  const visitor = options.visitor || defaultVisitor;
	  const dots = options.dots;
	  const indexes = options.indexes;
	  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
	  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

	  if (!utils$1.isFunction(visitor)) {
	    throw new TypeError('visitor must be a function');
	  }

	  function convertValue(value) {
	    if (value === null) return '';

	    if (utils$1.isDate(value)) {
	      return value.toISOString();
	    }

	    if (!useBlob && utils$1.isBlob(value)) {
	      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
	    }

	    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
	      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
	    }

	    return value;
	  }

	  /**
	   * Default visitor.
	   *
	   * @param {*} value
	   * @param {String|Number} key
	   * @param {Array<String|Number>} path
	   * @this {FormData}
	   *
	   * @returns {boolean} return true to visit the each prop of the value recursively
	   */
	  function defaultVisitor(value, key, path) {
	    let arr = value;

	    if (value && !path && typeof value === 'object') {
	      if (utils$1.endsWith(key, '{}')) {
	        // eslint-disable-next-line no-param-reassign
	        key = metaTokens ? key : key.slice(0, -2);
	        // eslint-disable-next-line no-param-reassign
	        value = JSON.stringify(value);
	      } else if (
	        (utils$1.isArray(value) && isFlatArray(value)) ||
	        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
	        )) {
	        // eslint-disable-next-line no-param-reassign
	        key = removeBrackets(key);

	        arr.forEach(function each(el, index) {
	          !(utils$1.isUndefined(el) || el === null) && formData.append(
	            // eslint-disable-next-line no-nested-ternary
	            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
	            convertValue(el)
	          );
	        });
	        return false;
	      }
	    }

	    if (isVisitable(value)) {
	      return true;
	    }

	    formData.append(renderKey(path, key, dots), convertValue(value));

	    return false;
	  }

	  const stack = [];

	  const exposedHelpers = Object.assign(predicates, {
	    defaultVisitor,
	    convertValue,
	    isVisitable
	  });

	  function build(value, path) {
	    if (utils$1.isUndefined(value)) return;

	    if (stack.indexOf(value) !== -1) {
	      throw Error('Circular reference detected in ' + path.join('.'));
	    }

	    stack.push(value);

	    utils$1.forEach(value, function each(el, key) {
	      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
	        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
	      );

	      if (result === true) {
	        build(el, path ? path.concat(key) : [key]);
	      }
	    });

	    stack.pop();
	  }

	  if (!utils$1.isObject(obj)) {
	    throw new TypeError('data must be an object');
	  }

	  build(obj);

	  return formData;
	}

	/**
	 * It encodes a string by replacing all characters that are not in the unreserved set with
	 * their percent-encoded equivalents
	 *
	 * @param {string} str - The string to encode.
	 *
	 * @returns {string} The encoded string.
	 */
	function encode$1(str) {
	  const charMap = {
	    '!': '%21',
	    "'": '%27',
	    '(': '%28',
	    ')': '%29',
	    '~': '%7E',
	    '%20': '+',
	    '%00': '\x00'
	  };
	  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
	    return charMap[match];
	  });
	}

	/**
	 * It takes a params object and converts it to a FormData object
	 *
	 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
	 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
	 *
	 * @returns {void}
	 */
	function AxiosURLSearchParams(params, options) {
	  this._pairs = [];

	  params && toFormData(params, this, options);
	}

	const prototype = AxiosURLSearchParams.prototype;

	prototype.append = function append(name, value) {
	  this._pairs.push([name, value]);
	};

	prototype.toString = function toString(encoder) {
	  const _encode = encoder ? function(value) {
	    return encoder.call(this, value, encode$1);
	  } : encode$1;

	  return this._pairs.map(function each(pair) {
	    return _encode(pair[0]) + '=' + _encode(pair[1]);
	  }, '').join('&');
	};

	/**
	 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
	 * URI encoded counterparts
	 *
	 * @param {string} val The value to be encoded.
	 *
	 * @returns {string} The encoded value.
	 */
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}

	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @param {?object} options
	 *
	 * @returns {string} The formatted url
	 */
	function buildURL(url, params, options) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	  
	  const _encode = options && options.encode || encode;

	  const serializeFn = options && options.serialize;

	  let serializedParams;

	  if (serializeFn) {
	    serializedParams = serializeFn(params, options);
	  } else {
	    serializedParams = utils$1.isURLSearchParams(params) ?
	      params.toString() :
	      new AxiosURLSearchParams(params, options).toString(_encode);
	  }

	  if (serializedParams) {
	    const hashmarkIndex = url.indexOf("#");

	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	}

	class InterceptorManager {
	  constructor() {
	    this.handlers = [];
	  }

	  /**
	   * Add a new interceptor to the stack
	   *
	   * @param {Function} fulfilled The function to handle `then` for a `Promise`
	   * @param {Function} rejected The function to handle `reject` for a `Promise`
	   *
	   * @return {Number} An ID used to remove interceptor later
	   */
	  use(fulfilled, rejected, options) {
	    this.handlers.push({
	      fulfilled,
	      rejected,
	      synchronous: options ? options.synchronous : false,
	      runWhen: options ? options.runWhen : null
	    });
	    return this.handlers.length - 1;
	  }

	  /**
	   * Remove an interceptor from the stack
	   *
	   * @param {Number} id The ID that was returned by `use`
	   *
	   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
	   */
	  eject(id) {
	    if (this.handlers[id]) {
	      this.handlers[id] = null;
	    }
	  }

	  /**
	   * Clear all interceptors from the stack
	   *
	   * @returns {void}
	   */
	  clear() {
	    if (this.handlers) {
	      this.handlers = [];
	    }
	  }

	  /**
	   * Iterate over all the registered interceptors
	   *
	   * This method is particularly useful for skipping over any
	   * interceptors that may have become `null` calling `eject`.
	   *
	   * @param {Function} fn The function to call for each interceptor
	   *
	   * @returns {void}
	   */
	  forEach(fn) {
	    utils$1.forEach(this.handlers, function forEachHandler(h) {
	      if (h !== null) {
	        fn(h);
	      }
	    });
	  }
	}

	var transitionalDefaults = {
	  silentJSONParsing: true,
	  forcedJSONParsing: true,
	  clarifyTimeoutError: false
	};

	var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

	var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

	var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

	var platform$1 = {
	  isBrowser: true,
	  classes: {
	    URLSearchParams: URLSearchParams$1,
	    FormData: FormData$1,
	    Blob: Blob$1
	  },
	  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
	};

	const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 *
	 * @returns {boolean}
	 */
	const hasStandardBrowserEnv = (
	  (product) => {
	    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
	  })(typeof navigator !== 'undefined' && navigator.product);

	/**
	 * Determine if we're running in a standard browser webWorker environment
	 *
	 * Although the `isStandardBrowserEnv` method indicates that
	 * `allows axios to run in a web worker`, the WebWorker will still be
	 * filtered out due to its judgment standard
	 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
	 * This leads to a problem when axios post `FormData` in webWorker
	 */
	const hasStandardBrowserWebWorkerEnv = (() => {
	  return (
	    typeof WorkerGlobalScope !== 'undefined' &&
	    // eslint-disable-next-line no-undef
	    self instanceof WorkerGlobalScope &&
	    typeof self.importScripts === 'function'
	  );
	})();

	const origin = hasBrowserEnv && window.location.href || 'http://localhost';

	var utils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		hasBrowserEnv: hasBrowserEnv,
		hasStandardBrowserEnv: hasStandardBrowserEnv,
		hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
		origin: origin
	});

	var platform = {
	  ...utils,
	  ...platform$1
	};

	function toURLEncodedForm(data, options) {
	  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
	    visitor: function(value, key, path, helpers) {
	      if (platform.isNode && utils$1.isBuffer(value)) {
	        this.append(key, value.toString('base64'));
	        return false;
	      }

	      return helpers.defaultVisitor.apply(this, arguments);
	    }
	  }, options));
	}

	/**
	 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
	 *
	 * @param {string} name - The name of the property to get.
	 *
	 * @returns An array of strings.
	 */
	function parsePropPath(name) {
	  // foo[x][y][z]
	  // foo.x.y.z
	  // foo-x-y-z
	  // foo x y z
	  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
	    return match[0] === '[]' ? '' : match[1] || match[0];
	  });
	}

	/**
	 * Convert an array to an object.
	 *
	 * @param {Array<any>} arr - The array to convert to an object.
	 *
	 * @returns An object with the same keys and values as the array.
	 */
	function arrayToObject(arr) {
	  const obj = {};
	  const keys = Object.keys(arr);
	  let i;
	  const len = keys.length;
	  let key;
	  for (i = 0; i < len; i++) {
	    key = keys[i];
	    obj[key] = arr[key];
	  }
	  return obj;
	}

	/**
	 * It takes a FormData object and returns a JavaScript object
	 *
	 * @param {string} formData The FormData object to convert to JSON.
	 *
	 * @returns {Object<string, any> | null} The converted object.
	 */
	function formDataToJSON(formData) {
	  function buildPath(path, value, target, index) {
	    let name = path[index++];

	    if (name === '__proto__') return true;

	    const isNumericKey = Number.isFinite(+name);
	    const isLast = index >= path.length;
	    name = !name && utils$1.isArray(target) ? target.length : name;

	    if (isLast) {
	      if (utils$1.hasOwnProp(target, name)) {
	        target[name] = [target[name], value];
	      } else {
	        target[name] = value;
	      }

	      return !isNumericKey;
	    }

	    if (!target[name] || !utils$1.isObject(target[name])) {
	      target[name] = [];
	    }

	    const result = buildPath(path, value, target[name], index);

	    if (result && utils$1.isArray(target[name])) {
	      target[name] = arrayToObject(target[name]);
	    }

	    return !isNumericKey;
	  }

	  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
	    const obj = {};

	    utils$1.forEachEntry(formData, (name, value) => {
	      buildPath(parsePropPath(name), value, obj, 0);
	    });

	    return obj;
	  }

	  return null;
	}

	/**
	 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
	 * of the input
	 *
	 * @param {any} rawValue - The value to be stringified.
	 * @param {Function} parser - A function that parses a string into a JavaScript object.
	 * @param {Function} encoder - A function that takes a value and returns a string.
	 *
	 * @returns {string} A stringified version of the rawValue.
	 */
	function stringifySafely(rawValue, parser, encoder) {
	  if (utils$1.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils$1.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	const defaults = {

	  transitional: transitionalDefaults,

	  adapter: ['xhr', 'http', 'fetch'],

	  transformRequest: [function transformRequest(data, headers) {
	    const contentType = headers.getContentType() || '';
	    const hasJSONContentType = contentType.indexOf('application/json') > -1;
	    const isObjectPayload = utils$1.isObject(data);

	    if (isObjectPayload && utils$1.isHTMLForm(data)) {
	      data = new FormData(data);
	    }

	    const isFormData = utils$1.isFormData(data);

	    if (isFormData) {
	      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
	    }

	    if (utils$1.isArrayBuffer(data) ||
	      utils$1.isBuffer(data) ||
	      utils$1.isStream(data) ||
	      utils$1.isFile(data) ||
	      utils$1.isBlob(data) ||
	      utils$1.isReadableStream(data)
	    ) {
	      return data;
	    }
	    if (utils$1.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils$1.isURLSearchParams(data)) {
	      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
	      return data.toString();
	    }

	    let isFileList;

	    if (isObjectPayload) {
	      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
	        return toURLEncodedForm(data, this.formSerializer).toString();
	      }

	      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
	        const _FormData = this.env && this.env.FormData;

	        return toFormData(
	          isFileList ? {'files[]': data} : data,
	          _FormData && new _FormData(),
	          this.formSerializer
	        );
	      }
	    }

	    if (isObjectPayload || hasJSONContentType ) {
	      headers.setContentType('application/json', false);
	      return stringifySafely(data);
	    }

	    return data;
	  }],

	  transformResponse: [function transformResponse(data) {
	    const transitional = this.transitional || defaults.transitional;
	    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    const JSONRequested = this.responseType === 'json';

	    if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
	      return data;
	    }

	    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
	      const silentJSONParsing = transitional && transitional.silentJSONParsing;
	      const strictJSONParsing = !silentJSONParsing && JSONRequested;

	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
	          }
	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,

	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',

	  maxContentLength: -1,
	  maxBodyLength: -1,

	  env: {
	    FormData: platform.classes.FormData,
	    Blob: platform.classes.Blob
	  },

	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  },

	  headers: {
	    common: {
	      'Accept': 'application/json, text/plain, */*',
	      'Content-Type': undefined
	    }
	  }
	};

	utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
	  defaults.headers[method] = {};
	});

	// RawAxiosHeaders whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	const ignoreDuplicateOf = utils$1.toObjectSet([
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	]);

	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} rawHeaders Headers needing to be parsed
	 *
	 * @returns {Object} Headers parsed into an object
	 */
	var parseHeaders = rawHeaders => {
	  const parsed = {};
	  let key;
	  let val;
	  let i;

	  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
	    i = line.indexOf(':');
	    key = line.substring(0, i).trim().toLowerCase();
	    val = line.substring(i + 1).trim();

	    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
	      return;
	    }

	    if (key === 'set-cookie') {
	      if (parsed[key]) {
	        parsed[key].push(val);
	      } else {
	        parsed[key] = [val];
	      }
	    } else {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  });

	  return parsed;
	};

	const $internals = Symbol('internals');

	function normalizeHeader(header) {
	  return header && String(header).trim().toLowerCase();
	}

	function normalizeValue(value) {
	  if (value === false || value == null) {
	    return value;
	  }

	  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
	}

	function parseTokens(str) {
	  const tokens = Object.create(null);
	  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
	  let match;

	  while ((match = tokensRE.exec(str))) {
	    tokens[match[1]] = match[2];
	  }

	  return tokens;
	}

	const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

	function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
	  if (utils$1.isFunction(filter)) {
	    return filter.call(this, value, header);
	  }

	  if (isHeaderNameFilter) {
	    value = header;
	  }

	  if (!utils$1.isString(value)) return;

	  if (utils$1.isString(filter)) {
	    return value.indexOf(filter) !== -1;
	  }

	  if (utils$1.isRegExp(filter)) {
	    return filter.test(value);
	  }
	}

	function formatHeader(header) {
	  return header.trim()
	    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
	      return char.toUpperCase() + str;
	    });
	}

	function buildAccessors(obj, header) {
	  const accessorName = utils$1.toCamelCase(' ' + header);

	  ['get', 'set', 'has'].forEach(methodName => {
	    Object.defineProperty(obj, methodName + accessorName, {
	      value: function(arg1, arg2, arg3) {
	        return this[methodName].call(this, header, arg1, arg2, arg3);
	      },
	      configurable: true
	    });
	  });
	}

	class AxiosHeaders {
	  constructor(headers) {
	    headers && this.set(headers);
	  }

	  set(header, valueOrRewrite, rewrite) {
	    const self = this;

	    function setHeader(_value, _header, _rewrite) {
	      const lHeader = normalizeHeader(_header);

	      if (!lHeader) {
	        throw new Error('header name must be a non-empty string');
	      }

	      const key = utils$1.findKey(self, lHeader);

	      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
	        self[key || _header] = normalizeValue(_value);
	      }
	    }

	    const setHeaders = (headers, _rewrite) =>
	      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

	    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
	      setHeaders(header, valueOrRewrite);
	    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
	      setHeaders(parseHeaders(header), valueOrRewrite);
	    } else if (utils$1.isHeaders(header)) {
	      for (const [key, value] of header.entries()) {
	        setHeader(value, key, rewrite);
	      }
	    } else {
	      header != null && setHeader(valueOrRewrite, header, rewrite);
	    }

	    return this;
	  }

	  get(header, parser) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$1.findKey(this, header);

	      if (key) {
	        const value = this[key];

	        if (!parser) {
	          return value;
	        }

	        if (parser === true) {
	          return parseTokens(value);
	        }

	        if (utils$1.isFunction(parser)) {
	          return parser.call(this, value, key);
	        }

	        if (utils$1.isRegExp(parser)) {
	          return parser.exec(value);
	        }

	        throw new TypeError('parser must be boolean|regexp|function');
	      }
	    }
	  }

	  has(header, matcher) {
	    header = normalizeHeader(header);

	    if (header) {
	      const key = utils$1.findKey(this, header);

	      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
	    }

	    return false;
	  }

	  delete(header, matcher) {
	    const self = this;
	    let deleted = false;

	    function deleteHeader(_header) {
	      _header = normalizeHeader(_header);

	      if (_header) {
	        const key = utils$1.findKey(self, _header);

	        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
	          delete self[key];

	          deleted = true;
	        }
	      }
	    }

	    if (utils$1.isArray(header)) {
	      header.forEach(deleteHeader);
	    } else {
	      deleteHeader(header);
	    }

	    return deleted;
	  }

	  clear(matcher) {
	    const keys = Object.keys(this);
	    let i = keys.length;
	    let deleted = false;

	    while (i--) {
	      const key = keys[i];
	      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
	        delete this[key];
	        deleted = true;
	      }
	    }

	    return deleted;
	  }

	  normalize(format) {
	    const self = this;
	    const headers = {};

	    utils$1.forEach(this, (value, header) => {
	      const key = utils$1.findKey(headers, header);

	      if (key) {
	        self[key] = normalizeValue(value);
	        delete self[header];
	        return;
	      }

	      const normalized = format ? formatHeader(header) : String(header).trim();

	      if (normalized !== header) {
	        delete self[header];
	      }

	      self[normalized] = normalizeValue(value);

	      headers[normalized] = true;
	    });

	    return this;
	  }

	  concat(...targets) {
	    return this.constructor.concat(this, ...targets);
	  }

	  toJSON(asStrings) {
	    const obj = Object.create(null);

	    utils$1.forEach(this, (value, header) => {
	      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
	    });

	    return obj;
	  }

	  [Symbol.iterator]() {
	    return Object.entries(this.toJSON())[Symbol.iterator]();
	  }

	  toString() {
	    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
	  }

	  get [Symbol.toStringTag]() {
	    return 'AxiosHeaders';
	  }

	  static from(thing) {
	    return thing instanceof this ? thing : new this(thing);
	  }

	  static concat(first, ...targets) {
	    const computed = new this(first);

	    targets.forEach((target) => computed.set(target));

	    return computed;
	  }

	  static accessor(header) {
	    const internals = this[$internals] = (this[$internals] = {
	      accessors: {}
	    });

	    const accessors = internals.accessors;
	    const prototype = this.prototype;

	    function defineAccessor(_header) {
	      const lHeader = normalizeHeader(_header);

	      if (!accessors[lHeader]) {
	        buildAccessors(prototype, _header);
	        accessors[lHeader] = true;
	      }
	    }

	    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

	    return this;
	  }
	}

	AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

	// reserved names hotfix
	utils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
	  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
	  return {
	    get: () => value,
	    set(headerValue) {
	      this[mapped] = headerValue;
	    }
	  }
	});

	utils$1.freezeMethods(AxiosHeaders);

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Array|Function} fns A single function or Array of functions
	 * @param {?Object} response The response object
	 *
	 * @returns {*} The resulting transformed data
	 */
	function transformData(fns, response) {
	  const config = this || defaults;
	  const context = response || config;
	  const headers = AxiosHeaders.from(context.headers);
	  let data = context.data;

	  utils$1.forEach(fns, function transform(fn) {
	    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
	  });

	  headers.normalize();

	  return data;
	}

	function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	}

	/**
	 * A `CanceledError` is an object that is thrown when an operation is canceled.
	 *
	 * @param {string=} message The message.
	 * @param {Object=} config The config.
	 * @param {Object=} request The request.
	 *
	 * @returns {CanceledError} The created error.
	 */
	function CanceledError(message, config, request) {
	  // eslint-disable-next-line no-eq-null,eqeqeq
	  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
	  this.name = 'CanceledError';
	}

	utils$1.inherits(CanceledError, AxiosError, {
	  __CANCEL__: true
	});

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 *
	 * @returns {object} The response.
	 */
	function settle(resolve, reject, response) {
	  const validateStatus = response.config.validateStatus;
	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(new AxiosError(
	      'Request failed with status code ' + response.status,
	      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
	      response.config,
	      response.request,
	      response
	    ));
	  }
	}

	function parseProtocol(url) {
	  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
	  return match && match[1] || '';
	}

	/**
	 * Calculate data maxRate
	 * @param {Number} [samplesCount= 10]
	 * @param {Number} [min= 1000]
	 * @returns {Function}
	 */
	function speedometer(samplesCount, min) {
	  samplesCount = samplesCount || 10;
	  const bytes = new Array(samplesCount);
	  const timestamps = new Array(samplesCount);
	  let head = 0;
	  let tail = 0;
	  let firstSampleTS;

	  min = min !== undefined ? min : 1000;

	  return function push(chunkLength) {
	    const now = Date.now();

	    const startedAt = timestamps[tail];

	    if (!firstSampleTS) {
	      firstSampleTS = now;
	    }

	    bytes[head] = chunkLength;
	    timestamps[head] = now;

	    let i = tail;
	    let bytesCount = 0;

	    while (i !== head) {
	      bytesCount += bytes[i++];
	      i = i % samplesCount;
	    }

	    head = (head + 1) % samplesCount;

	    if (head === tail) {
	      tail = (tail + 1) % samplesCount;
	    }

	    if (now - firstSampleTS < min) {
	      return;
	    }

	    const passed = startedAt && now - startedAt;

	    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
	  };
	}

	/**
	 * Throttle decorator
	 * @param {Function} fn
	 * @param {Number} freq
	 * @return {Function}
	 */
	function throttle(fn, freq) {
	  let timestamp = 0;
	  const threshold = 1000 / freq;
	  let timer = null;
	  return function throttled() {
	    const force = this === true;

	    const now = Date.now();
	    if (force || now - timestamp > threshold) {
	      if (timer) {
	        clearTimeout(timer);
	        timer = null;
	      }
	      timestamp = now;
	      return fn.apply(null, arguments);
	    }
	    if (!timer) {
	      timer = setTimeout(() => {
	        timer = null;
	        timestamp = Date.now();
	        return fn.apply(null, arguments);
	      }, threshold - (now - timestamp));
	    }
	  };
	}

	var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
	  let bytesNotified = 0;
	  const _speedometer = speedometer(50, 250);

	  return throttle(e => {
	    const loaded = e.loaded;
	    const total = e.lengthComputable ? e.total : undefined;
	    const progressBytes = loaded - bytesNotified;
	    const rate = _speedometer(progressBytes);
	    const inRange = loaded <= total;

	    bytesNotified = loaded;

	    const data = {
	      loaded,
	      total,
	      progress: total ? (loaded / total) : undefined,
	      bytes: progressBytes,
	      rate: rate ? rate : undefined,
	      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
	      event: e,
	      lengthComputable: total != null
	    };

	    data[isDownloadStream ? 'download' : 'upload'] = true;

	    listener(data);
	  }, freq);
	};

	var isURLSameOrigin = platform.hasStandardBrowserEnv ?

	// Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	  (function standardBrowserEnv() {
	    const msie = /(msie|trident)/i.test(navigator.userAgent);
	    const urlParsingNode = document.createElement('a');
	    let originURL;

	    /**
	    * Parse a URL to discover its components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	    function resolveURL(url) {
	      let href = url;

	      if (msie) {
	        // IE needs attribute set twice to normalize properties
	        urlParsingNode.setAttribute('href', href);
	        href = urlParsingNode.href;
	      }

	      urlParsingNode.setAttribute('href', href);

	      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	      return {
	        href: urlParsingNode.href,
	        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	        host: urlParsingNode.host,
	        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	        hostname: urlParsingNode.hostname,
	        port: urlParsingNode.port,
	        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	          urlParsingNode.pathname :
	          '/' + urlParsingNode.pathname
	      };
	    }

	    originURL = resolveURL(window.location.href);

	    /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	    return function isURLSameOrigin(requestURL) {
	      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	      return (parsed.protocol === originURL.protocol &&
	          parsed.host === originURL.host);
	    };
	  })() :

	  // Non standard browser envs (web workers, react-native) lack needed support.
	  (function nonStandardBrowserEnv() {
	    return function isURLSameOrigin() {
	      return true;
	    };
	  })();

	var cookies = platform.hasStandardBrowserEnv ?

	  // Standard browser envs support document.cookie
	  {
	    write(name, value, expires, path, domain, secure) {
	      const cookie = [name + '=' + encodeURIComponent(value)];

	      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

	      utils$1.isString(path) && cookie.push('path=' + path);

	      utils$1.isString(domain) && cookie.push('domain=' + domain);

	      secure === true && cookie.push('secure');

	      document.cookie = cookie.join('; ');
	    },

	    read(name) {
	      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	      return (match ? decodeURIComponent(match[3]) : null);
	    },

	    remove(name) {
	      this.write(name, '', Date.now() - 86400000);
	    }
	  }

	  :

	  // Non-standard browser env (web workers, react-native) lack needed support.
	  {
	    write() {},
	    read() {
	      return null;
	    },
	    remove() {}
	  };

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 *
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
	}

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 *
	 * @returns {string} The combined URL
	 */
	function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	}

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 *
	 * @returns {string} The combined full path
	 */
	function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	}

	const headersToObject = (thing) => thing instanceof AxiosHeaders ? { ...thing } : thing;

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 *
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  const config = {};

	  function getMergedValue(target, source, caseless) {
	    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
	      return utils$1.merge.call({caseless}, target, source);
	    } else if (utils$1.isPlainObject(source)) {
	      return utils$1.merge({}, source);
	    } else if (utils$1.isArray(source)) {
	      return source.slice();
	    }
	    return source;
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDeepProperties(a, b, caseless) {
	    if (!utils$1.isUndefined(b)) {
	      return getMergedValue(a, b, caseless);
	    } else if (!utils$1.isUndefined(a)) {
	      return getMergedValue(undefined, a, caseless);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function valueFromConfig2(a, b) {
	    if (!utils$1.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function defaultToConfig2(a, b) {
	    if (!utils$1.isUndefined(b)) {
	      return getMergedValue(undefined, b);
	    } else if (!utils$1.isUndefined(a)) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  // eslint-disable-next-line consistent-return
	  function mergeDirectKeys(a, b, prop) {
	    if (prop in config2) {
	      return getMergedValue(a, b);
	    } else if (prop in config1) {
	      return getMergedValue(undefined, a);
	    }
	  }

	  const mergeMap = {
	    url: valueFromConfig2,
	    method: valueFromConfig2,
	    data: valueFromConfig2,
	    baseURL: defaultToConfig2,
	    transformRequest: defaultToConfig2,
	    transformResponse: defaultToConfig2,
	    paramsSerializer: defaultToConfig2,
	    timeout: defaultToConfig2,
	    timeoutMessage: defaultToConfig2,
	    withCredentials: defaultToConfig2,
	    withXSRFToken: defaultToConfig2,
	    adapter: defaultToConfig2,
	    responseType: defaultToConfig2,
	    xsrfCookieName: defaultToConfig2,
	    xsrfHeaderName: defaultToConfig2,
	    onUploadProgress: defaultToConfig2,
	    onDownloadProgress: defaultToConfig2,
	    decompress: defaultToConfig2,
	    maxContentLength: defaultToConfig2,
	    maxBodyLength: defaultToConfig2,
	    beforeRedirect: defaultToConfig2,
	    transport: defaultToConfig2,
	    httpAgent: defaultToConfig2,
	    httpsAgent: defaultToConfig2,
	    cancelToken: defaultToConfig2,
	    socketPath: defaultToConfig2,
	    responseEncoding: defaultToConfig2,
	    validateStatus: mergeDirectKeys,
	    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
	  };

	  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
	    const merge = mergeMap[prop] || mergeDeepProperties;
	    const configValue = merge(config1[prop], config2[prop], prop);
	    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
	  });

	  return config;
	}

	var resolveConfig = (config) => {
	  const newConfig = mergeConfig({}, config);

	  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

	  newConfig.headers = headers = AxiosHeaders.from(headers);

	  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

	  // HTTP basic authentication
	  if (auth) {
	    headers.set('Authorization', 'Basic ' +
	      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
	    );
	  }

	  let contentType;

	  if (utils$1.isFormData(data)) {
	    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
	      headers.setContentType(undefined); // Let the browser set it
	    } else if ((contentType = headers.getContentType()) !== false) {
	      // fix semicolon duplication issue for ReactNative FormData implementation
	      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
	      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
	    }
	  }

	  // Add xsrf header
	  // This is only done if running in a standard browser environment.
	  // Specifically not if we're in a web worker, or react-native.

	  if (platform.hasStandardBrowserEnv) {
	    withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

	    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
	      // Add xsrf header
	      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

	      if (xsrfValue) {
	        headers.set(xsrfHeaderName, xsrfValue);
	      }
	    }
	  }

	  return newConfig;
	};

	const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

	var xhrAdapter = isXHRAdapterSupported && function (config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    const _config = resolveConfig(config);
	    let requestData = _config.data;
	    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();
	    let {responseType} = _config;
	    let onCanceled;
	    function done() {
	      if (_config.cancelToken) {
	        _config.cancelToken.unsubscribe(onCanceled);
	      }

	      if (_config.signal) {
	        _config.signal.removeEventListener('abort', onCanceled);
	      }
	    }

	    let request = new XMLHttpRequest();

	    request.open(_config.method.toUpperCase(), _config.url, true);

	    // Set the request timeout in MS
	    request.timeout = _config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      }
	      // Prepare the response
	      const responseHeaders = AxiosHeaders.from(
	        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
	      );
	      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
	        request.responseText : request.response;
	      const response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config,
	        request
	      };

	      settle(function _resolve(value) {
	        resolve(value);
	        done();
	      }, function _reject(err) {
	        reject(err);
	        done();
	      }, response);

	      // Clean up request
	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        }

	        // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request
	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        }
	        // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'
	        setTimeout(onloadend);
	      };
	    }

	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, _config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, _config, request));

	      // Clean up request
	      request = null;
	    };

	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
	      const transitional = _config.transitional || transitionalDefaults;
	      if (_config.timeoutErrorMessage) {
	        timeoutErrorMessage = _config.timeoutErrorMessage;
	      }
	      reject(new AxiosError(
	        timeoutErrorMessage,
	        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
	        _config,
	        request));

	      // Clean up request
	      request = null;
	    };

	    // Remove Content-Type if data is undefined
	    requestData === undefined && requestHeaders.setContentType(null);

	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
	        request.setRequestHeader(key, val);
	      });
	    }

	    // Add withCredentials to request if needed
	    if (!utils$1.isUndefined(_config.withCredentials)) {
	      request.withCredentials = !!_config.withCredentials;
	    }

	    // Add responseType to request if needed
	    if (responseType && responseType !== 'json') {
	      request.responseType = _config.responseType;
	    }

	    // Handle progress if needed
	    if (typeof _config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', progressEventReducer(_config.onDownloadProgress, true));
	    }

	    // Not all browsers support upload events
	    if (typeof _config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', progressEventReducer(_config.onUploadProgress));
	    }

	    if (_config.cancelToken || _config.signal) {
	      // Handle cancellation
	      // eslint-disable-next-line func-names
	      onCanceled = cancel => {
	        if (!request) {
	          return;
	        }
	        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
	        request.abort();
	        request = null;
	      };

	      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
	      if (_config.signal) {
	        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
	      }
	    }

	    const protocol = parseProtocol(_config.url);

	    if (protocol && platform.protocols.indexOf(protocol) === -1) {
	      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
	      return;
	    }


	    // Send the request
	    request.send(requestData || null);
	  });
	};

	const composeSignals = (signals, timeout) => {
	  let controller = new AbortController();

	  let aborted;

	  const onabort = function (cancel) {
	    if (!aborted) {
	      aborted = true;
	      unsubscribe();
	      const err = cancel instanceof Error ? cancel : this.reason;
	      controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
	    }
	  };

	  let timer = timeout && setTimeout(() => {
	    onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
	  }, timeout);

	  const unsubscribe = () => {
	    if (signals) {
	      timer && clearTimeout(timer);
	      timer = null;
	      signals.forEach(signal => {
	        signal &&
	        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));
	      });
	      signals = null;
	    }
	  };

	  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));

	  const {signal} = controller;

	  signal.unsubscribe = unsubscribe;

	  return [signal, () => {
	    timer && clearTimeout(timer);
	    timer = null;
	  }];
	};

	const streamChunk = function* (chunk, chunkSize) {
	  let len = chunk.byteLength;

	  if (!chunkSize || len < chunkSize) {
	    yield chunk;
	    return;
	  }

	  let pos = 0;
	  let end;

	  while (pos < len) {
	    end = pos + chunkSize;
	    yield chunk.slice(pos, end);
	    pos = end;
	  }
	};

	const readBytes = async function* (iterable, chunkSize, encode) {
	  for await (const chunk of iterable) {
	    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);
	  }
	};

	const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {
	  const iterator = readBytes(stream, chunkSize, encode);

	  let bytes = 0;

	  return new ReadableStream({
	    type: 'bytes',

	    async pull(controller) {
	      const {done, value} = await iterator.next();

	      if (done) {
	        controller.close();
	        onFinish();
	        return;
	      }

	      let len = value.byteLength;
	      onProgress && onProgress(bytes += len);
	      controller.enqueue(new Uint8Array(value));
	    },
	    cancel(reason) {
	      onFinish(reason);
	      return iterator.return();
	    }
	  }, {
	    highWaterMark: 2
	  })
	};

	const fetchProgressDecorator = (total, fn) => {
	  const lengthComputable = total != null;
	  return (loaded) => setTimeout(() => fn({
	    lengthComputable,
	    total,
	    loaded
	  }));
	};

	const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
	const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

	// used only inside the fetch adapter
	const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
	    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
	    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
	);

	const supportsRequestStream = isReadableStreamSupported && (() => {
	  let duplexAccessed = false;

	  const hasContentType = new Request(platform.origin, {
	    body: new ReadableStream(),
	    method: 'POST',
	    get duplex() {
	      duplexAccessed = true;
	      return 'half';
	    },
	  }).headers.has('Content-Type');

	  return duplexAccessed && !hasContentType;
	})();

	const DEFAULT_CHUNK_SIZE = 64 * 1024;

	const supportsResponseStream = isReadableStreamSupported && !!(()=> {
	  try {
	    return utils$1.isReadableStream(new Response('').body);
	  } catch(err) {
	    // return undefined
	  }
	})();

	const resolvers = {
	  stream: supportsResponseStream && ((res) => res.body)
	};

	isFetchSupported && (((res) => {
	  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
	    !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res) => res[type]() :
	      (_, config) => {
	        throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
	      });
	  });
	})(new Response));

	const getBodyLength = async (body) => {
	  if (body == null) {
	    return 0;
	  }

	  if(utils$1.isBlob(body)) {
	    return body.size;
	  }

	  if(utils$1.isSpecCompliantForm(body)) {
	    return (await new Request(body).arrayBuffer()).byteLength;
	  }

	  if(utils$1.isArrayBufferView(body)) {
	    return body.byteLength;
	  }

	  if(utils$1.isURLSearchParams(body)) {
	    body = body + '';
	  }

	  if(utils$1.isString(body)) {
	    return (await encodeText(body)).byteLength;
	  }
	};

	const resolveBodyLength = async (headers, body) => {
	  const length = utils$1.toFiniteNumber(headers.getContentLength());

	  return length == null ? getBodyLength(body) : length;
	};

	var fetchAdapter = isFetchSupported && (async (config) => {
	  let {
	    url,
	    method,
	    data,
	    signal,
	    cancelToken,
	    timeout,
	    onDownloadProgress,
	    onUploadProgress,
	    responseType,
	    headers,
	    withCredentials = 'same-origin',
	    fetchOptions
	  } = resolveConfig(config);

	  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

	  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?
	    composeSignals([signal, cancelToken], timeout) : [];

	  let finished, request;

	  const onFinish = () => {
	    !finished && setTimeout(() => {
	      composedSignal && composedSignal.unsubscribe();
	    });

	    finished = true;
	  };

	  let requestContentLength;

	  try {
	    if (
	      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
	      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
	    ) {
	      let _request = new Request(url, {
	        method: 'POST',
	        body: data,
	        duplex: "half"
	      });

	      let contentTypeHeader;

	      if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
	        headers.setContentType(contentTypeHeader);
	      }

	      if (_request.body) {
	        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(
	          requestContentLength,
	          progressEventReducer(onUploadProgress)
	        ), null, encodeText);
	      }
	    }

	    if (!utils$1.isString(withCredentials)) {
	      withCredentials = withCredentials ? 'cors' : 'omit';
	    }

	    request = new Request(url, {
	      ...fetchOptions,
	      signal: composedSignal,
	      method: method.toUpperCase(),
	      headers: headers.normalize().toJSON(),
	      body: data,
	      duplex: "half",
	      withCredentials
	    });

	    let response = await fetch(request);

	    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

	    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
	      const options = {};

	      ['status', 'statusText', 'headers'].forEach(prop => {
	        options[prop] = response[prop];
	      });

	      const responseContentLength = utils$1.toFiniteNumber(response.headers.get('content-length'));

	      response = new Response(
	        trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(
	          responseContentLength,
	          progressEventReducer(onDownloadProgress, true)
	        ), isStreamResponse && onFinish, encodeText),
	        options
	      );
	    }

	    responseType = responseType || 'text';

	    let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || 'text'](response, config);

	    !isStreamResponse && onFinish();

	    stopTimeout && stopTimeout();

	    return await new Promise((resolve, reject) => {
	      settle(resolve, reject, {
	        data: responseData,
	        headers: AxiosHeaders.from(response.headers),
	        status: response.status,
	        statusText: response.statusText,
	        config,
	        request
	      });
	    })
	  } catch (err) {
	    onFinish();

	    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
	      throw Object.assign(
	        new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request),
	        {
	          cause: err.cause || err
	        }
	      )
	    }

	    throw AxiosError.from(err, err && err.code, config, request);
	  }
	});

	const knownAdapters = {
	  http: httpAdapter,
	  xhr: xhrAdapter,
	  fetch: fetchAdapter
	};

	utils$1.forEach(knownAdapters, (fn, value) => {
	  if (fn) {
	    try {
	      Object.defineProperty(fn, 'name', {value});
	    } catch (e) {
	      // eslint-disable-next-line no-empty
	    }
	    Object.defineProperty(fn, 'adapterName', {value});
	  }
	});

	const renderReason = (reason) => `- ${reason}`;

	const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

	var adapters = {
	  getAdapter: (adapters) => {
	    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

	    const {length} = adapters;
	    let nameOrAdapter;
	    let adapter;

	    const rejectedReasons = {};

	    for (let i = 0; i < length; i++) {
	      nameOrAdapter = adapters[i];
	      let id;

	      adapter = nameOrAdapter;

	      if (!isResolvedHandle(nameOrAdapter)) {
	        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

	        if (adapter === undefined) {
	          throw new AxiosError(`Unknown adapter '${id}'`);
	        }
	      }

	      if (adapter) {
	        break;
	      }

	      rejectedReasons[id || '#' + i] = adapter;
	    }

	    if (!adapter) {

	      const reasons = Object.entries(rejectedReasons)
	        .map(([id, state]) => `adapter ${id} ` +
	          (state === false ? 'is not supported by the environment' : 'is not available in the build')
	        );

	      let s = length ?
	        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
	        'as no adapter specified';

	      throw new AxiosError(
	        `There is no suitable adapter to dispatch the request ` + s,
	        'ERR_NOT_SUPPORT'
	      );
	    }

	    return adapter;
	  },
	  adapters: knownAdapters
	};

	/**
	 * Throws a `CanceledError` if cancellation has been requested.
	 *
	 * @param {Object} config The config that is to be used for the request
	 *
	 * @returns {void}
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }

	  if (config.signal && config.signal.aborted) {
	    throw new CanceledError(null, config);
	  }
	}

	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 *
	 * @returns {Promise} The Promise to be fulfilled
	 */
	function dispatchRequest(config) {
	  throwIfCancellationRequested(config);

	  config.headers = AxiosHeaders.from(config.headers);

	  // Transform request data
	  config.data = transformData.call(
	    config,
	    config.transformRequest
	  );

	  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
	    config.headers.setContentType('application/x-www-form-urlencoded', false);
	  }

	  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);

	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);

	    // Transform response data
	    response.data = transformData.call(
	      config,
	      config.transformResponse,
	      response
	    );

	    response.headers = AxiosHeaders.from(response.headers);

	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);

	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData.call(
	          config,
	          config.transformResponse,
	          reason.response
	        );
	        reason.response.headers = AxiosHeaders.from(reason.response.headers);
	      }
	    }

	    return Promise.reject(reason);
	  });
	}

	const VERSION = "1.7.2";

	const validators$1 = {};

	// eslint-disable-next-line func-names
	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});

	const deprecatedWarnings = {};

	/**
	 * Transitional option validator
	 *
	 * @param {function|boolean?} validator - set to false if the transitional option has been removed
	 * @param {string?} version - deprecated version / removed since version
	 * @param {string?} message - some message with additional info
	 *
	 * @returns {function}
	 */
	validators$1.transitional = function transitional(validator, version, message) {
	  function formatMessage(opt, desc) {
	    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  }

	  // eslint-disable-next-line func-names
	  return (value, opt, opts) => {
	    if (validator === false) {
	      throw new AxiosError(
	        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
	        AxiosError.ERR_DEPRECATED
	      );
	    }

	    if (version && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        formatMessage(
	          opt,
	          ' has been deprecated since v' + version + ' and will be removed in the near future'
	        )
	      );
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};

	/**
	 * Assert object's properties type
	 *
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 *
	 * @returns {object}
	 */

	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
	  }
	  const keys = Object.keys(options);
	  let i = keys.length;
	  while (i-- > 0) {
	    const opt = keys[i];
	    const validator = schema[opt];
	    if (validator) {
	      const value = options[opt];
	      const result = value === undefined || validator(value, opt, options);
	      if (result !== true) {
	        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
	      }
	      continue;
	    }
	    if (allowUnknown !== true) {
	      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
	    }
	  }
	}

	var validator = {
	  assertOptions,
	  validators: validators$1
	};

	const validators = validator.validators;

	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 *
	 * @return {Axios} A new instance of Axios
	 */
	class Axios {
	  constructor(instanceConfig) {
	    this.defaults = instanceConfig;
	    this.interceptors = {
	      request: new InterceptorManager(),
	      response: new InterceptorManager()
	    };
	  }

	  /**
	   * Dispatch a request
	   *
	   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
	   * @param {?Object} config
	   *
	   * @returns {Promise} The Promise to be fulfilled
	   */
	  async request(configOrUrl, config) {
	    try {
	      return await this._request(configOrUrl, config);
	    } catch (err) {
	      if (err instanceof Error) {
	        let dummy;

	        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

	        // slice off the Error: ... line
	        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
	        try {
	          if (!err.stack) {
	            err.stack = stack;
	            // match without the 2 top stack lines
	          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
	            err.stack += '\n' + stack;
	          }
	        } catch (e) {
	          // ignore the case where "stack" is an un-writable property
	        }
	      }

	      throw err;
	    }
	  }

	  _request(configOrUrl, config) {
	    /*eslint no-param-reassign:0*/
	    // Allow for axios('example/url'[, config]) a la fetch API
	    if (typeof configOrUrl === 'string') {
	      config = config || {};
	      config.url = configOrUrl;
	    } else {
	      config = configOrUrl || {};
	    }

	    config = mergeConfig(this.defaults, config);

	    const {transitional, paramsSerializer, headers} = config;

	    if (transitional !== undefined) {
	      validator.assertOptions(transitional, {
	        silentJSONParsing: validators.transitional(validators.boolean),
	        forcedJSONParsing: validators.transitional(validators.boolean),
	        clarifyTimeoutError: validators.transitional(validators.boolean)
	      }, false);
	    }

	    if (paramsSerializer != null) {
	      if (utils$1.isFunction(paramsSerializer)) {
	        config.paramsSerializer = {
	          serialize: paramsSerializer
	        };
	      } else {
	        validator.assertOptions(paramsSerializer, {
	          encode: validators.function,
	          serialize: validators.function
	        }, true);
	      }
	    }

	    // Set config.method
	    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

	    // Flatten headers
	    let contextHeaders = headers && utils$1.merge(
	      headers.common,
	      headers[config.method]
	    );

	    headers && utils$1.forEach(
	      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	      (method) => {
	        delete headers[method];
	      }
	    );

	    config.headers = AxiosHeaders.concat(contextHeaders, headers);

	    // filter out skipped interceptors
	    const requestInterceptorChain = [];
	    let synchronousRequestInterceptors = true;
	    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	        return;
	      }

	      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

	      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	    });

	    const responseInterceptorChain = [];
	    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	    });

	    let promise;
	    let i = 0;
	    let len;

	    if (!synchronousRequestInterceptors) {
	      const chain = [dispatchRequest.bind(this), undefined];
	      chain.unshift.apply(chain, requestInterceptorChain);
	      chain.push.apply(chain, responseInterceptorChain);
	      len = chain.length;

	      promise = Promise.resolve(config);

	      while (i < len) {
	        promise = promise.then(chain[i++], chain[i++]);
	      }

	      return promise;
	    }

	    len = requestInterceptorChain.length;

	    let newConfig = config;

	    i = 0;

	    while (i < len) {
	      const onFulfilled = requestInterceptorChain[i++];
	      const onRejected = requestInterceptorChain[i++];
	      try {
	        newConfig = onFulfilled(newConfig);
	      } catch (error) {
	        onRejected.call(this, error);
	        break;
	      }
	    }

	    try {
	      promise = dispatchRequest.call(this, newConfig);
	    } catch (error) {
	      return Promise.reject(error);
	    }

	    i = 0;
	    len = responseInterceptorChain.length;

	    while (i < len) {
	      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
	    }

	    return promise;
	  }

	  getUri(config) {
	    config = mergeConfig(this.defaults, config);
	    const fullPath = buildFullPath(config.baseURL, config.url);
	    return buildURL(fullPath, config.params, config.paramsSerializer);
	  }
	}

	// Provide aliases for supported request methods
	utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(mergeConfig(config || {}, {
	      method,
	      url,
	      data: (config || {}).data
	    }));
	  };
	});

	utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/

	  function generateHTTPMethod(isForm) {
	    return function httpMethod(url, data, config) {
	      return this.request(mergeConfig(config || {}, {
	        method,
	        headers: isForm ? {
	          'Content-Type': 'multipart/form-data'
	        } : {},
	        url,
	        data
	      }));
	    };
	  }

	  Axios.prototype[method] = generateHTTPMethod();

	  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
	});

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @param {Function} executor The executor function.
	 *
	 * @returns {CancelToken}
	 */
	class CancelToken {
	  constructor(executor) {
	    if (typeof executor !== 'function') {
	      throw new TypeError('executor must be a function.');
	    }

	    let resolvePromise;

	    this.promise = new Promise(function promiseExecutor(resolve) {
	      resolvePromise = resolve;
	    });

	    const token = this;

	    // eslint-disable-next-line func-names
	    this.promise.then(cancel => {
	      if (!token._listeners) return;

	      let i = token._listeners.length;

	      while (i-- > 0) {
	        token._listeners[i](cancel);
	      }
	      token._listeners = null;
	    });

	    // eslint-disable-next-line func-names
	    this.promise.then = onfulfilled => {
	      let _resolve;
	      // eslint-disable-next-line func-names
	      const promise = new Promise(resolve => {
	        token.subscribe(resolve);
	        _resolve = resolve;
	      }).then(onfulfilled);

	      promise.cancel = function reject() {
	        token.unsubscribe(_resolve);
	      };

	      return promise;
	    };

	    executor(function cancel(message, config, request) {
	      if (token.reason) {
	        // Cancellation has already been requested
	        return;
	      }

	      token.reason = new CanceledError(message, config, request);
	      resolvePromise(token.reason);
	    });
	  }

	  /**
	   * Throws a `CanceledError` if cancellation has been requested.
	   */
	  throwIfRequested() {
	    if (this.reason) {
	      throw this.reason;
	    }
	  }

	  /**
	   * Subscribe to the cancel signal
	   */

	  subscribe(listener) {
	    if (this.reason) {
	      listener(this.reason);
	      return;
	    }

	    if (this._listeners) {
	      this._listeners.push(listener);
	    } else {
	      this._listeners = [listener];
	    }
	  }

	  /**
	   * Unsubscribe from the cancel signal
	   */

	  unsubscribe(listener) {
	    if (!this._listeners) {
	      return;
	    }
	    const index = this._listeners.indexOf(listener);
	    if (index !== -1) {
	      this._listeners.splice(index, 1);
	    }
	  }

	  /**
	   * Returns an object that contains a new `CancelToken` and a function that, when called,
	   * cancels the `CancelToken`.
	   */
	  static source() {
	    let cancel;
	    const token = new CancelToken(function executor(c) {
	      cancel = c;
	    });
	    return {
	      token,
	      cancel
	    };
	  }
	}

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 *
	 * @returns {Function}
	 */
	function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	}

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 *
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */
	function isAxiosError(payload) {
	  return utils$1.isObject(payload) && (payload.isAxiosError === true);
	}

	const HttpStatusCode = {
	  Continue: 100,
	  SwitchingProtocols: 101,
	  Processing: 102,
	  EarlyHints: 103,
	  Ok: 200,
	  Created: 201,
	  Accepted: 202,
	  NonAuthoritativeInformation: 203,
	  NoContent: 204,
	  ResetContent: 205,
	  PartialContent: 206,
	  MultiStatus: 207,
	  AlreadyReported: 208,
	  ImUsed: 226,
	  MultipleChoices: 300,
	  MovedPermanently: 301,
	  Found: 302,
	  SeeOther: 303,
	  NotModified: 304,
	  UseProxy: 305,
	  Unused: 306,
	  TemporaryRedirect: 307,
	  PermanentRedirect: 308,
	  BadRequest: 400,
	  Unauthorized: 401,
	  PaymentRequired: 402,
	  Forbidden: 403,
	  NotFound: 404,
	  MethodNotAllowed: 405,
	  NotAcceptable: 406,
	  ProxyAuthenticationRequired: 407,
	  RequestTimeout: 408,
	  Conflict: 409,
	  Gone: 410,
	  LengthRequired: 411,
	  PreconditionFailed: 412,
	  PayloadTooLarge: 413,
	  UriTooLong: 414,
	  UnsupportedMediaType: 415,
	  RangeNotSatisfiable: 416,
	  ExpectationFailed: 417,
	  ImATeapot: 418,
	  MisdirectedRequest: 421,
	  UnprocessableEntity: 422,
	  Locked: 423,
	  FailedDependency: 424,
	  TooEarly: 425,
	  UpgradeRequired: 426,
	  PreconditionRequired: 428,
	  TooManyRequests: 429,
	  RequestHeaderFieldsTooLarge: 431,
	  UnavailableForLegalReasons: 451,
	  InternalServerError: 500,
	  NotImplemented: 501,
	  BadGateway: 502,
	  ServiceUnavailable: 503,
	  GatewayTimeout: 504,
	  HttpVersionNotSupported: 505,
	  VariantAlsoNegotiates: 506,
	  InsufficientStorage: 507,
	  LoopDetected: 508,
	  NotExtended: 510,
	  NetworkAuthenticationRequired: 511,
	};

	Object.entries(HttpStatusCode).forEach(([key, value]) => {
	  HttpStatusCode[value] = key;
	});

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 *
	 * @returns {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  const context = new Axios(defaultConfig);
	  const instance = bind(Axios.prototype.request, context);

	  // Copy axios.prototype to instance
	  utils$1.extend(instance, Axios.prototype, context, {allOwnKeys: true});

	  // Copy context to instance
	  utils$1.extend(instance, context, null, {allOwnKeys: true});

	  // Factory for creating new instances
	  instance.create = function create(instanceConfig) {
	    return createInstance(mergeConfig(defaultConfig, instanceConfig));
	  };

	  return instance;
	}

	// Create the default instance to be exported
	const axios = createInstance(defaults);

	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;

	// Expose Cancel & CancelToken
	axios.CanceledError = CanceledError;
	axios.CancelToken = CancelToken;
	axios.isCancel = isCancel;
	axios.VERSION = VERSION;
	axios.toFormData = toFormData;

	// Expose AxiosError class
	axios.AxiosError = AxiosError;

	// alias for CanceledError for backward compatibility
	axios.Cancel = axios.CanceledError;

	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};

	axios.spread = spread;

	// Expose isAxiosError
	axios.isAxiosError = isAxiosError;

	// Expose mergeConfig
	axios.mergeConfig = mergeConfig;

	axios.AxiosHeaders = AxiosHeaders;

	axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

	axios.getAdapter = adapters.getAdapter;

	axios.HttpStatusCode = HttpStatusCode;

	axios.default = axios;

	// FileUploader.js
	function FileUploader({
	  property,
	  record,
	  resource,
	  onChange
	}) {
	  const [filePath, setFilePath] = React.useState(null);
	  const [successMsg, setSuccessMsg] = React.useState(null);
	  const [errMsg, setErrMsg] = React.useState(null);
	  const handleChange = async e => {
	    const file = e.target.files[0];
	    const formData = new FormData();
	    formData.append('myfile', file);
	    try {
	      setErrMsg(null);
	      setSuccessMsg(null);
	      const response = await axios.post(`/upload?resourceId=${encodeURIComponent(resource.id)}&propertyName=${encodeURIComponent(property.name)}`, formData, {
	        headers: {
	          'Content-Type': 'multipart/form-data'
	        }
	      });
	      const {
	        data
	      } = response;
	      setFilePath(data.path);
	      setSuccessMsg('Fichier téléchargé avec succès');
	    } catch (error) {
	      console.error('Error uploading file:', error.response);
	      setErrMsg(`Erreur lors du téléchargement du fichier: ${error.response.statusText}`);
	    }
	  };
	  React.useEffect(() => {
	    if (filePath) {
	      onChange(property.name, filePath);
	    }
	  }, [filePath]);
	  return /*#__PURE__*/React__default.default.createElement(Box$1, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(InputAtom, {
	    if: property.name,
	    type: "file",
	    onChange: handleChange
	  }), successMsg && /*#__PURE__*/React__default.default.createElement(Paragraph, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, successMsg)), errMsg && /*#__PURE__*/React__default.default.createElement(Paragraph, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "danger"
	  }, errMsg)));
	}

	var build$1 = {exports: {}};

	var signature_pad = {exports: {}};

	/*!
	 * Signature Pad v2.3.2
	 * https://github.com/szimek/signature_pad
	 *
	 * Copyright 2017 Szymon Nowak
	 * Released under the MIT license
	 *
	 * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:
	 * http://corner.squareup.com/2012/07/smoother-signatures.html
	 *
	 * Implementation of interpolation using cubic Bézier curves is taken from:
	 * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript
	 *
	 * Algorithm for approximated length of a Bézier curve is taken from:
	 * http://www.lemoda.net/maths/bezier-length/index.html
	 *
	 */

	var hasRequiredSignature_pad;

	function requireSignature_pad () {
		if (hasRequiredSignature_pad) return signature_pad.exports;
		hasRequiredSignature_pad = 1;
		(function (module, exports) {
			(function (global, factory) {
				module.exports = factory() ;
			}(commonjsGlobal, (function () {
			function Point(x, y, time) {
			  this.x = x;
			  this.y = y;
			  this.time = time || new Date().getTime();
			}

			Point.prototype.velocityFrom = function (start) {
			  return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;
			};

			Point.prototype.distanceTo = function (start) {
			  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
			};

			Point.prototype.equals = function (other) {
			  return this.x === other.x && this.y === other.y && this.time === other.time;
			};

			function Bezier(startPoint, control1, control2, endPoint) {
			  this.startPoint = startPoint;
			  this.control1 = control1;
			  this.control2 = control2;
			  this.endPoint = endPoint;
			}

			// Returns approximated length.
			Bezier.prototype.length = function () {
			  var steps = 10;
			  var length = 0;
			  var px = void 0;
			  var py = void 0;

			  for (var i = 0; i <= steps; i += 1) {
			    var t = i / steps;
			    var cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
			    var cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
			    if (i > 0) {
			      var xdiff = cx - px;
			      var ydiff = cy - py;
			      length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
			    }
			    px = cx;
			    py = cy;
			  }

			  return length;
			};

			/* eslint-disable no-multi-spaces, space-in-parens */
			Bezier.prototype._point = function (t, start, c1, c2, end) {
			  return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;
			};

			/* eslint-disable */

			// http://stackoverflow.com/a/27078401/815507
			function throttle(func, wait, options) {
			  var context, args, result;
			  var timeout = null;
			  var previous = 0;
			  if (!options) options = {};
			  var later = function later() {
			    previous = options.leading === false ? 0 : Date.now();
			    timeout = null;
			    result = func.apply(context, args);
			    if (!timeout) context = args = null;
			  };
			  return function () {
			    var now = Date.now();
			    if (!previous && options.leading === false) previous = now;
			    var remaining = wait - (now - previous);
			    context = this;
			    args = arguments;
			    if (remaining <= 0 || remaining > wait) {
			      if (timeout) {
			        clearTimeout(timeout);
			        timeout = null;
			      }
			      previous = now;
			      result = func.apply(context, args);
			      if (!timeout) context = args = null;
			    } else if (!timeout && options.trailing !== false) {
			      timeout = setTimeout(later, remaining);
			    }
			    return result;
			  };
			}

			function SignaturePad(canvas, options) {
			  var self = this;
			  var opts = options || {};

			  this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;
			  this.minWidth = opts.minWidth || 0.5;
			  this.maxWidth = opts.maxWidth || 2.5;
			  this.throttle = 'throttle' in opts ? opts.throttle : 16; // in miliseconds
			  this.minDistance = 'minDistance' in opts ? opts.minDistance : 5;

			  if (this.throttle) {
			    this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);
			  } else {
			    this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;
			  }

			  this.dotSize = opts.dotSize || function () {
			    return (this.minWidth + this.maxWidth) / 2;
			  };
			  this.penColor = opts.penColor || 'black';
			  this.backgroundColor = opts.backgroundColor || 'rgba(0,0,0,0)';
			  this.onBegin = opts.onBegin;
			  this.onEnd = opts.onEnd;

			  this._canvas = canvas;
			  this._ctx = canvas.getContext('2d');
			  this.clear();

			  // We need add these inline so they are available to unbind while still having
			  // access to 'self' we could use _.bind but it's not worth adding a dependency.
			  this._handleMouseDown = function (event) {
			    if (event.which === 1) {
			      self._mouseButtonDown = true;
			      self._strokeBegin(event);
			    }
			  };

			  this._handleMouseMove = function (event) {
			    if (self._mouseButtonDown) {
			      self._strokeMoveUpdate(event);
			    }
			  };

			  this._handleMouseUp = function (event) {
			    if (event.which === 1 && self._mouseButtonDown) {
			      self._mouseButtonDown = false;
			      self._strokeEnd(event);
			    }
			  };

			  this._handleTouchStart = function (event) {
			    if (event.targetTouches.length === 1) {
			      var touch = event.changedTouches[0];
			      self._strokeBegin(touch);
			    }
			  };

			  this._handleTouchMove = function (event) {
			    // Prevent scrolling.
			    event.preventDefault();

			    var touch = event.targetTouches[0];
			    self._strokeMoveUpdate(touch);
			  };

			  this._handleTouchEnd = function (event) {
			    var wasCanvasTouched = event.target === self._canvas;
			    if (wasCanvasTouched) {
			      event.preventDefault();
			      self._strokeEnd(event);
			    }
			  };

			  // Enable mouse and touch event handlers
			  this.on();
			}

			// Public methods
			SignaturePad.prototype.clear = function () {
			  var ctx = this._ctx;
			  var canvas = this._canvas;

			  ctx.fillStyle = this.backgroundColor;
			  ctx.clearRect(0, 0, canvas.width, canvas.height);
			  ctx.fillRect(0, 0, canvas.width, canvas.height);

			  this._data = [];
			  this._reset();
			  this._isEmpty = true;
			};

			SignaturePad.prototype.fromDataURL = function (dataUrl) {
			  var _this = this;

			  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

			  var image = new Image();
			  var ratio = options.ratio || window.devicePixelRatio || 1;
			  var width = options.width || this._canvas.width / ratio;
			  var height = options.height || this._canvas.height / ratio;

			  this._reset();
			  image.src = dataUrl;
			  image.onload = function () {
			    _this._ctx.drawImage(image, 0, 0, width, height);
			  };
			  this._isEmpty = false;
			};

			SignaturePad.prototype.toDataURL = function (type) {
			  var _canvas;

			  switch (type) {
			    case 'image/svg+xml':
			      return this._toSVG();
			    default:
			      for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			        options[_key - 1] = arguments[_key];
			      }

			      return (_canvas = this._canvas).toDataURL.apply(_canvas, [type].concat(options));
			  }
			};

			SignaturePad.prototype.on = function () {
			  this._handleMouseEvents();
			  this._handleTouchEvents();
			};

			SignaturePad.prototype.off = function () {
			  this._canvas.removeEventListener('mousedown', this._handleMouseDown);
			  this._canvas.removeEventListener('mousemove', this._handleMouseMove);
			  document.removeEventListener('mouseup', this._handleMouseUp);

			  this._canvas.removeEventListener('touchstart', this._handleTouchStart);
			  this._canvas.removeEventListener('touchmove', this._handleTouchMove);
			  this._canvas.removeEventListener('touchend', this._handleTouchEnd);
			};

			SignaturePad.prototype.isEmpty = function () {
			  return this._isEmpty;
			};

			// Private methods
			SignaturePad.prototype._strokeBegin = function (event) {
			  this._data.push([]);
			  this._reset();
			  this._strokeUpdate(event);

			  if (typeof this.onBegin === 'function') {
			    this.onBegin(event);
			  }
			};

			SignaturePad.prototype._strokeUpdate = function (event) {
			  var x = event.clientX;
			  var y = event.clientY;

			  var point = this._createPoint(x, y);
			  var lastPointGroup = this._data[this._data.length - 1];
			  var lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];
			  var isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;

			  // Skip this point if it's too close to the previous one
			  if (!(lastPoint && isLastPointTooClose)) {
			    var _addPoint = this._addPoint(point),
			        curve = _addPoint.curve,
			        widths = _addPoint.widths;

			    if (curve && widths) {
			      this._drawCurve(curve, widths.start, widths.end);
			    }

			    this._data[this._data.length - 1].push({
			      x: point.x,
			      y: point.y,
			      time: point.time,
			      color: this.penColor
			    });
			  }
			};

			SignaturePad.prototype._strokeEnd = function (event) {
			  var canDrawCurve = this.points.length > 2;
			  var point = this.points[0]; // Point instance

			  if (!canDrawCurve && point) {
			    this._drawDot(point);
			  }

			  if (point) {
			    var lastPointGroup = this._data[this._data.length - 1];
			    var lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object

			    // When drawing a dot, there's only one point in a group, so without this check
			    // such group would end up with exactly the same 2 points.
			    if (!point.equals(lastPoint)) {
			      lastPointGroup.push({
			        x: point.x,
			        y: point.y,
			        time: point.time,
			        color: this.penColor
			      });
			    }
			  }

			  if (typeof this.onEnd === 'function') {
			    this.onEnd(event);
			  }
			};

			SignaturePad.prototype._handleMouseEvents = function () {
			  this._mouseButtonDown = false;

			  this._canvas.addEventListener('mousedown', this._handleMouseDown);
			  this._canvas.addEventListener('mousemove', this._handleMouseMove);
			  document.addEventListener('mouseup', this._handleMouseUp);
			};

			SignaturePad.prototype._handleTouchEvents = function () {
			  // Pass touch events to canvas element on mobile IE11 and Edge.
			  this._canvas.style.msTouchAction = 'none';
			  this._canvas.style.touchAction = 'none';

			  this._canvas.addEventListener('touchstart', this._handleTouchStart);
			  this._canvas.addEventListener('touchmove', this._handleTouchMove);
			  this._canvas.addEventListener('touchend', this._handleTouchEnd);
			};

			SignaturePad.prototype._reset = function () {
			  this.points = [];
			  this._lastVelocity = 0;
			  this._lastWidth = (this.minWidth + this.maxWidth) / 2;
			  this._ctx.fillStyle = this.penColor;
			};

			SignaturePad.prototype._createPoint = function (x, y, time) {
			  var rect = this._canvas.getBoundingClientRect();

			  return new Point(x - rect.left, y - rect.top, time || new Date().getTime());
			};

			SignaturePad.prototype._addPoint = function (point) {
			  var points = this.points;
			  var tmp = void 0;

			  points.push(point);

			  if (points.length > 2) {
			    // To reduce the initial lag make it work with 3 points
			    // by copying the first point to the beginning.
			    if (points.length === 3) points.unshift(points[0]);

			    tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);
			    var c2 = tmp.c2;
			    tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);
			    var c3 = tmp.c1;
			    var curve = new Bezier(points[1], c2, c3, points[2]);
			    var widths = this._calculateCurveWidths(curve);

			    // Remove the first element from the list,
			    // so that we always have no more than 4 points in points array.
			    points.shift();

			    return { curve: curve, widths: widths };
			  }

			  return {};
			};

			SignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {
			  var dx1 = s1.x - s2.x;
			  var dy1 = s1.y - s2.y;
			  var dx2 = s2.x - s3.x;
			  var dy2 = s2.y - s3.y;

			  var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };
			  var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };

			  var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			  var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);

			  var dxm = m1.x - m2.x;
			  var dym = m1.y - m2.y;

			  var k = l2 / (l1 + l2);
			  var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };

			  var tx = s2.x - cm.x;
			  var ty = s2.y - cm.y;

			  return {
			    c1: new Point(m1.x + tx, m1.y + ty),
			    c2: new Point(m2.x + tx, m2.y + ty)
			  };
			};

			SignaturePad.prototype._calculateCurveWidths = function (curve) {
			  var startPoint = curve.startPoint;
			  var endPoint = curve.endPoint;
			  var widths = { start: null, end: null };

			  var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;

			  var newWidth = this._strokeWidth(velocity);

			  widths.start = this._lastWidth;
			  widths.end = newWidth;

			  this._lastVelocity = velocity;
			  this._lastWidth = newWidth;

			  return widths;
			};

			SignaturePad.prototype._strokeWidth = function (velocity) {
			  return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
			};

			SignaturePad.prototype._drawPoint = function (x, y, size) {
			  var ctx = this._ctx;

			  ctx.moveTo(x, y);
			  ctx.arc(x, y, size, 0, 2 * Math.PI, false);
			  this._isEmpty = false;
			};

			SignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {
			  var ctx = this._ctx;
			  var widthDelta = endWidth - startWidth;
			  var drawSteps = Math.floor(curve.length());

			  ctx.beginPath();

			  for (var i = 0; i < drawSteps; i += 1) {
			    // Calculate the Bezier (x, y) coordinate for this step.
			    var t = i / drawSteps;
			    var tt = t * t;
			    var ttt = tt * t;
			    var u = 1 - t;
			    var uu = u * u;
			    var uuu = uu * u;

			    var x = uuu * curve.startPoint.x;
			    x += 3 * uu * t * curve.control1.x;
			    x += 3 * u * tt * curve.control2.x;
			    x += ttt * curve.endPoint.x;

			    var y = uuu * curve.startPoint.y;
			    y += 3 * uu * t * curve.control1.y;
			    y += 3 * u * tt * curve.control2.y;
			    y += ttt * curve.endPoint.y;

			    var width = startWidth + ttt * widthDelta;
			    this._drawPoint(x, y, width);
			  }

			  ctx.closePath();
			  ctx.fill();
			};

			SignaturePad.prototype._drawDot = function (point) {
			  var ctx = this._ctx;
			  var width = typeof this.dotSize === 'function' ? this.dotSize() : this.dotSize;

			  ctx.beginPath();
			  this._drawPoint(point.x, point.y, width);
			  ctx.closePath();
			  ctx.fill();
			};

			SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {
			  for (var i = 0; i < pointGroups.length; i += 1) {
			    var group = pointGroups[i];

			    if (group.length > 1) {
			      for (var j = 0; j < group.length; j += 1) {
			        var rawPoint = group[j];
			        var point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);
			        var color = rawPoint.color;

			        if (j === 0) {
			          // First point in a group. Nothing to draw yet.

			          // All points in the group have the same color, so it's enough to set
			          // penColor just at the beginning.
			          this.penColor = color;
			          this._reset();

			          this._addPoint(point);
			        } else if (j !== group.length - 1) {
			          // Middle point in a group.
			          var _addPoint2 = this._addPoint(point),
			              curve = _addPoint2.curve,
			              widths = _addPoint2.widths;

			          if (curve && widths) {
			            drawCurve(curve, widths, color);
			          }
			        } else ;
			      }
			    } else {
			      this._reset();
			      var _rawPoint = group[0];
			      drawDot(_rawPoint);
			    }
			  }
			};

			SignaturePad.prototype._toSVG = function () {
			  var _this2 = this;

			  var pointGroups = this._data;
			  var canvas = this._canvas;
			  var ratio = Math.max(window.devicePixelRatio || 1, 1);
			  var minX = 0;
			  var minY = 0;
			  var maxX = canvas.width / ratio;
			  var maxY = canvas.height / ratio;
			  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');

			  svg.setAttributeNS(null, 'width', canvas.width);
			  svg.setAttributeNS(null, 'height', canvas.height);

			  this._fromData(pointGroups, function (curve, widths, color) {
			    var path = document.createElement('path');

			    // Need to check curve for NaN values, these pop up when drawing
			    // lines on the canvas that are not continuous. E.g. Sharp corners
			    // or stopping mid-stroke and than continuing without lifting mouse.
			    if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {
			      var attr = 'M ' + curve.startPoint.x.toFixed(3) + ',' + curve.startPoint.y.toFixed(3) + ' ' + ('C ' + curve.control1.x.toFixed(3) + ',' + curve.control1.y.toFixed(3) + ' ') + (curve.control2.x.toFixed(3) + ',' + curve.control2.y.toFixed(3) + ' ') + (curve.endPoint.x.toFixed(3) + ',' + curve.endPoint.y.toFixed(3));

			      path.setAttribute('d', attr);
			      path.setAttribute('stroke-width', (widths.end * 2.25).toFixed(3));
			      path.setAttribute('stroke', color);
			      path.setAttribute('fill', 'none');
			      path.setAttribute('stroke-linecap', 'round');

			      svg.appendChild(path);
			    }
			  }, function (rawPoint) {
			    var circle = document.createElement('circle');
			    var dotSize = typeof _this2.dotSize === 'function' ? _this2.dotSize() : _this2.dotSize;
			    circle.setAttribute('r', dotSize);
			    circle.setAttribute('cx', rawPoint.x);
			    circle.setAttribute('cy', rawPoint.y);
			    circle.setAttribute('fill', rawPoint.color);

			    svg.appendChild(circle);
			  });

			  var prefix = 'data:image/svg+xml;base64,';
			  var header = '<svg' + ' xmlns="http://www.w3.org/2000/svg"' + ' xmlns:xlink="http://www.w3.org/1999/xlink"' + (' viewBox="' + minX + ' ' + minY + ' ' + maxX + ' ' + maxY + '"') + (' width="' + maxX + '"') + (' height="' + maxY + '"') + '>';
			  var body = svg.innerHTML;

			  // IE hack for missing innerHTML property on SVGElement
			  if (body === undefined) {
			    var dummy = document.createElement('dummy');
			    var nodes = svg.childNodes;
			    dummy.innerHTML = '';

			    for (var i = 0; i < nodes.length; i += 1) {
			      dummy.appendChild(nodes[i].cloneNode(true));
			    }

			    body = dummy.innerHTML;
			  }

			  var footer = '</svg>';
			  var data = header + body + footer;

			  return prefix + btoa(data);
			};

			SignaturePad.prototype.fromData = function (pointGroups) {
			  var _this3 = this;

			  this.clear();

			  this._fromData(pointGroups, function (curve, widths) {
			    return _this3._drawCurve(curve, widths.start, widths.end);
			  }, function (rawPoint) {
			    return _this3._drawDot(rawPoint);
			  });

			  this._data = pointGroups;
			};

			SignaturePad.prototype.toData = function () {
			  return this._data;
			};

			return SignaturePad;

			}))); 
		} (signature_pad));
		return signature_pad.exports;
	}

	var build = {exports: {}};

	var hasRequiredBuild;

	function requireBuild () {
		if (hasRequiredBuild) return build.exports;
		hasRequiredBuild = 1;
		(function (module, exports) {
			!function(e,t){module.exports=t();}(commonjsGlobal,function(){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p="",t(0)}([function(e,t){function r(e){var t=e.getContext("2d"),r=e.width,n=e.height,o=t.getImageData(0,0,r,n).data,f=a(!0,r,n,o),i=a(!1,r,n,o),c=u(!0,r,n,o),d=u(!1,r,n,o),p=d-c+1,l=i-f+1,s=t.getImageData(c,f,p,l);return e.width=p,e.height=l,t.clearRect(0,0,p,l),t.putImageData(s,0,0),e}function n(e,t,r,n){return {red:n[4*(r*t+e)],green:n[4*(r*t+e)+1],blue:n[4*(r*t+e)+2],alpha:n[4*(r*t+e)+3]}}function o(e,t,r,o){return n(e,t,r,o).alpha}function a(e,t,r,n){for(var a=e?1:-1,u=e?0:r-1,f=u;e?f<r:f>-1;f+=a)for(var i=0;i<t;i++)if(o(i,f,t,n))return f;return null}function u(e,t,r,n){for(var a=e?1:-1,u=e?0:t-1,f=u;e?f<t:f>-1;f+=a)for(var i=0;i<r;i++)if(o(f,i,t,n))return f;return null}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;}])}); 
		} (build));
		return build.exports;
	}

	(function (module, exports) {
		!function(e,t){module.exports=t(require$$0__default.default,React__default.default,requireSignature_pad(),requireBuild());}(commonjsGlobal,function(e,t,n,r){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t);}Object.defineProperty(t,"__esModule",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(1),p=r(f),l=n(2),d=r(l),v=n(3),h=r(v),_=n(4),g=r(_),m=function(e){function t(){var e,n,r,u;o(this,t);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),r._sigPad=null,r._excludeOurProps=function(){var e=r.props,t=(e.canvasProps,e.clearOnResize,a(e,["canvasProps","clearOnResize"]));return t},r.getCanvas=function(){return r._canvas},r.getTrimmedCanvas=function(){var e=document.createElement("canvas");return e.width=r._canvas.width,e.height=r._canvas.height,e.getContext("2d").drawImage(r._canvas,0,0),(0, g.default)(e)},r.getSignaturePad=function(){return r._sigPad},r._checkClearOnResize=function(){r.props.clearOnResize&&r._resizeCanvas();},r._resizeCanvas=function(){var e=r.props.canvasProps||{},t=e.width,n=e.height;if(!t||!n){var a=r._canvas,o=Math.max(window.devicePixelRatio||1,1);t||(a.width=a.offsetWidth*o),n||(a.height=a.offsetHeight*o),a.getContext("2d").scale(o,o),r.clear();}},r.on=function(){return window.addEventListener("resize",r._checkClearOnResize),r._sigPad.on()},r.off=function(){return window.removeEventListener("resize",r._checkClearOnResize),r._sigPad.off()},r.clear=function(){return r._sigPad.clear()},r.isEmpty=function(){return r._sigPad.isEmpty()},r.fromDataURL=function(e,t){return r._sigPad.fromDataURL(e,t)},r.toDataURL=function(e,t){return r._sigPad.toDataURL(e,t)},r.fromData=function(e){return r._sigPad.fromData(e)},r.toData=function(){return r._sigPad.toData()},u=n,i(r,u)}return u(t,e),c(t,[{key:"componentDidMount",value:function(){this._sigPad=new h.default(this._canvas,this._excludeOurProps()),this._resizeCanvas(),this.on();}},{key:"componentWillUnmount",value:function(){this.off();}},{key:"componentDidUpdate",value:function(){Object.assign(this._sigPad,this._excludeOurProps());}},{key:"render",value:function(){var e=this,t=this.props.canvasProps;return d.default.createElement("canvas",s({ref:function(t){e._canvas=t;}},t))}}]),t}(l.Component);m.propTypes={velocityFilterWeight:p.default.number,minWidth:p.default.number,maxWidth:p.default.number,minDistance:p.default.number,dotSize:p.default.oneOfType([p.default.number,p.default.func]),penColor:p.default.string,throttle:p.default.number,onEnd:p.default.func,onBegin:p.default.func,canvasProps:p.default.object,clearOnResize:p.default.bool},m.defaultProps={clearOnResize:!0},t.default=m;},function(t,n){t.exports=e;},function(e,n){e.exports=t;},function(e,t){e.exports=n;},function(e,t){e.exports=r;}])}); 
	} (build$1));

	var buildExports = build$1.exports;
	var SignatureCanvas = /*@__PURE__*/getDefaultExportFromCjs(buildExports);

	const SignatureComp = ({
	  property,
	  record,
	  onChange,
	  resource
	}) => {
	  const [filePath, setFilePath] = React.useState(null);
	  const [successMsg, setSuccessMsg] = React.useState(null);
	  const [errMsg, setErrMsg] = React.useState(null);
	  const sigCanvas = React.useRef(null);
	  const clear = () => {
	    sigCanvas.current?.clear();
	  };
	  const dataURLToBlob = dataURL => {
	    const [header, base64] = dataURL.split(',');
	    const mime = header.match(/:(.*?);/)[1];
	    const bstr = atob(base64);
	    let n = bstr.length;
	    const u8arr = new Uint8Array(n);
	    while (n--) {
	      u8arr[n] = bstr.charCodeAt(n);
	    }
	    return new Blob([u8arr], {
	      type: mime
	    });
	  };
	  const sendToServer = async dataURL => {
	    const formData = new FormData();
	    const blob = dataURLToBlob(dataURL);
	    formData.append('myfile', blob, 'signature.png');
	    try {
	      setErrMsg(null);
	      setSuccessMsg(null);
	      const response = await axios.post(`/upload?resourceId=${encodeURIComponent(resource.id)}&propertyName=${encodeURIComponent(property.name)}`, formData, {
	        headers: {
	          'Content-Type': 'multipart/form-data'
	        }
	      });
	      const {
	        data
	      } = response;
	      setFilePath(data.path);
	      setSuccessMsg('La signature a été ajoutée avec succès');
	      clear();
	    } catch (error) {
	      console.error('Error uploading file:', error);
	      setErrMsg(`Erreur lors du téléchargement de la signature`);
	    }
	  };
	  const save = () => {
	    if (sigCanvas.current) {
	      const imageDataURL = sigCanvas.current.toDataURL('image/png');
	      sendToServer(imageDataURL);
	    }
	  };
	  React.useEffect(() => {
	    if (filePath) {
	      onChange(property.name, filePath);
	    }
	  }, [filePath]);
	  console.log(record.params);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box$1, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(Button, {
	    hoverColor: "danger",
	    type: "button",
	    onClick: clear,
	    id: `clearButton-${property.name}`
	  }, "Effacer")), /*#__PURE__*/React__default.default.createElement(CanvasContainer, null, /*#__PURE__*/React__default.default.createElement(SignatureCanvas, {
	    ref: sigCanvas,
	    penColor: "black",
	    canvasProps: {
	      id: property.name,
	      width: 'auto',
	      height: '100%'
	      // className: 'sigCanvas w-full h-full rounded',
	    },
	    backgroundColor: "rgba(240, 240, 240,1)"
	  })), /*#__PURE__*/React__default.default.createElement(Box$1, null, /*#__PURE__*/React__default.default.createElement(Button, {
	    hoverColor: "primary",
	    type: "button",
	    onClick: save,
	    id: `clearButton-${property.name}`
	  }, "Confirmer")), /*#__PURE__*/React__default.default.createElement(Box$1, {
	    my: 1
	  }, successMsg && /*#__PURE__*/React__default.default.createElement(Paragraph, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, successMsg)), errMsg && /*#__PURE__*/React__default.default.createElement(Paragraph, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "danger"
	  }, errMsg))));
	};

	const ShowSignature = ({
	  record,
	  property
	}) => {
	  return /*#__PURE__*/React__default.default.createElement(Box$1, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, property.props.label), /*#__PURE__*/React__default.default.createElement(Image$1, {
	    src: `/${record.params[property.name]}`
	  }));
	};

	const DateComp = () => {
	  const [startDate, setStartDate] = React.useState(new Date());
	  const handleDateChange = e => {
	    setStartDate(e);
	  };
	  return /*#__PURE__*/React__default.default.createElement(Box$1, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, null, "Date"), /*#__PURE__*/React__default.default.createElement(designSystem.DatePicker, {
	    value: startDate,
	    propertyType: "date",
	    onChange: handleDateChange,
	    dateFormat: "yyyy/MM/dd"
	  }));
	};

	const EmptyBreak = () => {
	  return /*#__PURE__*/React__default.default.createElement("div", null);
	};

	const ImportComponent = ({
	  resource
	}) => {
	  const [file, setFile] = React.useState(null);
	  const sendNotice = adminjs.useNotice();
	  const [isFetching, setFetching] = React.useState();
	  const onUpload = uploadedFile => {
	    setFile(uploadedFile?.[0] ?? null);
	  };
	  const onSubmit = async () => {
	    if (!file) {
	      return;
	    }
	    setFetching(true);
	    try {
	      const importData = new FormData();
	      importData.append('file', file, file?.name);
	      await new adminjs.ApiClient().resourceAction({
	        method: 'post',
	        resourceId: resource.id,
	        actionName: 'import',
	        data: importData
	      });
	      sendNotice({
	        message: 'Imported successfully',
	        type: 'success'
	      });
	    } catch (e) {
	      sendNotice({
	        message: e.message,
	        type: 'error'
	      });
	    }
	    setFetching(false);
	  };
	  if (isFetching) {
	    return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
	  }
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    margin: "auto",
	    maxWidth: 600,
	    display: "flex",
	    justifyContent: "center",
	    flexDirection: "column"
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
	    files: [],
	    onChange: onUpload,
	    multiple: false
	  }), file && /*#__PURE__*/React__default.default.createElement(designSystem.DropZoneItem, {
	    file: file,
	    filename: file.name,
	    onRemove: () => setFile(null)
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center",
	    m: 10
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
	    onClick: onSubmit,
	    disabled: !file || isFetching
	  }, "Upload")));
	};

	var FileSaver_min = {exports: {}};

	(function (module, exports) {
		(function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});

		
	} (FileSaver_min));

	var FileSaver_minExports = FileSaver_min.exports;

	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, _typeof(o);
	}

	function requiredArgs(required, args) {
	  if (args.length < required) {
	    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
	  }
	}

	/**
	 * @name isDate
	 * @category Common Helpers
	 * @summary Is the given value a date?
	 *
	 * @description
	 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
	 *
	 * @param {*} value - the value to check
	 * @returns {boolean} true if the given value is a date
	 * @throws {TypeError} 1 arguments required
	 *
	 * @example
	 * // For a valid date:
	 * const result = isDate(new Date())
	 * //=> true
	 *
	 * @example
	 * // For an invalid date:
	 * const result = isDate(new Date(NaN))
	 * //=> true
	 *
	 * @example
	 * // For some value:
	 * const result = isDate('2014-02-31')
	 * //=> false
	 *
	 * @example
	 * // For an object:
	 * const result = isDate({})
	 * //=> false
	 */
	function isDate(value) {
	  requiredArgs(1, arguments);
	  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
	}

	/**
	 * @name toDate
	 * @category Common Helpers
	 * @summary Convert the given argument to an instance of Date.
	 *
	 * @description
	 * Convert the given argument to an instance of Date.
	 *
	 * If the argument is an instance of Date, the function returns its clone.
	 *
	 * If the argument is a number, it is treated as a timestamp.
	 *
	 * If the argument is none of the above, the function returns Invalid Date.
	 *
	 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
	 *
	 * @param {Date|Number} argument - the value to convert
	 * @returns {Date} the parsed date in the local time zone
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Clone the date:
	 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
	 * //=> Tue Feb 11 2014 11:30:30
	 *
	 * @example
	 * // Convert the timestamp to date:
	 * const result = toDate(1392098430000)
	 * //=> Tue Feb 11 2014 11:30:30
	 */
	function toDate(argument) {
	  requiredArgs(1, arguments);
	  var argStr = Object.prototype.toString.call(argument);

	  // Clone the date
	  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
	    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
	    return new Date(argument.getTime());
	  } else if (typeof argument === 'number' || argStr === '[object Number]') {
	    return new Date(argument);
	  } else {
	    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
	      // eslint-disable-next-line no-console
	      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
	      // eslint-disable-next-line no-console
	      console.warn(new Error().stack);
	    }
	    return new Date(NaN);
	  }
	}

	/**
	 * @name isValid
	 * @category Common Helpers
	 * @summary Is the given date valid?
	 *
	 * @description
	 * Returns false if argument is Invalid Date and true otherwise.
	 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
	 * Invalid Date is a Date, whose time value is NaN.
	 *
	 * Time value of Date: http://es5.github.io/#x15.9.1.1
	 *
	 * @param {*} date - the date to check
	 * @returns {Boolean} the date is valid
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // For the valid date:
	 * const result = isValid(new Date(2014, 1, 31))
	 * //=> true
	 *
	 * @example
	 * // For the value, convertable into a date:
	 * const result = isValid(1393804800000)
	 * //=> true
	 *
	 * @example
	 * // For the invalid date:
	 * const result = isValid(new Date(''))
	 * //=> false
	 */
	function isValid(dirtyDate) {
	  requiredArgs(1, arguments);
	  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
	    return false;
	  }
	  var date = toDate(dirtyDate);
	  return !isNaN(Number(date));
	}

	function toInteger(dirtyNumber) {
	  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
	    return NaN;
	  }
	  var number = Number(dirtyNumber);
	  if (isNaN(number)) {
	    return number;
	  }
	  return number < 0 ? Math.ceil(number) : Math.floor(number);
	}

	/**
	 * @name addMilliseconds
	 * @category Millisecond Helpers
	 * @summary Add the specified number of milliseconds to the given date.
	 *
	 * @description
	 * Add the specified number of milliseconds to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
	 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:30.750
	 */
	function addMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var timestamp = toDate(dirtyDate).getTime();
	  var amount = toInteger(dirtyAmount);
	  return new Date(timestamp + amount);
	}

	/**
	 * @name subMilliseconds
	 * @category Millisecond Helpers
	 * @summary Subtract the specified number of milliseconds from the given date.
	 *
	 * @description
	 * Subtract the specified number of milliseconds from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
	 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:29.250
	 */
	function subMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMilliseconds(dirtyDate, -amount);
	}

	var MILLISECONDS_IN_DAY = 86400000;
	function getUTCDayOfYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var timestamp = date.getTime();
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	  var startOfYearTimestamp = date.getTime();
	  var difference = timestamp - startOfYearTimestamp;
	  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
	}

	function startOfUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var weekStartsOn = 1;
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var fourthOfJanuaryOfNextYear = new Date(0);
	  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
	  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
	  var fourthOfJanuaryOfThisYear = new Date(0);
	  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
	  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var year = getUTCISOWeekYear(dirtyDate);
	  var fourthOfJanuary = new Date(0);
	  fourthOfJanuary.setUTCFullYear(year, 0, 4);
	  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCISOWeek(fourthOfJanuary);
	  return date;
	}

	var MILLISECONDS_IN_WEEK$1 = 604800000;
	function getUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
	}

	var defaultOptions = {};
	function getDefaultOptions() {
	  return defaultOptions;
	}

	function startOfUTCWeek(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var firstWeekOfNextYear = new Date(0);
	  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
	  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
	  var firstWeekOfThisYear = new Date(0);
	  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
	  var year = getUTCWeekYear(dirtyDate, options);
	  var firstWeek = new Date(0);
	  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeek.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCWeek(firstWeek, options);
	  return date;
	}

	var MILLISECONDS_IN_WEEK = 604800000;
	function getUTCWeek(dirtyDate, options) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
	}

	function addLeadingZeros(number, targetLength) {
	  var sign = number < 0 ? '-' : '';
	  var output = Math.abs(number).toString();
	  while (output.length < targetLength) {
	    output = '0' + output;
	  }
	  return sign + output;
	}

	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* |                                |
	 * |  d  | Day of month                   |  D  |                                |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  y  | Year (abs)                     |  Y  |                                |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 */
	var formatters$1 = {
	  // Year
	  y: function y(date, token) {
	    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
	    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
	    // |----------|-------|----|-------|-------|-------|
	    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
	    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
	    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
	    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
	    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

	    var signedYear = date.getUTCFullYear();
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var year = signedYear > 0 ? signedYear : 1 - signedYear;
	    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
	  },
	  // Month
	  M: function M(date, token) {
	    var month = date.getUTCMonth();
	    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
	  },
	  // Day of the month
	  d: function d(date, token) {
	    return addLeadingZeros(date.getUTCDate(), token.length);
	  },
	  // AM or PM
	  a: function a(date, token) {
	    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return dayPeriodEnumValue.toUpperCase();
	      case 'aaa':
	        return dayPeriodEnumValue;
	      case 'aaaaa':
	        return dayPeriodEnumValue[0];
	      case 'aaaa':
	      default:
	        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token) {
	    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
	  },
	  // Hour [0-23]
	  H: function H(date, token) {
	    return addLeadingZeros(date.getUTCHours(), token.length);
	  },
	  // Minute
	  m: function m(date, token) {
	    return addLeadingZeros(date.getUTCMinutes(), token.length);
	  },
	  // Second
	  s: function s(date, token) {
	    return addLeadingZeros(date.getUTCSeconds(), token.length);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    var numberOfDigits = token.length;
	    var milliseconds = date.getUTCMilliseconds();
	    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
	    return addLeadingZeros(fractionalSeconds, token.length);
	  }
	};

	var dayPeriodEnum = {
	  am: 'am',
	  pm: 'pm',
	  midnight: 'midnight',
	  noon: 'noon',
	  morning: 'morning',
	  afternoon: 'afternoon',
	  evening: 'evening',
	  night: 'night'
	};
	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
	 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
	 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
	 * |  d  | Day of month                   |  D  | Day of year                    |
	 * |  e  | Local day of week              |  E  | Day of week                    |
	 * |  f  |                                |  F* | Day of week in month           |
	 * |  g* | Modified Julian day            |  G  | Era                            |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  i! | ISO day of week                |  I! | ISO week of year               |
	 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
	 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
	 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  n  |                                |  N  |                                |
	 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
	 * |  p! | Long localized time            |  P! | Long localized date            |
	 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
	 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
	 * |  u  | Extended year                  |  U* | Cyclic year                    |
	 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
	 * |  w  | Local week of year             |  W* | Week of month                  |
	 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
	 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
	 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 *
	 * Letters marked by ! are non-standard, but implemented by date-fns:
	 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
	 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
	 *   i.e. 7 for Sunday, 1 for Monday, etc.
	 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
	 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
	 *   `R` is supposed to be used in conjunction with `I` and `i`
	 *   for universal ISO week-numbering date, whereas
	 *   `Y` is supposed to be used in conjunction with `w` and `e`
	 *   for week-numbering date specific to the locale.
	 * - `P` is long localized date format
	 * - `p` is long localized time format
	 */

	var formatters = {
	  // Era
	  G: function G(date, token, localize) {
	    var era = date.getUTCFullYear() > 0 ? 1 : 0;
	    switch (token) {
	      // AD, BC
	      case 'G':
	      case 'GG':
	      case 'GGG':
	        return localize.era(era, {
	          width: 'abbreviated'
	        });
	      // A, B
	      case 'GGGGG':
	        return localize.era(era, {
	          width: 'narrow'
	        });
	      // Anno Domini, Before Christ
	      case 'GGGG':
	      default:
	        return localize.era(era, {
	          width: 'wide'
	        });
	    }
	  },
	  // Year
	  y: function y(date, token, localize) {
	    // Ordinal number
	    if (token === 'yo') {
	      var signedYear = date.getUTCFullYear();
	      // Returns 1 for 1 BC (which is year 0 in JavaScript)
	      var year = signedYear > 0 ? signedYear : 1 - signedYear;
	      return localize.ordinalNumber(year, {
	        unit: 'year'
	      });
	    }
	    return formatters$1.y(date, token);
	  },
	  // Local week-numbering year
	  Y: function Y(date, token, localize, options) {
	    var signedWeekYear = getUTCWeekYear(date, options);
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

	    // Two digit year
	    if (token === 'YY') {
	      var twoDigitYear = weekYear % 100;
	      return addLeadingZeros(twoDigitYear, 2);
	    }

	    // Ordinal number
	    if (token === 'Yo') {
	      return localize.ordinalNumber(weekYear, {
	        unit: 'year'
	      });
	    }

	    // Padding
	    return addLeadingZeros(weekYear, token.length);
	  },
	  // ISO week-numbering year
	  R: function R(date, token) {
	    var isoWeekYear = getUTCISOWeekYear(date);

	    // Padding
	    return addLeadingZeros(isoWeekYear, token.length);
	  },
	  // Extended year. This is a single number designating the year of this calendar system.
	  // The main difference between `y` and `u` localizers are B.C. years:
	  // | Year | `y` | `u` |
	  // |------|-----|-----|
	  // | AC 1 |   1 |   1 |
	  // | BC 1 |   1 |   0 |
	  // | BC 2 |   2 |  -1 |
	  // Also `yy` always returns the last two digits of a year,
	  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
	  u: function u(date, token) {
	    var year = date.getUTCFullYear();
	    return addLeadingZeros(year, token.length);
	  },
	  // Quarter
	  Q: function Q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'Q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'QQ':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'Qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'QQQ':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'QQQQQ':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'QQQQ':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone quarter
	  q: function q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'qq':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'qqq':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'qqqqq':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'qqqq':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Month
	  M: function M(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      case 'M':
	      case 'MM':
	        return formatters$1.M(date, token);
	      // 1st, 2nd, ..., 12th
	      case 'Mo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'MMM':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // J, F, ..., D
	      case 'MMMMM':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // January, February, ..., December
	      case 'MMMM':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone month
	  L: function L(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      // 1, 2, ..., 12
	      case 'L':
	        return String(month + 1);
	      // 01, 02, ..., 12
	      case 'LL':
	        return addLeadingZeros(month + 1, 2);
	      // 1st, 2nd, ..., 12th
	      case 'Lo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'LLL':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // J, F, ..., D
	      case 'LLLLL':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // January, February, ..., December
	      case 'LLLL':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Local week of year
	  w: function w(date, token, localize, options) {
	    var week = getUTCWeek(date, options);
	    if (token === 'wo') {
	      return localize.ordinalNumber(week, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(week, token.length);
	  },
	  // ISO week of year
	  I: function I(date, token, localize) {
	    var isoWeek = getUTCISOWeek(date);
	    if (token === 'Io') {
	      return localize.ordinalNumber(isoWeek, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(isoWeek, token.length);
	  },
	  // Day of the month
	  d: function d(date, token, localize) {
	    if (token === 'do') {
	      return localize.ordinalNumber(date.getUTCDate(), {
	        unit: 'date'
	      });
	    }
	    return formatters$1.d(date, token);
	  },
	  // Day of year
	  D: function D(date, token, localize) {
	    var dayOfYear = getUTCDayOfYear(date);
	    if (token === 'Do') {
	      return localize.ordinalNumber(dayOfYear, {
	        unit: 'dayOfYear'
	      });
	    }
	    return addLeadingZeros(dayOfYear, token.length);
	  },
	  // Day of week
	  E: function E(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    switch (token) {
	      // Tue
	      case 'E':
	      case 'EE':
	      case 'EEE':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'EEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'EEEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'EEEE':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Local day of week
	  e: function e(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (Nth day of week with current locale or weekStartsOn)
	      case 'e':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'ee':
	        return addLeadingZeros(localDayOfWeek, 2);
	      // 1st, 2nd, ..., 7th
	      case 'eo':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'eee':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'eeeee':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'eeeeee':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'eeee':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone local day of week
	  c: function c(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (same as in `e`)
	      case 'c':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'cc':
	        return addLeadingZeros(localDayOfWeek, token.length);
	      // 1st, 2nd, ..., 7th
	      case 'co':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'ccc':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // T
	      case 'ccccc':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // Tu
	      case 'cccccc':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'standalone'
	        });
	      // Tuesday
	      case 'cccc':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // ISO day of week
	  i: function i(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
	    switch (token) {
	      // 2
	      case 'i':
	        return String(isoDayOfWeek);
	      // 02
	      case 'ii':
	        return addLeadingZeros(isoDayOfWeek, token.length);
	      // 2nd
	      case 'io':
	        return localize.ordinalNumber(isoDayOfWeek, {
	          unit: 'day'
	        });
	      // Tue
	      case 'iii':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'iiiii':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'iiiiii':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'iiii':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM or PM
	  a: function a(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'aaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'aaaaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'aaaa':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM, PM, midnight, noon
	  b: function b(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours === 12) {
	      dayPeriodEnumValue = dayPeriodEnum.noon;
	    } else if (hours === 0) {
	      dayPeriodEnumValue = dayPeriodEnum.midnight;
	    } else {
	      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    }
	    switch (token) {
	      case 'b':
	      case 'bb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'bbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'bbbbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'bbbb':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // in the morning, in the afternoon, in the evening, at night
	  B: function B(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours >= 17) {
	      dayPeriodEnumValue = dayPeriodEnum.evening;
	    } else if (hours >= 12) {
	      dayPeriodEnumValue = dayPeriodEnum.afternoon;
	    } else if (hours >= 4) {
	      dayPeriodEnumValue = dayPeriodEnum.morning;
	    } else {
	      dayPeriodEnumValue = dayPeriodEnum.night;
	    }
	    switch (token) {
	      case 'B':
	      case 'BB':
	      case 'BBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'BBBBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'BBBB':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token, localize) {
	    if (token === 'ho') {
	      var hours = date.getUTCHours() % 12;
	      if (hours === 0) hours = 12;
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return formatters$1.h(date, token);
	  },
	  // Hour [0-23]
	  H: function H(date, token, localize) {
	    if (token === 'Ho') {
	      return localize.ordinalNumber(date.getUTCHours(), {
	        unit: 'hour'
	      });
	    }
	    return formatters$1.H(date, token);
	  },
	  // Hour [0-11]
	  K: function K(date, token, localize) {
	    var hours = date.getUTCHours() % 12;
	    if (token === 'Ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Hour [1-24]
	  k: function k(date, token, localize) {
	    var hours = date.getUTCHours();
	    if (hours === 0) hours = 24;
	    if (token === 'ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Minute
	  m: function m(date, token, localize) {
	    if (token === 'mo') {
	      return localize.ordinalNumber(date.getUTCMinutes(), {
	        unit: 'minute'
	      });
	    }
	    return formatters$1.m(date, token);
	  },
	  // Second
	  s: function s(date, token, localize) {
	    if (token === 'so') {
	      return localize.ordinalNumber(date.getUTCSeconds(), {
	        unit: 'second'
	      });
	    }
	    return formatters$1.s(date, token);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    return formatters$1.S(date, token);
	  },
	  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
	  X: function X(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    if (timezoneOffset === 0) {
	      return 'Z';
	    }
	    switch (token) {
	      // Hours and optional minutes
	      case 'X':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XX`
	      case 'XXXX':
	      case 'XX':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XXX`
	      case 'XXXXX':
	      case 'XXX': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
	  x: function x(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Hours and optional minutes
	      case 'x':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xx`
	      case 'xxxx':
	      case 'xx':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xxx`
	      case 'xxxxx':
	      case 'xxx': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (GMT)
	  O: function O(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'O':
	      case 'OO':
	      case 'OOO':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'OOOO':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (specific non-location)
	  z: function z(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'z':
	      case 'zz':
	      case 'zzz':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'zzzz':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Seconds timestamp
	  t: function t(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = Math.floor(originalDate.getTime() / 1000);
	    return addLeadingZeros(timestamp, token.length);
	  },
	  // Milliseconds timestamp
	  T: function T(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = originalDate.getTime();
	    return addLeadingZeros(timestamp, token.length);
	  }
	};
	function formatTimezoneShort(offset, dirtyDelimiter) {
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = Math.floor(absOffset / 60);
	  var minutes = absOffset % 60;
	  if (minutes === 0) {
	    return sign + String(hours);
	  }
	  var delimiter = dirtyDelimiter ;
	  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
	}
	function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
	  if (offset % 60 === 0) {
	    var sign = offset > 0 ? '-' : '+';
	    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
	  }
	  return formatTimezone(offset, dirtyDelimiter);
	}
	function formatTimezone(offset, dirtyDelimiter) {
	  var delimiter = dirtyDelimiter || '';
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
	  var minutes = addLeadingZeros(absOffset % 60, 2);
	  return sign + hours + delimiter + minutes;
	}

	var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'P':
	      return formatLong.date({
	        width: 'short'
	      });
	    case 'PP':
	      return formatLong.date({
	        width: 'medium'
	      });
	    case 'PPP':
	      return formatLong.date({
	        width: 'long'
	      });
	    case 'PPPP':
	    default:
	      return formatLong.date({
	        width: 'full'
	      });
	  }
	};
	var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'p':
	      return formatLong.time({
	        width: 'short'
	      });
	    case 'pp':
	      return formatLong.time({
	        width: 'medium'
	      });
	    case 'ppp':
	      return formatLong.time({
	        width: 'long'
	      });
	    case 'pppp':
	    default:
	      return formatLong.time({
	        width: 'full'
	      });
	  }
	};
	var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
	  var matchResult = pattern.match(/(P+)(p+)?/) || [];
	  var datePattern = matchResult[1];
	  var timePattern = matchResult[2];
	  if (!timePattern) {
	    return dateLongFormatter(pattern, formatLong);
	  }
	  var dateTimeFormat;
	  switch (datePattern) {
	    case 'P':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'short'
	      });
	      break;
	    case 'PP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'medium'
	      });
	      break;
	    case 'PPP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'long'
	      });
	      break;
	    case 'PPPP':
	    default:
	      dateTimeFormat = formatLong.dateTime({
	        width: 'full'
	      });
	      break;
	  }
	  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
	};
	var longFormatters = {
	  p: timeLongFormatter,
	  P: dateTimeLongFormatter
	};

	/**
	 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
	 * They usually appear for dates that denote time before the timezones were introduced
	 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
	 * and GMT+01:00:00 after that date)
	 *
	 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
	 * which would lead to incorrect calculations.
	 *
	 * This function returns the timezone offset in milliseconds that takes seconds in account.
	 */
	function getTimezoneOffsetInMilliseconds(date) {
	  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
	  utcDate.setUTCFullYear(date.getFullYear());
	  return date.getTime() - utcDate.getTime();
	}

	var protectedDayOfYearTokens = ['D', 'DD'];
	var protectedWeekYearTokens = ['YY', 'YYYY'];
	function isProtectedDayOfYearToken(token) {
	  return protectedDayOfYearTokens.indexOf(token) !== -1;
	}
	function isProtectedWeekYearToken(token) {
	  return protectedWeekYearTokens.indexOf(token) !== -1;
	}
	function throwProtectedError(token, format, input) {
	  if (token === 'YYYY') {
	    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'YY') {
	    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'D') {
	    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'DD') {
	    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  }
	}

	var formatDistanceLocale = {
	  lessThanXSeconds: {
	    one: 'less than a second',
	    other: 'less than {{count}} seconds'
	  },
	  xSeconds: {
	    one: '1 second',
	    other: '{{count}} seconds'
	  },
	  halfAMinute: 'half a minute',
	  lessThanXMinutes: {
	    one: 'less than a minute',
	    other: 'less than {{count}} minutes'
	  },
	  xMinutes: {
	    one: '1 minute',
	    other: '{{count}} minutes'
	  },
	  aboutXHours: {
	    one: 'about 1 hour',
	    other: 'about {{count}} hours'
	  },
	  xHours: {
	    one: '1 hour',
	    other: '{{count}} hours'
	  },
	  xDays: {
	    one: '1 day',
	    other: '{{count}} days'
	  },
	  aboutXWeeks: {
	    one: 'about 1 week',
	    other: 'about {{count}} weeks'
	  },
	  xWeeks: {
	    one: '1 week',
	    other: '{{count}} weeks'
	  },
	  aboutXMonths: {
	    one: 'about 1 month',
	    other: 'about {{count}} months'
	  },
	  xMonths: {
	    one: '1 month',
	    other: '{{count}} months'
	  },
	  aboutXYears: {
	    one: 'about 1 year',
	    other: 'about {{count}} years'
	  },
	  xYears: {
	    one: '1 year',
	    other: '{{count}} years'
	  },
	  overXYears: {
	    one: 'over 1 year',
	    other: 'over {{count}} years'
	  },
	  almostXYears: {
	    one: 'almost 1 year',
	    other: 'almost {{count}} years'
	  }
	};
	var formatDistance = function formatDistance(token, count, options) {
	  var result;
	  var tokenValue = formatDistanceLocale[token];
	  if (typeof tokenValue === 'string') {
	    result = tokenValue;
	  } else if (count === 1) {
	    result = tokenValue.one;
	  } else {
	    result = tokenValue.other.replace('{{count}}', count.toString());
	  }
	  if (options !== null && options !== void 0 && options.addSuffix) {
	    if (options.comparison && options.comparison > 0) {
	      return 'in ' + result;
	    } else {
	      return result + ' ago';
	    }
	  }
	  return result;
	};

	function buildFormatLongFn(args) {
	  return function () {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    // TODO: Remove String()
	    var width = options.width ? String(options.width) : args.defaultWidth;
	    var format = args.formats[width] || args.formats[args.defaultWidth];
	    return format;
	  };
	}

	var dateFormats = {
	  full: 'EEEE, MMMM do, y',
	  long: 'MMMM do, y',
	  medium: 'MMM d, y',
	  short: 'MM/dd/yyyy'
	};
	var timeFormats = {
	  full: 'h:mm:ss a zzzz',
	  long: 'h:mm:ss a z',
	  medium: 'h:mm:ss a',
	  short: 'h:mm a'
	};
	var dateTimeFormats = {
	  full: "{{date}} 'at' {{time}}",
	  long: "{{date}} 'at' {{time}}",
	  medium: '{{date}}, {{time}}',
	  short: '{{date}}, {{time}}'
	};
	var formatLong = {
	  date: buildFormatLongFn({
	    formats: dateFormats,
	    defaultWidth: 'full'
	  }),
	  time: buildFormatLongFn({
	    formats: timeFormats,
	    defaultWidth: 'full'
	  }),
	  dateTime: buildFormatLongFn({
	    formats: dateTimeFormats,
	    defaultWidth: 'full'
	  })
	};

	var formatRelativeLocale = {
	  lastWeek: "'last' eeee 'at' p",
	  yesterday: "'yesterday at' p",
	  today: "'today at' p",
	  tomorrow: "'tomorrow at' p",
	  nextWeek: "eeee 'at' p",
	  other: 'P'
	};
	var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
	  return formatRelativeLocale[token];
	};

	function buildLocalizeFn(args) {
	  return function (dirtyIndex, options) {
	    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
	    var valuesArray;
	    if (context === 'formatting' && args.formattingValues) {
	      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
	      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
	      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
	    } else {
	      var _defaultWidth = args.defaultWidth;
	      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
	      valuesArray = args.values[_width] || args.values[_defaultWidth];
	    }
	    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
	    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
	    return valuesArray[index];
	  };
	}

	var eraValues = {
	  narrow: ['B', 'A'],
	  abbreviated: ['BC', 'AD'],
	  wide: ['Before Christ', 'Anno Domini']
	};
	var quarterValues = {
	  narrow: ['1', '2', '3', '4'],
	  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
	  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
	};

	// Note: in English, the names of days of the week and months are capitalized.
	// If you are making a new locale based on this one, check if the same is true for the language you're working on.
	// Generally, formatted dates should look like they are in the middle of a sentence,
	// e.g. in Spanish language the weekdays and months should be in the lowercase.
	var monthValues = {
	  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
	  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
	};
	var dayValues = {
	  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
	  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
	};
	var dayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  }
	};
	var formattingDayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  }
	};
	var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
	  var number = Number(dirtyNumber);

	  // If ordinal numbers depend on context, for example,
	  // if they are different for different grammatical genders,
	  // use `options.unit`.
	  //
	  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
	  // 'day', 'hour', 'minute', 'second'.

	  var rem100 = number % 100;
	  if (rem100 > 20 || rem100 < 10) {
	    switch (rem100 % 10) {
	      case 1:
	        return number + 'st';
	      case 2:
	        return number + 'nd';
	      case 3:
	        return number + 'rd';
	    }
	  }
	  return number + 'th';
	};
	var localize = {
	  ordinalNumber: ordinalNumber,
	  era: buildLocalizeFn({
	    values: eraValues,
	    defaultWidth: 'wide'
	  }),
	  quarter: buildLocalizeFn({
	    values: quarterValues,
	    defaultWidth: 'wide',
	    argumentCallback: function argumentCallback(quarter) {
	      return quarter - 1;
	    }
	  }),
	  month: buildLocalizeFn({
	    values: monthValues,
	    defaultWidth: 'wide'
	  }),
	  day: buildLocalizeFn({
	    values: dayValues,
	    defaultWidth: 'wide'
	  }),
	  dayPeriod: buildLocalizeFn({
	    values: dayPeriodValues,
	    defaultWidth: 'wide',
	    formattingValues: formattingDayPeriodValues,
	    defaultFormattingWidth: 'wide'
	  })
	};

	function buildMatchFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var width = options.width;
	    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
	    var matchResult = string.match(matchPattern);
	    if (!matchResult) {
	      return null;
	    }
	    var matchedString = matchResult[0];
	    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
	    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    }) : findKey(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    });
	    var value;
	    value = args.valueCallback ? args.valueCallback(key) : key;
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}
	function findKey(object, predicate) {
	  for (var key in object) {
	    if (object.hasOwnProperty(key) && predicate(object[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}
	function findIndex(array, predicate) {
	  for (var key = 0; key < array.length; key++) {
	    if (predicate(array[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}

	function buildMatchPatternFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var matchResult = string.match(args.matchPattern);
	    if (!matchResult) return null;
	    var matchedString = matchResult[0];
	    var parseResult = string.match(args.parsePattern);
	    if (!parseResult) return null;
	    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}

	var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
	var parseOrdinalNumberPattern = /\d+/i;
	var matchEraPatterns = {
	  narrow: /^(b|a)/i,
	  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
	  wide: /^(before christ|before common era|anno domini|common era)/i
	};
	var parseEraPatterns = {
	  any: [/^b/i, /^(a|c)/i]
	};
	var matchQuarterPatterns = {
	  narrow: /^[1234]/i,
	  abbreviated: /^q[1234]/i,
	  wide: /^[1234](th|st|nd|rd)? quarter/i
	};
	var parseQuarterPatterns = {
	  any: [/1/i, /2/i, /3/i, /4/i]
	};
	var matchMonthPatterns = {
	  narrow: /^[jfmasond]/i,
	  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
	  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
	};
	var parseMonthPatterns = {
	  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
	  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
	};
	var matchDayPatterns = {
	  narrow: /^[smtwf]/i,
	  short: /^(su|mo|tu|we|th|fr|sa)/i,
	  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
	  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
	};
	var parseDayPatterns = {
	  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
	  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
	};
	var matchDayPeriodPatterns = {
	  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
	  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
	};
	var parseDayPeriodPatterns = {
	  any: {
	    am: /^a/i,
	    pm: /^p/i,
	    midnight: /^mi/i,
	    noon: /^no/i,
	    morning: /morning/i,
	    afternoon: /afternoon/i,
	    evening: /evening/i,
	    night: /night/i
	  }
	};
	var match = {
	  ordinalNumber: buildMatchPatternFn({
	    matchPattern: matchOrdinalNumberPattern,
	    parsePattern: parseOrdinalNumberPattern,
	    valueCallback: function valueCallback(value) {
	      return parseInt(value, 10);
	    }
	  }),
	  era: buildMatchFn({
	    matchPatterns: matchEraPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseEraPatterns,
	    defaultParseWidth: 'any'
	  }),
	  quarter: buildMatchFn({
	    matchPatterns: matchQuarterPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseQuarterPatterns,
	    defaultParseWidth: 'any',
	    valueCallback: function valueCallback(index) {
	      return index + 1;
	    }
	  }),
	  month: buildMatchFn({
	    matchPatterns: matchMonthPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseMonthPatterns,
	    defaultParseWidth: 'any'
	  }),
	  day: buildMatchFn({
	    matchPatterns: matchDayPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseDayPatterns,
	    defaultParseWidth: 'any'
	  }),
	  dayPeriod: buildMatchFn({
	    matchPatterns: matchDayPeriodPatterns,
	    defaultMatchWidth: 'any',
	    parsePatterns: parseDayPeriodPatterns,
	    defaultParseWidth: 'any'
	  })
	};

	/**
	 * @type {Locale}
	 * @category Locales
	 * @summary English locale (United States).
	 * @language English
	 * @iso-639-2 eng
	 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
	 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
	 */
	var locale = {
	  code: 'en-US',
	  formatDistance: formatDistance,
	  formatLong: formatLong,
	  formatRelative: formatRelative,
	  localize: localize,
	  match: match,
	  options: {
	    weekStartsOn: 0 /* Sunday */,
	    firstWeekContainsDate: 1
	  }
	};

	// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
	//   (one of the certain letters followed by `o`)
	// - (\w)\1* matches any sequences of the same letter
	// - '' matches two quote characters in a row
	// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
	//   except a single quote symbol, which ends the sequence.
	//   Two quote characters do not end the sequence.
	//   If there is no matching single quote
	//   then the sequence will continue until the end of the string.
	// - . matches any single character unmatched by previous parts of the RegExps
	var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

	// This RegExp catches symbols escaped by quotes, and also
	// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
	var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
	var escapedStringRegExp = /^'([^]*?)'?$/;
	var doubleQuoteRegExp = /''/g;
	var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

	/**
	 * @name format
	 * @category Common Helpers
	 * @summary Format the date.
	 *
	 * @description
	 * Return the formatted date string in the given format. The result may vary by locale.
	 *
	 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
	 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * The characters wrapped between two single quotes characters (') are escaped.
	 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
	 * (see the last example)
	 *
	 * Format of the string is based on Unicode Technical Standard #35:
	 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	 * with a few additions (see note 7 below the table).
	 *
	 * Accepted patterns:
	 * | Unit                            | Pattern | Result examples                   | Notes |
	 * |---------------------------------|---------|-----------------------------------|-------|
	 * | Era                             | G..GGG  | AD, BC                            |       |
	 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
	 * |                                 | GGGGG   | A, B                              |       |
	 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
	 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
	 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
	 * |                                 | yyyyy   | ...                               | 3,5   |
	 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
	 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
	 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
	 * |                                 | YYYYY   | ...                               | 3,5   |
	 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
	 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
	 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
	 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
	 * |                                 | RRRRR   | ...                               | 3,5,7 |
	 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
	 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
	 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
	 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
	 * |                                 | uuuuu   | ...                               | 3,5   |
	 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
	 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | QQ      | 01, 02, 03, 04                    |       |
	 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
	 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
	 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | qq      | 01, 02, 03, 04                    |       |
	 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
	 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
	 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | MM      | 01, 02, ..., 12                   |       |
	 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
	 * |                                 | MMMM    | January, February, ..., December  | 2     |
	 * |                                 | MMMMM   | J, F, ..., D                      |       |
	 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
	 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | LL      | 01, 02, ..., 12                   |       |
	 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
	 * |                                 | LLLL    | January, February, ..., December  | 2     |
	 * |                                 | LLLLL   | J, F, ..., D                      |       |
	 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
	 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | ww      | 01, 02, ..., 53                   |       |
	 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
	 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | II      | 01, 02, ..., 53                   | 7     |
	 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
	 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
	 * |                                 | dd      | 01, 02, ..., 31                   |       |
	 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
	 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
	 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
	 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
	 * |                                 | DDDD    | ...                               | 3     |
	 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
	 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
	 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
	 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
	 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
	 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
	 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
	 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
	 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | ee      | 02, 03, ..., 01                   |       |
	 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
	 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | cc      | 02, 03, ..., 01                   |       |
	 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
	 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | AM, PM                          | a..aa   | AM, PM                            |       |
	 * |                                 | aaa     | am, pm                            |       |
	 * |                                 | aaaa    | a.m., p.m.                        | 2     |
	 * |                                 | aaaaa   | a, p                              |       |
	 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
	 * |                                 | bbb     | am, pm, noon, midnight            |       |
	 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
	 * |                                 | bbbbb   | a, p, n, mi                       |       |
	 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
	 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
	 * |                                 | BBBBB   | at night, in the morning, ...     |       |
	 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
	 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
	 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
	 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
	 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
	 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
	 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
	 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
	 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
	 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
	 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
	 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
	 * | Minute                          | m       | 0, 1, ..., 59                     |       |
	 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | mm      | 00, 01, ..., 59                   |       |
	 * | Second                          | s       | 0, 1, ..., 59                     |       |
	 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | ss      | 00, 01, ..., 59                   |       |
	 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
	 * |                                 | SS      | 00, 01, ..., 99                   |       |
	 * |                                 | SSS     | 000, 001, ..., 999                |       |
	 * |                                 | SSSS    | ...                               | 3     |
	 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
	 * |                                 | XX      | -0800, +0530, Z                   |       |
	 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
	 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
	 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
	 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
	 * |                                 | xx      | -0800, +0530, +0000               |       |
	 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
	 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
	 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
	 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
	 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
	 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
	 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
	 * | Seconds timestamp               | t       | 512969520                         | 7     |
	 * |                                 | tt      | ...                               | 3,7   |
	 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
	 * |                                 | TT      | ...                               | 3,7   |
	 * | Long localized date             | P       | 04/29/1453                        | 7     |
	 * |                                 | PP      | Apr 29, 1453                      | 7     |
	 * |                                 | PPP     | April 29th, 1453                  | 7     |
	 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
	 * | Long localized time             | p       | 12:00 AM                          | 7     |
	 * |                                 | pp      | 12:00:00 AM                       | 7     |
	 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
	 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
	 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
	 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
	 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
	 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
	 * Notes:
	 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
	 *    are the same as "stand-alone" units, but are different in some languages.
	 *    "Formatting" units are declined according to the rules of the language
	 *    in the context of a date. "Stand-alone" units are always nominative singular:
	 *
	 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
	 *
	 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
	 *
	 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
	 *    the single quote characters (see below).
	 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
	 *    the output will be the same as default pattern for this unit, usually
	 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
	 *    are marked with "2" in the last column of the table.
	 *
	 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
	 *
	 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
	 *    The output will be padded with zeros to match the length of the pattern.
	 *
	 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
	 *
	 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
	 *    These tokens represent the shortest form of the quarter.
	 *
	 * 5. The main difference between `y` and `u` patterns are B.C. years:
	 *
	 *    | Year | `y` | `u` |
	 *    |------|-----|-----|
	 *    | AC 1 |   1 |   1 |
	 *    | BC 1 |   1 |   0 |
	 *    | BC 2 |   2 |  -1 |
	 *
	 *    Also `yy` always returns the last two digits of a year,
	 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
	 *
	 *    | Year | `yy` | `uu` |
	 *    |------|------|------|
	 *    | 1    |   01 |   01 |
	 *    | 14   |   14 |   14 |
	 *    | 376  |   76 |  376 |
	 *    | 1453 |   53 | 1453 |
	 *
	 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
	 *    except local week-numbering years are dependent on `options.weekStartsOn`
	 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
	 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
	 *
	 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
	 *    so right now these tokens fall back to GMT timezones.
	 *
	 * 7. These patterns are not in the Unicode Technical Standard #35:
	 *    - `i`: ISO day of week
	 *    - `I`: ISO week of year
	 *    - `R`: ISO week-numbering year
	 *    - `t`: seconds timestamp
	 *    - `T`: milliseconds timestamp
	 *    - `o`: ordinal number modifier
	 *    - `P`: long localized date
	 *    - `p`: long localized time
	 *
	 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
	 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
	 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * @param {Date|Number} date - the original date
	 * @param {String} format - the string of tokens
	 * @param {Object} [options] - an object with options.
	 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
	 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
	 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
	 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @returns {String} the formatted date string
	 * @throws {TypeError} 2 arguments required
	 * @throws {RangeError} `date` must not be Invalid Date
	 * @throws {RangeError} `options.locale` must contain `localize` property
	 * @throws {RangeError} `options.locale` must contain `formatLong` property
	 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
	 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
	 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} format string contains an unescaped latin alphabet character
	 *
	 * @example
	 * // Represent 11 February 2014 in middle-endian format:
	 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
	 * //=> '02/11/2014'
	 *
	 * @example
	 * // Represent 2 July 2014 in Esperanto:
	 * import { eoLocale } from 'date-fns/locale/eo'
	 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
	 *   locale: eoLocale
	 * })
	 * //=> '2-a de julio 2014'
	 *
	 * @example
	 * // Escape string by single quote characters:
	 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
	 * //=> "3 o'clock"
	 */

	function format(dirtyDate, dirtyFormatStr, options) {
	  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _defaultOptions$local3, _defaultOptions$local4;
	  requiredArgs(2, arguments);
	  var formatStr = String(dirtyFormatStr);
	  var defaultOptions = getDefaultOptions();
	  var locale$1 = (_ref = (_options$locale = void 0 ) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : locale;
	  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = void 0 ) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : void 0 ) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = void 0 ) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : void 0 ) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  if (!locale$1.localize) {
	    throw new RangeError('locale must contain localize property');
	  }
	  if (!locale$1.formatLong) {
	    throw new RangeError('locale must contain formatLong property');
	  }
	  var originalDate = toDate(dirtyDate);
	  if (!isValid(originalDate)) {
	    throw new RangeError('Invalid time value');
	  }

	  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
	  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
	  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
	  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
	  var utcDate = subMilliseconds(originalDate, timezoneOffset);
	  var formatterOptions = {
	    firstWeekContainsDate: firstWeekContainsDate,
	    weekStartsOn: weekStartsOn,
	    locale: locale$1,
	    _originalDate: originalDate
	  };
	  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
	    var firstCharacter = substring[0];
	    if (firstCharacter === 'p' || firstCharacter === 'P') {
	      var longFormatter = longFormatters[firstCharacter];
	      return longFormatter(substring, locale$1.formatLong);
	    }
	    return substring;
	  }).join('').match(formattingTokensRegExp).map(function (substring) {
	    // Replace two single quote characters with one single quote character
	    if (substring === "''") {
	      return "'";
	    }
	    var firstCharacter = substring[0];
	    if (firstCharacter === "'") {
	      return cleanEscapedString(substring);
	    }
	    var formatter = formatters[firstCharacter];
	    if (formatter) {
	      if (isProtectedWeekYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      if (isProtectedDayOfYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
	    }
	    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
	      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
	    }
	    return substring;
	  }).join('');
	  return result;
	}
	function cleanEscapedString(input) {
	  var matched = input.match(escapedStringRegExp);
	  if (!matched) {
	    return input;
	  }
	  return matched[1].replace(doubleQuoteRegExp, "'");
	}

	const Exporters = ['csv', 'json', 'xml'];

	const mimeTypes = {
	  json: 'application/json',
	  csv: 'text/csv',
	  xml: 'text/xml'
	};
	const getExportedFileName = extension => `export-${format(Date.now(), 'yyyy-MM-dd_HH-mm')}.${extension}`;
	const ExportComponent = ({
	  resource
	}) => {
	  const [isFetching, setFetching] = React.useState();
	  const sendNotice = adminjs.useNotice();
	  const exportData = async type => {
	    setFetching(true);
	    try {
	      const {
	        data: {
	          exportedData
	        }
	      } = await new adminjs.ApiClient().resourceAction({
	        method: 'post',
	        resourceId: resource.id,
	        actionName: 'export',
	        params: {
	          type
	        }
	      });
	      const blob = new Blob([exportedData], {
	        type: mimeTypes[type]
	      });
	      FileSaver_minExports.saveAs(blob, getExportedFileName(type));
	      sendNotice({
	        message: 'Exported successfully',
	        type: 'success'
	      });
	    } catch (e) {
	      sendNotice({
	        message: e.message,
	        type: 'error'
	      });
	    }
	    setFetching(false);
	  };
	  if (isFetching) {
	    return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
	  }
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center"
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
	    variant: "lg"
	  }, "Choose export format:")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center"
	  }, Exporters.map(parserType => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    key: parserType,
	    m: 2
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
	    onClick: () => exportData(parserType),
	    disabled: isFetching
	  }, parserType.toUpperCase())))));
	};

	const Edit = ({ property, record, onChange }) => {
	    const { translateProperty } = adminjs.useTranslation();
	    const { params } = record;
	    const { custom } = property;
	    const path = adminjs.flat.get(params, custom.filePathProperty);
	    const key = adminjs.flat.get(params, custom.keyProperty);
	    const file = adminjs.flat.get(params, custom.fileProperty);
	    const [originalKey, setOriginalKey] = React.useState(key);
	    const [filesToUpload, setFilesToUpload] = React.useState([]);
	    React.useEffect(() => {
	        // it means means that someone hit save and new file has been uploaded
	        // in this case fliesToUpload should be cleared.
	        // This happens when user turns off redirect after new/edit
	        if ((typeof key === 'string' && key !== originalKey)
	            || (typeof key !== 'string' && !originalKey)
	            || (typeof key !== 'string' && Array.isArray(key) && key.length !== originalKey.length)) {
	            setOriginalKey(key);
	            setFilesToUpload([]);
	        }
	    }, [key, originalKey]);
	    const onUpload = (files) => {
	        setFilesToUpload(files);
	        onChange(custom.fileProperty, files);
	    };
	    const handleRemove = () => {
	        onChange(custom.fileProperty, null);
	    };
	    const handleMultiRemove = (singleKey) => {
	        const index = (adminjs.flat.get(record.params, custom.keyProperty) || []).indexOf(singleKey);
	        const filesToDelete = adminjs.flat.get(record.params, custom.filesToDeleteProperty) || [];
	        if (path && path.length > 0) {
	            const newPath = path.map((currentPath, i) => (i !== index ? currentPath : null));
	            let newParams = adminjs.flat.set(record.params, custom.filesToDeleteProperty, [...filesToDelete, index]);
	            newParams = adminjs.flat.set(newParams, custom.filePathProperty, newPath);
	            onChange({
	                ...record,
	                params: newParams,
	            });
	        }
	        else {
	            // eslint-disable-next-line no-console
	            console.log('You cannot remove file when there are no uploaded files yet');
	        }
	    };
	    return (React__default.default.createElement(designSystem.FormGroup, null,
	        React__default.default.createElement(designSystem.Label, null, translateProperty(property.label, property.resourceId)),
	        React__default.default.createElement(designSystem.DropZone, { onChange: onUpload, multiple: custom.multiple, validate: {
	                mimeTypes: custom.mimeTypes,
	                maxSize: custom.maxSize,
	            }, files: filesToUpload }),
	        !custom.multiple && key && path && !filesToUpload.length && file !== null && (React__default.default.createElement(designSystem.DropZoneItem, { filename: key, src: path, onRemove: handleRemove })),
	        custom.multiple && key && key.length && path ? (React__default.default.createElement(React__default.default.Fragment, null, key.map((singleKey, index) => {
	            // when we remove items we set only path index to nulls.
	            // key is still there. This is because
	            // we have to maintain all the indexes. So here we simply filter out elements which
	            // were removed and display only what was left
	            const currentPath = path[index];
	            return currentPath ? (React__default.default.createElement(designSystem.DropZoneItem, { key: singleKey, filename: singleKey, src: path[index], onRemove: () => handleMultiRemove(singleKey) })) : '';
	        }))) : ''));
	};

	const AudioMimeTypes = [
	    'audio/aac',
	    'audio/midi',
	    'audio/x-midi',
	    'audio/mpeg',
	    'audio/ogg',
	    'application/ogg',
	    'audio/opus',
	    'audio/wav',
	    'audio/webm',
	    'audio/3gpp2',
	];
	const ImageMimeTypes = [
	    'image/bmp',
	    'image/gif',
	    'image/jpeg',
	    'image/png',
	    'image/svg+xml',
	    'image/vnd.microsoft.icon',
	    'image/tiff',
	    'image/webp',
	];

	// eslint-disable-next-line import/no-extraneous-dependencies
	const SingleFile = (props) => {
	    const { name, path, mimeType, width } = props;
	    if (path && path.length) {
	        if (mimeType && ImageMimeTypes.includes(mimeType)) {
	            return (React__default.default.createElement("img", { src: path, style: { maxHeight: width, maxWidth: width }, alt: name }));
	        }
	        if (mimeType && AudioMimeTypes.includes(mimeType)) {
	            return (React__default.default.createElement("audio", { controls: true, src: path },
	                "Your browser does not support the",
	                React__default.default.createElement("code", null, "audio"),
	                React__default.default.createElement("track", { kind: "captions" })));
	        }
	    }
	    return (React__default.default.createElement(designSystem.Box, null,
	        React__default.default.createElement(designSystem.Button, { as: "a", href: path, ml: "default", size: "sm", rounded: true, target: "_blank" },
	            React__default.default.createElement(designSystem.Icon, { icon: "DocumentDownload", color: "white", mr: "default" }),
	            name)));
	};
	const File = ({ width, record, property }) => {
	    const { custom } = property;
	    let path = adminjs.flat.get(record?.params, custom.filePathProperty);
	    if (!path) {
	        return null;
	    }
	    const name = adminjs.flat.get(record?.params, custom.fileNameProperty ? custom.fileNameProperty : custom.keyProperty);
	    const mimeType = custom.mimeTypeProperty
	        && adminjs.flat.get(record?.params, custom.mimeTypeProperty);
	    if (!property.custom.multiple) {
	        if (custom.opts && custom.opts.baseUrl) {
	            path = `${custom.opts.baseUrl}/${name}`;
	        }
	        return (React__default.default.createElement(SingleFile, { path: path, name: name, width: width, mimeType: mimeType }));
	    }
	    if (custom.opts && custom.opts.baseUrl) {
	        const baseUrl = custom.opts.baseUrl || '';
	        path = path.map((singlePath, index) => `${baseUrl}/${name[index]}`);
	    }
	    return (React__default.default.createElement(React__default.default.Fragment, null, path.map((singlePath, index) => (React__default.default.createElement(SingleFile, { key: singlePath, path: singlePath, name: name[index], width: width, mimeType: mimeType[index] })))));
	};

	const List = (props) => (React__default.default.createElement(File, { width: 100, ...props }));

	const Show = (props) => {
	    const { property } = props;
	    const { translateProperty } = adminjs.useTranslation();
	    return (React__default.default.createElement(designSystem.FormGroup, null,
	        React__default.default.createElement(designSystem.Label, null, translateProperty(property.label, property.resourceId)),
	        React__default.default.createElement(File, { width: "100%", ...props })));
	};

	AdminJS.UserComponents = {};
	AdminJS.UserComponents.EquipmentForm = EquipmentForm;
	AdminJS.UserComponents.DashboardCard = DashboardCard;
	AdminJS.UserComponents.CustomSelect = CustomSelect;
	AdminJS.UserComponents.CustomCheckBox = CustomCheckBox;
	AdminJS.UserComponents.LocationInfoComponent = LocationInfoComponent;
	AdminJS.UserComponents.SingleSelect = SingleSelect;
	AdminJS.UserComponents.GasParamsComponent = GasParamsComponent;
	AdminJS.UserComponents.ToggleSwitch = ToggleSwitch;
	AdminJS.UserComponents.InterventionsQuestionsComponent = InterventionsQuestionsComponent;
	AdminJS.UserComponents.SoufflageComponent = SoufflageComponent;
	AdminJS.UserComponents.AdditionalQuestionsComponent = AdditionalQuestionsComponent;
	AdminJS.UserComponents.QuestionComponent = QuestionComponent;
	AdminJS.UserComponents.PressionsComponent = PressionsComponent;
	AdminJS.UserComponents.PompeEauComponent = PompeEauComponent;
	AdminJS.UserComponents.EtancheiteComponent = EtancheiteComponent;
	AdminJS.UserComponents.SecuriteComponent = SecuriteComponent;
	AdminJS.UserComponents.ResistanceComponent = ResistanceComponent;
	AdminJS.UserComponents.InterventionQuestionsShow = InterventionQuestionsShow;
	AdminJS.UserComponents.ParametrageShowComponent = ParametrageShowComponent;
	AdminJS.UserComponents.ProductSelect = ProductSelect;
	AdminJS.UserComponents.FrenchDate = FrenchDate;
	AdminJS.UserComponents.EquipmentShowComponent = EquipmentShowComponent;
	AdminJS.UserComponents.InterventionShowComponent = InterventionShowComponent;
	AdminJS.UserComponents.FileUpload = FileUploader;
	AdminJS.UserComponents.SignatureComp = SignatureComp;
	AdminJS.UserComponents.ProductShow = ProductShow;
	AdminJS.UserComponents.ShowSignature = ShowSignature;
	AdminJS.UserComponents.DateComp = DateComp;
	AdminJS.UserComponents.EmptyBreak = EmptyBreak;
	AdminJS.UserComponents.ImportComponent = ImportComponent;
	AdminJS.UserComponents.ExportComponent = ExportComponent;
	AdminJS.UserComponents.UploadEditComponent = Edit;
	AdminJS.UserComponents.UploadListComponent = List;
	AdminJS.UserComponents.UploadShowComponent = Show;

})(React, AdminJSDesignSystem, PropTypes, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmNqcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzdHlsZWQtc3lzdGVtL2NvcmUvZGlzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac3R5bGVkLXN5c3RlbS9sYXlvdXQvZGlzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac3R5bGVkLXN5c3RlbS9jb2xvci9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzdHlsZWQtc3lzdGVtL3R5cG9ncmFwaHkvZGlzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac3R5bGVkLXN5c3RlbS9mbGV4Ym94L2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHN0eWxlZC1zeXN0ZW0vZ3JpZC9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzdHlsZWQtc3lzdGVtL2JvcmRlci9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzdHlsZWQtc3lzdGVtL2JhY2tncm91bmQvZGlzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9Ac3R5bGVkLXN5c3RlbS9wb3NpdGlvbi9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BzdHlsZWQtc3lzdGVtL3NwYWNlL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHN0eWxlZC1zeXN0ZW0vc2hhZG93L2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHN0eWxlZC1zeXN0ZW0vY3NzL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHN0eWxlZC1zeXN0ZW0vdmFyaWFudC9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3N0eWxlZC1zeXN0ZW0vZGlzdC9pbmRleC5qcyIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVucy9BdG9tcy5tanMiLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnMvQ2hlY2tCb3hHcmlkLm1qcyIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0VxdWlwbWVudEZvcm0uanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9EYXNoYm9hcmQvRGFzaGJvYXJkLmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0N1c3RvbVNlbGVjdC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnMvU3dpdGNoLm1qcyIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVucy9Ub2dnbGVTd2l0Y2guanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9FcXVpcG1lbnQvQ3VzdG9tQ2hlY2tCb3guanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9FcXVpcG1lbnQvTG9jYXRpb25JbmZvQ29tcG9uZW50LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L1NpbmdsZVNlbGVjdC5qc3giLCIuLi9hZG1pbmpzLWFwcC91dGlsaXRpZXMvY29udHJvbGVFdGFuY2hlaXRlLm1qcyIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0dhc1BhcmFtc0NvbXBvbmVudC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0ludGVydmVudGlvbi9Tb3VmZmxhZ2VDb21wb25lbnQuanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vUHJlc3Npb25zQ29tcG9uZW50LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL1BvbXBlRWF1Q29tcG9uZW50LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL0V0YW5jaGVpdGVDb21wb25lbnQuanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vU2VjdXJpdGVDb21wb25lbnQuanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vUmVzaXN0YW5jZUNvbXBvbmVudC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0ludGVydmVudGlvbi9RdWVzdGlvbkNvbXBvbmVudC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0ludGVydmVudGlvbi9JbnRlcnZlbnRpb25zUXVlc3Rpb25zQ29tcG9uZW50LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL0FkZGl0aW9uYWxRdWVzdGlvbnNDb21wb25lbnQuanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vSW50ZXJ2ZW50aW9uUXVlc3Rpb25zU2hvdy5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL1Byb2R1Y3RTaG93LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL1BhcmFtZXRyYWdlU2hvd0NvbXBvbmVudC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2FjdGlvbnMvZmV0Y2hPcHRpb25zLm1qcyIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvUHJvZHVjdFNlbGVjdC5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0ZyZW5jaERhdGUuanN4IiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9hdG9tcy9FcXVpcG1lbnRTaG93Q29tcG9uZW50LmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvSW50ZXJ2ZW50aW9uU2hvd0NvbXBvbmVudC5qc3giLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdHJhY2tTdHJlYW0uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9hdG9tcy9GaWxlVXBsb2FkLmpzeCIsIi4uL25vZGVfbW9kdWxlcy9zaWduYXR1cmVfcGFkL2Rpc3Qvc2lnbmF0dXJlX3BhZC5qcyIsIi4uL25vZGVfbW9kdWxlcy90cmltLWNhbnZhcy9idWlsZC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1zaWduYXR1cmUtY2FudmFzL2J1aWxkL2luZGV4LmpzIiwiLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9hdG9tcy9TaWduYXR1cmVDb21wLmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvU2hvd1NpZ25hdHVyZS5qc3giLCIuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0RhdGVDb21wLmpzeCIsIi4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvRW1wdHlCcmVhay5qc3giLCIuLi9ub2RlX21vZHVsZXMvQGFkbWluanMvaW1wb3J0LWV4cG9ydC9saWIvY29tcG9uZW50cy9JbXBvcnRDb21wb25lbnQuanN4IiwiLi4vbm9kZV9tb2R1bGVzL2ZpbGUtc2F2ZXIvZGlzdC9GaWxlU2F2ZXIubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQGFkbWluanMvaW1wb3J0LWV4cG9ydC9saWIvZXhwb3J0ZXIudHlwZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy9pbXBvcnQtZXhwb3J0L2xpYi9jb21wb25lbnRzL0V4cG9ydENvbXBvbmVudC5qc3giLCIuLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkRWRpdENvbXBvbmVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvdHlwZXMvbWltZS10eXBlcy50eXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL3VwbG9hZC9idWlsZC9mZWF0dXJlcy91cGxvYWQtZmlsZS9jb21wb25lbnRzL2ZpbGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkTGlzdENvbXBvbmVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvY29tcG9uZW50cy9VcGxvYWRTaG93Q29tcG9uZW50LmpzIiwiZW50cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBBVFRFTlRJT05cbi8vIFdoZW4gYWRkaW5nIG5ldyBzeW1ib2xzIHRvIHRoaXMgZmlsZSxcbi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scydcbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbnZhciBSRUFDVF9TRVJWRVJfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc2VydmVyX2NvbnRleHQnKTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZW5hYmxlU2NvcGVBUEkgPSBmYWxzZTsgLy8gRXhwZXJpbWVudGFsIENyZWF0ZSBFdmVudCBIYW5kbGUgQVBJLlxudmFyIGVuYWJsZUNhY2hlRWxlbWVudCA9IGZhbHNlO1xudmFyIGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nID0gZmFsc2U7IC8vIE5vIGtub3duIGJ1Z3MsIGJ1dCBuZWVkcyBwZXJmb3JtYW5jZSB0ZXN0aW5nXG5cbnZhciBlbmFibGVMZWdhY3lIaWRkZW4gPSBmYWxzZTsgLy8gRW5hYmxlcyB1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayBmZWF0dXJlIGluIEZpYmVyXG4vLyBzdHVmZi4gSW50ZW5kZWQgdG8gZW5hYmxlIFJlYWN0IGNvcmUgbWVtYmVycyB0byBtb3JlIGVhc2lseSBkZWJ1ZyBzY2hlZHVsaW5nXG4vLyBpc3N1ZXMgaW4gREVWIGJ1aWxkcy5cblxudmFyIGVuYWJsZURlYnVnVHJhY2luZyA9IGZhbHNlOyAvLyBUcmFjayB3aGljaCBGaWJlcihzKSBzY2hlZHVsZSByZW5kZXIgd29yay5cblxudmFyIFJFQUNUX01PRFVMRV9SRUZFUkVOQ0U7XG5cbntcbiAgUkVBQ1RfTU9EVUxFX1JFRkVSRU5DRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm1vZHVsZS5yZWZlcmVuY2UnKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIE5vdGU6IHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIChlLmcuIGlmIGl0J3MgYSBwb2x5ZmlsbCkuXG5cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IGVuYWJsZURlYnVnVHJhY2luZyAgfHwgdHlwZSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSB8fCBlbmFibGVMZWdhY3lIaWRkZW4gIHx8IHR5cGUgPT09IFJFQUNUX09GRlNDUkVFTl9UWVBFIHx8IGVuYWJsZVNjb3BlQVBJICB8fCBlbmFibGVDYWNoZUVsZW1lbnQgIHx8IGVuYWJsZVRyYW5zaXRpb25UcmFjaW5nICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7XG4gICAgaWYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fCAvLyBUaGlzIG5lZWRzIHRvIGluY2x1ZGUgYWxsIHBvc3NpYmxlIG1vZHVsZSByZWZlcmVuY2Ugb2JqZWN0XG4gICAgLy8gdHlwZXMgc3VwcG9ydGVkIGJ5IGFueSBGbGlnaHQgY29uZmlndXJhdGlvbiBhbnl3aGVyZSBzaW5jZVxuICAgIC8vIHdlIGRvbid0IGtub3cgd2hpY2ggRmxpZ2h0IGJ1aWxkIHRoaXMgd2lsbCBlbmQgdXAgYmVpbmcgdXNlZFxuICAgIC8vIHdpdGguXG4gICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTU9EVUxFX1JFRkVSRU5DRSB8fCB0eXBlLmdldE1vZHVsZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyICQkdHlwZW9mVHlwZSA9IHR5cGUgJiYgdHlwZS4kJHR5cGVvZjtcblxuICAgICAgICAgICAgc3dpdGNoICgkJHR5cGVvZlR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9TRVJWRVJfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2ZUeXBlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgcmV0dXJuICQkdHlwZW9mO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG52YXIgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xudmFyIENvbnRleHRQcm92aWRlciA9IFJFQUNUX1BST1ZJREVSX1RZUEU7XG52YXIgRWxlbWVudCA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcbnZhciBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbnZhciBGcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG52YXIgTGF6eSA9IFJFQUNUX0xBWllfVFlQRTtcbnZhciBNZW1vID0gUkVBQ1RfTUVNT19UWVBFO1xudmFyIFBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xudmFyIFByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbnZhciBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbnZhciBTdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG52YXIgU3VzcGVuc2VMaXN0ID0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFO1xudmFyIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlID0gZmFsc2U7XG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNDb25jdXJyZW50TW9kZSA9IGZhbHNlOyAvLyBBc3luY01vZGUgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcblxuZnVuY3Rpb24gaXNBc3luY01vZGUob2JqZWN0KSB7XG4gIHtcbiAgICBpZiAoIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IHRydWU7IC8vIFVzaW5nIGNvbnNvbGVbJ3dhcm4nXSB0byBldmFkZSBCYWJlbCBhbmQgRVNMaW50XG5cbiAgICAgIGNvbnNvbGVbJ3dhcm4nXSgnVGhlIFJlYWN0SXMuaXNBc3luY01vZGUoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTgrLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gIHtcbiAgICBpZiAoIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQ29uY3VycmVudE1vZGUpIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQ29uY3VycmVudE1vZGUgPSB0cnVlOyAvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuXG4gICAgICBjb25zb2xlWyd3YXJuJ10oJ1RoZSBSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTgrLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST1ZJREVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZvcndhcmRSZWYob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRnJhZ21lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTGF6eShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9MQVpZX1RZUEU7XG59XG5mdW5jdGlvbiBpc01lbW8ob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xufVxuZnVuY3Rpb24gaXNQb3J0YWwob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUE9SVEFMX1RZUEU7XG59XG5mdW5jdGlvbiBpc1Byb2ZpbGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N0cmljdE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3VzcGVuc2Uob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3VzcGVuc2VMaXN0KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTtcbn1cblxuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLkNvbnRleHRQcm92aWRlciA9IENvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBGb3J3YXJkUmVmO1xuZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50O1xuZXhwb3J0cy5MYXp5ID0gTGF6eTtcbmV4cG9ydHMuTWVtbyA9IE1lbW87XG5leHBvcnRzLlBvcnRhbCA9IFBvcnRhbDtcbmV4cG9ydHMuUHJvZmlsZXIgPSBQcm9maWxlcjtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFN0cmljdE1vZGU7XG5leHBvcnRzLlN1c3BlbnNlID0gU3VzcGVuc2U7XG5leHBvcnRzLlN1c3BlbnNlTGlzdCA9IFN1c3BlbnNlTGlzdDtcbmV4cG9ydHMuaXNBc3luY01vZGUgPSBpc0FzeW5jTW9kZTtcbmV4cG9ydHMuaXNDb25jdXJyZW50TW9kZSA9IGlzQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLmlzQ29udGV4dENvbnN1bWVyID0gaXNDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gaXNDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbmV4cG9ydHMuaXNGb3J3YXJkUmVmID0gaXNGb3J3YXJkUmVmO1xuZXhwb3J0cy5pc0ZyYWdtZW50ID0gaXNGcmFnbWVudDtcbmV4cG9ydHMuaXNMYXp5ID0gaXNMYXp5O1xuZXhwb3J0cy5pc01lbW8gPSBpc01lbW87XG5leHBvcnRzLmlzUG9ydGFsID0gaXNQb3J0YWw7XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyO1xuZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG5leHBvcnRzLmlzU3VzcGVuc2UgPSBpc1N1c3BlbnNlO1xuZXhwb3J0cy5pc1N1c3BlbnNlTGlzdCA9IGlzU3VzcGVuc2VMaXN0O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGU7XG5leHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbiAgfSkoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5mdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHN0eWxpc19taW47XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB1bml0bGVzc0tleXM7XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCB7IG1lbW9pemUgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRpc2FibGVSZW1vdGVQbGF5YmFja3xkb3dubG9hZHxkcmFnZ2FibGV8ZW5jVHlwZXxlbnRlcktleUhpbnR8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9hZGluZ3xsb29wfGxvd3xtYXJnaW5IZWlnaHR8bWFyZ2luV2lkdGh8bWF4fG1heExlbmd0aHxtZWRpYXxtZWRpYUdyb3VwfG1ldGhvZHxtaW58bWluTGVuZ3RofG11bHRpcGxlfG11dGVkfG5hbWV8bm9uY2V8bm9WYWxpZGF0ZXxvcGVufG9wdGltdW18cGF0dGVybnxwbGFjZWhvbGRlcnxwbGF5c0lubGluZXxwb3N0ZXJ8cHJlbG9hZHxwcm9maWxlfHJhZGlvR3JvdXB8cmVhZE9ubHl8cmVmZXJyZXJQb2xpY3l8cmVsfHJlcXVpcmVkfHJldmVyc2VkfHJvbGV8cm93c3xyb3dTcGFufHNhbmRib3h8c2NvcGV8c2NvcGVkfHNjcm9sbGluZ3xzZWFtbGVzc3xzZWxlY3RlZHxzaGFwZXxzaXplfHNpemVzfHNsb3R8c3BhbnxzcGVsbENoZWNrfHNyY3xzcmNEb2N8c3JjTGFuZ3xzcmNTZXR8c3RhcnR8c3RlcHxzdHlsZXxzdW1tYXJ5fHRhYkluZGV4fHRhcmdldHx0aXRsZXx0cmFuc2xhdGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpbmNyZW1lbnRhbHxmYWxsYmFja3xpbmVydHxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8b258b3B0aW9ufHJlc3VsdHN8c2VjdXJpdHl8dW5zZWxlY3RhYmxlfGFjY2VudEhlaWdodHxhY2N1bXVsYXRlfGFkZGl0aXZlfGFsaWdubWVudEJhc2VsaW5lfGFsbG93UmVvcmRlcnxhbHBoYWJldGljfGFtcGxpdHVkZXxhcmFiaWNGb3JtfGFzY2VudHxhdHRyaWJ1dGVOYW1lfGF0dHJpYnV0ZVR5cGV8YXV0b1JldmVyc2V8YXppbXV0aHxiYXNlRnJlcXVlbmN5fGJhc2VsaW5lU2hpZnR8YmFzZVByb2ZpbGV8YmJveHxiZWdpbnxiaWFzfGJ5fGNhbGNNb2RlfGNhcEhlaWdodHxjbGlwfGNsaXBQYXRoVW5pdHN8Y2xpcFBhdGh8Y2xpcFJ1bGV8Y29sb3JJbnRlcnBvbGF0aW9ufGNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnN8Y29sb3JQcm9maWxlfGNvbG9yUmVuZGVyaW5nfGNvbnRlbnRTY3JpcHRUeXBlfGNvbnRlbnRTdHlsZVR5cGV8Y3Vyc29yfGN4fGN5fGR8ZGVjZWxlcmF0ZXxkZXNjZW50fGRpZmZ1c2VDb25zdGFudHxkaXJlY3Rpb258ZGlzcGxheXxkaXZpc29yfGRvbWluYW50QmFzZWxpbmV8ZHVyfGR4fGR5fGVkZ2VNb2RlfGVsZXZhdGlvbnxlbmFibGVCYWNrZ3JvdW5kfGVuZHxleHBvbmVudHxleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkfGZpbGx8ZmlsbE9wYWNpdHl8ZmlsbFJ1bGV8ZmlsdGVyfGZpbHRlclJlc3xmaWx0ZXJVbml0c3xmbG9vZENvbG9yfGZsb29kT3BhY2l0eXxmb2N1c2FibGV8Zm9udEZhbWlseXxmb250U2l6ZXxmb250U2l6ZUFkanVzdHxmb250U3RyZXRjaHxmb250U3R5bGV8Zm9udFZhcmlhbnR8Zm9udFdlaWdodHxmb3JtYXR8ZnJvbXxmcnxmeHxmeXxnMXxnMnxnbHlwaE5hbWV8Z2x5cGhPcmllbnRhdGlvbkhvcml6b250YWx8Z2x5cGhPcmllbnRhdGlvblZlcnRpY2FsfGdseXBoUmVmfGdyYWRpZW50VHJhbnNmb3JtfGdyYWRpZW50VW5pdHN8aGFuZ2luZ3xob3JpekFkdlh8aG9yaXpPcmlnaW5YfGlkZW9ncmFwaGljfGltYWdlUmVuZGVyaW5nfGlufGluMnxpbnRlcmNlcHR8a3xrMXxrMnxrM3xrNHxrZXJuZWxNYXRyaXh8a2VybmVsVW5pdExlbmd0aHxrZXJuaW5nfGtleVBvaW50c3xrZXlTcGxpbmVzfGtleVRpbWVzfGxlbmd0aEFkanVzdHxsZXR0ZXJTcGFjaW5nfGxpZ2h0aW5nQ29sb3J8bGltaXRpbmdDb25lQW5nbGV8bG9jYWx8bWFya2VyRW5kfG1hcmtlck1pZHxtYXJrZXJTdGFydHxtYXJrZXJIZWlnaHR8bWFya2VyVW5pdHN8bWFya2VyV2lkdGh8bWFza3xtYXNrQ29udGVudFVuaXRzfG1hc2tVbml0c3xtYXRoZW1hdGljYWx8bW9kZXxudW1PY3RhdmVzfG9mZnNldHxvcGFjaXR5fG9wZXJhdG9yfG9yZGVyfG9yaWVudHxvcmllbnRhdGlvbnxvcmlnaW58b3ZlcmZsb3d8b3ZlcmxpbmVQb3NpdGlvbnxvdmVybGluZVRoaWNrbmVzc3xwYW5vc2UxfHBhaW50T3JkZXJ8cGF0aExlbmd0aHxwYXR0ZXJuQ29udGVudFVuaXRzfHBhdHRlcm5UcmFuc2Zvcm18cGF0dGVyblVuaXRzfHBvaW50ZXJFdmVudHN8cG9pbnRzfHBvaW50c0F0WHxwb2ludHNBdFl8cG9pbnRzQXRafHByZXNlcnZlQWxwaGF8cHJlc2VydmVBc3BlY3RSYXRpb3xwcmltaXRpdmVVbml0c3xyfHJhZGl1c3xyZWZYfHJlZll8cmVuZGVyaW5nSW50ZW50fHJlcGVhdENvdW50fHJlcGVhdER1cnxyZXF1aXJlZEV4dGVuc2lvbnN8cmVxdWlyZWRGZWF0dXJlc3xyZXN0YXJ0fHJlc3VsdHxyb3RhdGV8cnh8cnl8c2NhbGV8c2VlZHxzaGFwZVJlbmRlcmluZ3xzbG9wZXxzcGFjaW5nfHNwZWN1bGFyQ29uc3RhbnR8c3BlY3VsYXJFeHBvbmVudHxzcGVlZHxzcHJlYWRNZXRob2R8c3RhcnRPZmZzZXR8c3RkRGV2aWF0aW9ufHN0ZW1ofHN0ZW12fHN0aXRjaFRpbGVzfHN0b3BDb2xvcnxzdG9wT3BhY2l0eXxzdHJpa2V0aHJvdWdoUG9zaXRpb258c3RyaWtldGhyb3VnaFRoaWNrbmVzc3xzdHJpbmd8c3Ryb2tlfHN0cm9rZURhc2hhcnJheXxzdHJva2VEYXNob2Zmc2V0fHN0cm9rZUxpbmVjYXB8c3Ryb2tlTGluZWpvaW58c3Ryb2tlTWl0ZXJsaW1pdHxzdHJva2VPcGFjaXR5fHN0cm9rZVdpZHRofHN1cmZhY2VTY2FsZXxzeXN0ZW1MYW5ndWFnZXx0YWJsZVZhbHVlc3x0YXJnZXRYfHRhcmdldFl8dGV4dEFuY2hvcnx0ZXh0RGVjb3JhdGlvbnx0ZXh0UmVuZGVyaW5nfHRleHRMZW5ndGh8dG98dHJhbnNmb3JtfHUxfHUyfHVuZGVybGluZVBvc2l0aW9ufHVuZGVybGluZVRoaWNrbmVzc3x1bmljb2RlfHVuaWNvZGVCaWRpfHVuaWNvZGVSYW5nZXx1bml0c1BlckVtfHZBbHBoYWJldGljfHZIYW5naW5nfHZJZGVvZ3JhcGhpY3x2TWF0aGVtYXRpY2FsfHZhbHVlc3x2ZWN0b3JFZmZlY3R8dmVyc2lvbnx2ZXJ0QWR2WXx2ZXJ0T3JpZ2luWHx2ZXJ0T3JpZ2luWXx2aWV3Qm94fHZpZXdUYXJnZXR8dmlzaWJpbGl0eXx3aWR0aHN8d29yZFNwYWNpbmd8d3JpdGluZ01vZGV8eHx4SGVpZ2h0fHgxfHgyfHhDaGFubmVsU2VsZWN0b3J8eGxpbmtBY3R1YXRlfHhsaW5rQXJjcm9sZXx4bGlua0hyZWZ8eGxpbmtSb2xlfHhsaW5rU2hvd3x4bGlua1RpdGxlfHhsaW5rVHlwZXx4bWxCYXNlfHhtbG5zfHhtbG5zWGxpbmt8eG1sTGFuZ3x4bWxTcGFjZXx5fHkxfHkyfHlDaGFubmVsU2VsZWN0b3J8enx6b29tQW5kUGFufGZvcnxjbGFzc3xhdXRvZm9jdXMpfCgoW0RkXVtBYV1bVHRdW0FhXXxbQWFdW1JyXVtJaV1bQWFdfHgpLS4qKSkkLzsgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmZlZTY4YTRjZDdlNjAwOWVmNjFkMjNcblxudmFyIGlzUHJvcFZhbGlkID0gLyogI19fUFVSRV9fICovbWVtb2l6ZShmdW5jdGlvbiAocHJvcCkge1xuICByZXR1cm4gcmVhY3RQcm9wc1JlZ2V4LnRlc3QocHJvcCkgfHwgcHJvcC5jaGFyQ29kZUF0KDApID09PSAxMTFcbiAgLyogbyAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMSkgPT09IDExMFxuICAvKiBuICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgyKSA8IDkxO1xufVxuLyogWisxICovXG4pO1xuXG5leHBvcnQgeyBpc1Byb3BWYWxpZCBhcyBkZWZhdWx0IH07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG52YXIgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpIDogMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpIDogMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpIDogMHhlYWNjO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpIDogMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpIDogMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKSA6IDB4ZWFjZTsgLy8gVE9ETzogV2UgZG9uJ3QgdXNlIEFzeW5jTW9kZSBvciBDb25jdXJyZW50TW9kZSBhbnltb3JlLiBUaGV5IHdlcmUgdGVtcG9yYXJ5XG4vLyAodW5zdGFibGUpIEFQSXMgdGhhdCBoYXZlIGJlZW4gcmVtb3ZlZC4gQ2FuIHdlIHJlbW92ZSB0aGUgc3ltYm9scz9cblxudmFyIFJFQUNUX0FTWU5DX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmFzeW5jX21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbmN1cnJlbnRfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpIDogMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpIDogMHhlYWQxO1xudmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKSA6IDB4ZWFkODtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJykgOiAweGVhZDM7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubGF6eScpIDogMHhlYWQ0O1xudmFyIFJFQUNUX0JMT0NLX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5ibG9jaycpIDogMHhlYWQ5O1xudmFyIFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpIDogMHhlYWQ1O1xudmFyIFJFQUNUX1JFU1BPTkRFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucmVzcG9uZGVyJykgOiAweGVhZDY7XG52YXIgUkVBQ1RfU0NPUEVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnNjb3BlJykgOiAweGVhZDc7XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgLy8gTm90ZTogaXRzIHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIGlmIGl0J3MgYSBwb2x5ZmlsbC5cbiAgdHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1JFU1BPTkRFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1NDT1BFX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQkxPQ0tfVFlQRSk7XG59XG5cbmZ1bmN0aW9uIHR5cGVPZihvYmplY3QpIHtcbiAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCkge1xuICAgIHZhciAkJHR5cGVvZiA9IG9iamVjdC4kJHR5cGVvZjtcblxuICAgIHN3aXRjaCAoJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICB2YXIgdHlwZSA9IG9iamVjdC50eXBlO1xuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdmFyICQkdHlwZW9mVHlwZSA9IHR5cGUgJiYgdHlwZS4kJHR5cGVvZjtcblxuICAgICAgICAgICAgc3dpdGNoICgkJHR5cGVvZlR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mVHlwZTtcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSAvLyBBc3luY01vZGUgaXMgZGVwcmVjYXRlZCBhbG9uZyB3aXRoIGlzQXN5bmNNb2RlXG5cbnZhciBBc3luY01vZGUgPSBSRUFDVF9BU1lOQ19NT0RFX1RZUEU7XG52YXIgQ29uY3VycmVudE1vZGUgPSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbnZhciBDb250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbnZhciBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIEZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbnZhciBMYXp5ID0gUkVBQ1RfTEFaWV9UWVBFO1xudmFyIE1lbW8gPSBSRUFDVF9NRU1PX1RZUEU7XG52YXIgUG9ydGFsID0gUkVBQ1RfUE9SVEFMX1RZUEU7XG52YXIgUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xudmFyIFN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xudmFyIFN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IGZhbHNlOyAvLyBBc3luY01vZGUgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcblxuZnVuY3Rpb24gaXNBc3luY01vZGUob2JqZWN0KSB7XG4gIHtcbiAgICBpZiAoIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZElzQXN5bmNNb2RlKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IHRydWU7IC8vIFVzaW5nIGNvbnNvbGVbJ3dhcm4nXSB0byBldmFkZSBCYWJlbCBhbmQgRVNMaW50XG5cbiAgICAgIGNvbnNvbGVbJ3dhcm4nXSgnVGhlIFJlYWN0SXMuaXNBc3luY01vZGUoKSBhbGlhcyBoYXMgYmVlbiBkZXByZWNhdGVkLCAnICsgJ2FuZCB3aWxsIGJlIHJlbW92ZWQgaW4gUmVhY3QgMTcrLiBVcGRhdGUgeW91ciBjb2RlIHRvIHVzZSAnICsgJ1JlYWN0SXMuaXNDb25jdXJyZW50TW9kZSgpIGluc3RlYWQuIEl0IGhhcyB0aGUgZXhhY3Qgc2FtZSBBUEkuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB8fCB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQVNZTkNfTU9ERV9UWVBFO1xufVxuZnVuY3Rpb24gaXNDb25jdXJyZW50TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dENvbnN1bWVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0NPTlRFWFRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST1ZJREVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZvcndhcmRSZWYob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzRnJhZ21lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzTGF6eShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9MQVpZX1RZUEU7XG59XG5mdW5jdGlvbiBpc01lbW8ob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTUVNT19UWVBFO1xufVxuZnVuY3Rpb24gaXNQb3J0YWwob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfUE9SVEFMX1RZUEU7XG59XG5mdW5jdGlvbiBpc1Byb2ZpbGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N0cmljdE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3VzcGVuc2Uob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbn1cblxuZXhwb3J0cy5Bc3luY01vZGUgPSBBc3luY01vZGU7XG5leHBvcnRzLkNvbmN1cnJlbnRNb2RlID0gQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLkNvbnRleHRDb25zdW1lciA9IENvbnRleHRDb25zdW1lcjtcbmV4cG9ydHMuQ29udGV4dFByb3ZpZGVyID0gQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbmV4cG9ydHMuRm9yd2FyZFJlZiA9IEZvcndhcmRSZWY7XG5leHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG5leHBvcnRzLkxhenkgPSBMYXp5O1xuZXhwb3J0cy5NZW1vID0gTWVtbztcbmV4cG9ydHMuUG9ydGFsID0gUG9ydGFsO1xuZXhwb3J0cy5Qcm9maWxlciA9IFByb2ZpbGVyO1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gU3RyaWN0TW9kZTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBTdXNwZW5zZTtcbmV4cG9ydHMuaXNBc3luY01vZGUgPSBpc0FzeW5jTW9kZTtcbmV4cG9ydHMuaXNDb25jdXJyZW50TW9kZSA9IGlzQ29uY3VycmVudE1vZGU7XG5leHBvcnRzLmlzQ29udGV4dENvbnN1bWVyID0gaXNDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyID0gaXNDb250ZXh0UHJvdmlkZXI7XG5leHBvcnRzLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbmV4cG9ydHMuaXNGb3J3YXJkUmVmID0gaXNGb3J3YXJkUmVmO1xuZXhwb3J0cy5pc0ZyYWdtZW50ID0gaXNGcmFnbWVudDtcbmV4cG9ydHMuaXNMYXp5ID0gaXNMYXp5O1xuZXhwb3J0cy5pc01lbW8gPSBpc01lbW87XG5leHBvcnRzLmlzUG9ydGFsID0gaXNQb3J0YWw7XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyO1xuZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG5leHBvcnRzLmlzU3VzcGVuc2UgPSBpc1N1c3BlbnNlO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGU7XG5leHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbiAgfSkoKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBlKGUpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJkZWZhdWx0XCJpbiBlP2UuZGVmYXVsdDplfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB0PXJlcXVpcmUoXCJyZWFjdC1pc1wiKSxuPXJlcXVpcmUoXCJyZWFjdFwiKSxyPWUobiksbz1lKHJlcXVpcmUoXCJzaGFsbG93ZXF1YWxcIikpLHM9ZShyZXF1aXJlKFwiQGVtb3Rpb24vc3R5bGlzXCIpKSxpPWUocmVxdWlyZShcIkBlbW90aW9uL3VuaXRsZXNzXCIpKSxhPWUocmVxdWlyZShcIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIikpLGM9ZShyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO2Z1bmN0aW9uIHUoKXtyZXR1cm4odT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBsPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxkPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsIT09ZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiW29iamVjdCBPYmplY3RdXCI9PT0oZS50b1N0cmluZz9lLnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKSYmIXQudHlwZU9mKGUpfSxoPU9iamVjdC5mcmVlemUoW10pLHA9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gZihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJmV8fGUuZGlzcGxheU5hbWV8fGUubmFtZXx8XCJDb21wb25lbnRcIn1mdW5jdGlvbiB5KGUpe3JldHVybiBlJiZcInN0cmluZ1wiPT10eXBlb2YgZS5zdHlsZWRDb21wb25lbnRJZH12YXIgdj1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJihwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfQVRUUnx8cHJvY2Vzcy5lbnYuU0NfQVRUUil8fFwiZGF0YS1zdHlsZWRcIixnPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwiSFRNTEVsZW1lbnRcImluIHdpbmRvdyxTPUJvb2xlYW4oXCJib29sZWFuXCI9PXR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWT9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYmJih2b2lkIDAhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk6dm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVikpLHc9e30sRT1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwifTp7fTtmdW5jdGlvbiBiKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTA/dm9pZCAwOmFyZ3VtZW50c1swXSx0PVtdLG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG48MHx8YXJndW1lbnRzLmxlbmd0aDw9bj92b2lkIDA6YXJndW1lbnRzW25dKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUucmVwbGFjZSgvJVthLXpdLyx0KX0pKSxlfWZ1bmN0aW9uIF8oZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3Rocm93XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0LmlvL0pVSWFFI1wiK2UrXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIrKG4ubGVuZ3RoPjA/XCIgQXJnczogXCIrbi5qb2luKFwiLCBcIik6XCJcIikpOm5ldyBFcnJvcihiLmFwcGx5KHZvaWQgMCxbRVtlXV0uY29uY2F0KG4pKS50cmltKCkpfXZhciBOPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5kZXhPZkdyb3VwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGU7bisrKXQrPXRoaXMuZ3JvdXBTaXplc1tuXTtyZXR1cm4gdH0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQpe2lmKGU+PXRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpe2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXMscj1uLmxlbmd0aCxvPXI7ZT49bzspKG88PD0xKTwwJiZfKDE2LFwiXCIrZSk7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheShvKSx0aGlzLmdyb3VwU2l6ZXMuc2V0KG4pLHRoaXMubGVuZ3RoPW87Zm9yKHZhciBzPXI7czxvO3MrKyl0aGlzLmdyb3VwU2l6ZXNbc109MH1mb3IodmFyIGk9dGhpcy5pbmRleE9mR3JvdXAoZSsxKSxhPTAsYz10Lmxlbmd0aDthPGM7YSsrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W2FdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LHQuY2xlYXJHcm91cD1mdW5jdGlvbihlKXtpZihlPHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmdyb3VwU2l6ZXNbZV0sbj10aGlzLmluZGV4T2ZHcm91cChlKSxyPW4rdDt0aGlzLmdyb3VwU2l6ZXNbZV09MDtmb3IodmFyIG89bjtvPHI7bysrKXRoaXMudGFnLmRlbGV0ZVJ1bGUobil9fSx0LmdldEdyb3VwPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZT49dGhpcy5sZW5ndGh8fDA9PT10aGlzLmdyb3VwU2l6ZXNbZV0pcmV0dXJuIHQ7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplc1tlXSxyPXRoaXMuaW5kZXhPZkdyb3VwKGUpLG89cituLHM9cjtzPG87cysrKXQrPXRoaXMudGFnLmdldFJ1bGUocykrXCIvKiFzYyovXFxuXCI7cmV0dXJuIHR9LGV9KCksQz1uZXcgTWFwLEE9bmV3IE1hcCxJPTEsUD1mdW5jdGlvbihlKXtpZihDLmhhcyhlKSlyZXR1cm4gQy5nZXQoZSk7Zm9yKDtBLmhhcyhJKTspSSsrO3ZhciB0PUkrKztyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xPDwzMCkmJl8oMTYsXCJcIit0KSxDLnNldChlLHQpLEEuc2V0KHQsZSksdH0sTz1mdW5jdGlvbihlKXtyZXR1cm4gQS5nZXQoZSl9LHg9ZnVuY3Rpb24oZSx0KXt0Pj1JJiYoST10KzEpLEMuc2V0KGUsdCksQS5zZXQodCxlKX0sUj1cInN0eWxlW1wiK3YrJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy45XCJdJyxEPW5ldyBSZWdFeHAoXCJeXCIrdisnXFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopJyksVD1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByLG89bi5zcGxpdChcIixcIikscz0wLGk9by5sZW5ndGg7czxpO3MrKykocj1vW3NdKSYmZS5yZWdpc3Rlck5hbWUodCxyKX0saj1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0odC50ZXh0Q29udGVudHx8XCJcIikuc3BsaXQoXCIvKiFzYyovXFxuXCIpLHI9W10sbz0wLHM9bi5sZW5ndGg7bzxzO28rKyl7dmFyIGk9bltvXS50cmltKCk7aWYoaSl7dmFyIGE9aS5tYXRjaChEKTtpZihhKXt2YXIgYz0wfHBhcnNlSW50KGFbMV0sMTApLHU9YVsyXTswIT09YyYmKHgodSxjKSxUKGUsdSxhWzNdKSxlLmdldFRhZygpLmluc2VydFJ1bGVzKGMscikpLHIubGVuZ3RoPTB9ZWxzZSByLnB1c2goaSl9fX0saz1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXz9fX3dlYnBhY2tfbm9uY2VfXzpudWxsfSxWPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmhlYWQsbj1lfHx0LHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hpbGROb2RlcyxuPXQubGVuZ3RoO24+PTA7bi0tKXt2YXIgcj10W25dO2lmKHImJjE9PT1yLm5vZGVUeXBlJiZyLmhhc0F0dHJpYnV0ZSh2KSlyZXR1cm4gcn19KG4pLHM9dm9pZCAwIT09bz9vLm5leHRTaWJsaW5nOm51bGw7ci5zZXRBdHRyaWJ1dGUodixcImFjdGl2ZVwiKSxyLnNldEF0dHJpYnV0ZShcImRhdGEtc3R5bGVkLXZlcnNpb25cIixcIjUuMy45XCIpO3ZhciBpPWsoKTtyZXR1cm4gaSYmci5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGkpLG4uaW5zZXJ0QmVmb3JlKHIscykscn0sTT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PVYoZSk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSksdGhpcy5zaGVldD1mdW5jdGlvbihlKXtpZihlLnNoZWV0KXJldHVybiBlLnNoZWV0O2Zvcih2YXIgdD1kb2N1bWVudC5zdHlsZVNoZWV0cyxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO2lmKG8ub3duZXJOb2RlPT09ZSlyZXR1cm4gb31fKDE3KX0odCksdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiB0aGlzLnNoZWV0Lmluc2VydFJ1bGUodCxlKSx0aGlzLmxlbmd0aCsrLCEwfWNhdGNoKGUpe3JldHVybiExfX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuc2hlZXQuZGVsZXRlUnVsZShlKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaGVldC5jc3NSdWxlc1tlXTtyZXR1cm4gdm9pZCAwIT09dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuY3NzVGV4dD90LmNzc1RleHQ6XCJcIn0sZX0oKSxCPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9VihlKTt0aGlzLm5vZGVzPXQuY2hpbGROb2Rlcyx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtpZihlPD10aGlzLmxlbmd0aCYmZT49MCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCkscj10aGlzLm5vZGVzW2VdO3JldHVybiB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG4scnx8bnVsbCksdGhpcy5sZW5ndGgrKywhMH1yZXR1cm4hMX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGVzW2VdKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ub2Rlc1tlXS50ZXh0Q29udGVudDpcIlwifSxlfSgpLHo9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMucnVsZXM9W10sdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8PXRoaXMubGVuZ3RoJiYodGhpcy5ydWxlcy5zcGxpY2UoZSwwLHQpLHRoaXMubGVuZ3RoKyssITApfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5ydWxlcy5zcGxpY2UoZSwxKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ydWxlc1tlXTpcIlwifSxlfSgpLHE9ZyxHPXtpc1NlcnZlcjohZyx1c2VDU1NPTUluamVjdGlvbjohU30sTD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3ZvaWQgMD09PWUmJihlPXApLHZvaWQgMD09PXQmJih0PXt9KSx0aGlzLm9wdGlvbnM9dSh7fSxHLHt9LGUpLHRoaXMuZ3M9dCx0aGlzLm5hbWVzPW5ldyBNYXAobiksdGhpcy5zZXJ2ZXI9ISFlLmlzU2VydmVyLCF0aGlzLnNlcnZlciYmZyYmcSYmKHE9ITEsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoUiksbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtvJiZcImFjdGl2ZVwiIT09by5nZXRBdHRyaWJ1dGUodikmJihqKGUsbyksby5wYXJlbnROb2RlJiZvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobykpfX0odGhpcykpfWUucmVnaXN0ZXJJZD1mdW5jdGlvbihlKXtyZXR1cm4gUChlKX07dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucz1mdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0hMCksbmV3IGUodSh7fSx0aGlzLm9wdGlvbnMse30sdCksdGhpcy5ncyxuJiZ0aGlzLm5hbWVzfHx2b2lkIDApfSx0LmFsbG9jYXRlR1NJbnN0YW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nc1tlXT0odGhpcy5nc1tlXXx8MCkrMX0sdC5nZXRUYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWd8fCh0aGlzLnRhZz0obj0odD10aGlzLm9wdGlvbnMpLmlzU2VydmVyLHI9dC51c2VDU1NPTUluamVjdGlvbixvPXQudGFyZ2V0LGU9bj9uZXcgeihvKTpyP25ldyBNKG8pOm5ldyBCKG8pLG5ldyBOKGUpKSk7dmFyIGUsdCxuLHIsb30sdC5oYXNOYW1lRm9ySWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmhhcyh0KX0sdC5yZWdpc3Rlck5hbWU9ZnVuY3Rpb24oZSx0KXtpZihQKGUpLHRoaXMubmFtZXMuaGFzKGUpKXRoaXMubmFtZXMuZ2V0KGUpLmFkZCh0KTtlbHNle3ZhciBuPW5ldyBTZXQ7bi5hZGQodCksdGhpcy5uYW1lcy5zZXQoZSxuKX19LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0LG4pe3RoaXMucmVnaXN0ZXJOYW1lKGUsdCksdGhpcy5nZXRUYWcoKS5pbnNlcnRSdWxlcyhQKGUpLG4pfSx0LmNsZWFyTmFtZXM9ZnVuY3Rpb24oZSl7dGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmNsZWFyKCl9LHQuY2xlYXJSdWxlcz1mdW5jdGlvbihlKXt0aGlzLmdldFRhZygpLmNsZWFyR3JvdXAoUChlKSksdGhpcy5jbGVhck5hbWVzKGUpfSx0LmNsZWFyVGFnPWZ1bmN0aW9uKCl7dGhpcy50YWc9dm9pZCAwfSx0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFRhZygpLG49dC5sZW5ndGgscj1cIlwiLG89MDtvPG47bysrKXt2YXIgcz1PKG8pO2lmKHZvaWQgMCE9PXMpe3ZhciBpPWUubmFtZXMuZ2V0KHMpLGE9dC5nZXRHcm91cChvKTtpZihpJiZhJiZpLnNpemUpe3ZhciBjPXYrXCIuZ1wiK28rJ1tpZD1cIicrcysnXCJdJyx1PVwiXCI7dm9pZCAwIT09aSYmaS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmxlbmd0aD4wJiYodSs9ZStcIixcIil9KSkscis9XCJcIithK2MrJ3tjb250ZW50OlwiJyt1KydcIn0vKiFzYyovXFxuJ319fXJldHVybiByfSh0aGlzKX0sZX0oKSxGPS8oYSkoZCkvZ2ksWT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlKyhlPjI1PzM5Ojk3KSl9O2Z1bmN0aW9uIEgoZSl7dmFyIHQsbj1cIlwiO2Zvcih0PU1hdGguYWJzKGUpO3Q+NTI7dD10LzUyfDApbj1ZKHQlNTIpK247cmV0dXJuKFkodCU1MikrbikucmVwbGFjZShGLFwiJDEtJDJcIil9dmFyICQ9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSxXPWZ1bmN0aW9uKGUpe3JldHVybiAkKDUzODEsZSl9O2Z1bmN0aW9uIFUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKGYobikmJiF5KG4pKXJldHVybiExfXJldHVybiEwfXZhciBKPVcoXCI1LjMuOVwiKSxYPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dGhpcy5ydWxlcz1lLHRoaXMuc3RhdGljUnVsZXNJZD1cIlwiLHRoaXMuaXNTdGF0aWM9XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZvaWQgMD09PW58fG4uaXNTdGF0aWMpJiZVKGUpLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmJhc2VIYXNoPSQoSix0KSx0aGlzLmJhc2VTdHlsZT1uLEwucmVnaXN0ZXJJZCh0KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuY29tcG9uZW50SWQsbz1bXTtpZih0aGlzLmJhc2VTdHlsZSYmby5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGUsdCxuKSksdGhpcy5pc1N0YXRpYyYmIW4uaGFzaClpZih0aGlzLnN0YXRpY1J1bGVzSWQmJnQuaGFzTmFtZUZvcklkKHIsdGhpcy5zdGF0aWNSdWxlc0lkKSlvLnB1c2godGhpcy5zdGF0aWNSdWxlc0lkKTtlbHNle3ZhciBzPW1lKHRoaXMucnVsZXMsZSx0LG4pLmpvaW4oXCJcIiksaT1IKCQodGhpcy5iYXNlSGFzaCxzKT4+PjApO2lmKCF0Lmhhc05hbWVGb3JJZChyLGkpKXt2YXIgYT1uKHMsXCIuXCIraSx2b2lkIDAscik7dC5pbnNlcnRSdWxlcyhyLGksYSl9by5wdXNoKGkpLHRoaXMuc3RhdGljUnVsZXNJZD1pfWVsc2V7Zm9yKHZhciBjPXRoaXMucnVsZXMubGVuZ3RoLHU9JCh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9JCh1LGgrZCkpO2Vsc2UgaWYoaCl7dmFyIHA9bWUoaCxlLHQsbiksZj1BcnJheS5pc0FycmF5KHApP3Auam9pbihcIlwiKTpwO3U9JCh1LGYrZCksbCs9Zn19aWYobCl7dmFyIG09SCh1Pj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsbSkpe3ZhciB5PW4obCxcIi5cIittLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsbSx5KX1vLnB1c2gobSl9fXJldHVybiBvLmpvaW4oXCIgXCIpfSxlfSgpLFo9L15cXHMqXFwvXFwvLiokL2dtLEs9W1wiOlwiLFwiW1wiLFwiLlwiLFwiI1wiXTtmdW5jdGlvbiBRKGUpe3ZhciB0LG4scixvLGk9dm9pZCAwPT09ZT9wOmUsYT1pLm9wdGlvbnMsYz12b2lkIDA9PT1hP3A6YSx1PWkucGx1Z2lucyxsPXZvaWQgMD09PXU/aDp1LGQ9bmV3IHMoYyksZj1bXSxtPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7aWYodCl0cnl7ZSh0K1wifVwiKX1jYXRjaChlKXt9fXJldHVybiBmdW5jdGlvbihuLHIsbyxzLGksYSxjLHUsbCxkKXtzd2l0Y2gobil7Y2FzZSAxOmlmKDA9PT1sJiY2ND09PXIuY2hhckNvZGVBdCgwKSlyZXR1cm4gZShyK1wiO1wiKSxcIlwiO2JyZWFrO2Nhc2UgMjppZigwPT09dSlyZXR1cm4gcitcIi8qfCovXCI7YnJlYWs7Y2FzZSAzOnN3aXRjaCh1KXtjYXNlIDEwMjpjYXNlIDExMjpyZXR1cm4gZShvWzBdK3IpLFwiXCI7ZGVmYXVsdDpyZXR1cm4gcisoMD09PWQ/XCIvKnwqL1wiOlwiXCIpfWNhc2UtMjpyLnNwbGl0KFwiLyp8Ki99XCIpLmZvckVhY2godCl9fX0oKGZ1bmN0aW9uKGUpe2YucHVzaChlKX0pKSx5PWZ1bmN0aW9uKGUscixzKXtyZXR1cm4gMD09PXImJi0xIT09Sy5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIHYoZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShaLFwiXCIpLHU9cyYmaT9pK1wiIFwiK3MrXCIgeyBcIitjK1wiIH1cIjpjO3JldHVybiB0PWEsbj1zLHI9bmV3IFJlZ0V4cChcIlxcXFxcIituK1wiXFxcXGJcIixcImdcIiksbz1uZXcgUmVnRXhwKFwiKFxcXFxcIituK1wiXFxcXGIpezIsfVwiKSxkKGl8fCFzP1wiXCI6cyx1KX1yZXR1cm4gZC51c2UoW10uY29uY2F0KGwsW2Z1bmN0aW9uKGUsdCxvKXsyPT09ZSYmby5sZW5ndGgmJm9bMF0ubGFzdEluZGV4T2Yobik+MCYmKG9bMF09b1swXS5yZXBsYWNlKHIseSkpfSxtLGZ1bmN0aW9uKGUpe2lmKC0yPT09ZSl7dmFyIHQ9ZjtyZXR1cm4gZj1bXSx0fX1dKSksdi5oYXNoPWwubGVuZ3RoP2wucmVkdWNlKChmdW5jdGlvbihlLHQpe3JldHVybiB0Lm5hbWV8fF8oMTUpLCQoZSx0Lm5hbWUpfSksNTM4MSkudG9TdHJpbmcoKTpcIlwiLHZ9dmFyIGVlPXIuY3JlYXRlQ29udGV4dCgpLHRlPWVlLkNvbnN1bWVyLG5lPXIuY3JlYXRlQ29udGV4dCgpLHJlPShuZS5Db25zdW1lcixuZXcgTCksb2U9USgpO2Z1bmN0aW9uIHNlKCl7cmV0dXJuIG4udXNlQ29udGV4dChlZSl8fHJlfWZ1bmN0aW9uIGllKCl7cmV0dXJuIG4udXNlQ29udGV4dChuZSl8fG9lfWZ1bmN0aW9uIGFlKGUpe3ZhciB0PW4udXNlU3RhdGUoZS5zdHlsaXNQbHVnaW5zKSxzPXRbMF0saT10WzFdLGE9c2UoKSxjPW4udXNlTWVtbygoZnVuY3Rpb24oKXt2YXIgdD1hO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksdT1uLnVzZU1lbW8oKGZ1bmN0aW9uKCl7cmV0dXJuIFEoe29wdGlvbnM6e3ByZWZpeDohZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXN9LHBsdWdpbnM6c30pfSksW2UuZGlzYWJsZVZlbmRvclByZWZpeGVzLHNdKTtyZXR1cm4gbi51c2VFZmZlY3QoKGZ1bmN0aW9uKCl7byhzLGUuc3R5bGlzUGx1Z2lucyl8fGkoZS5zdHlsaXNQbHVnaW5zKX0pLFtlLnN0eWxpc1BsdWdpbnNdKSxyLmNyZWF0ZUVsZW1lbnQoZWUuUHJvdmlkZXIse3ZhbHVlOmN9LHIuY3JlYXRlRWxlbWVudChuZS5Qcm92aWRlcix7dmFsdWU6dX0sXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9yLkNoaWxkcmVuLm9ubHkoZS5jaGlsZHJlbik6ZS5jaGlsZHJlbikpfXZhciBjZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt2YXIgbj10aGlzO3RoaXMuaW5qZWN0PWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9b2UpO3ZhciByPW4ubmFtZSt0Lmhhc2g7ZS5oYXNOYW1lRm9ySWQobi5pZCxyKXx8ZS5pbnNlcnRSdWxlcyhuLmlkLHIsdChuLnJ1bGVzLHIsXCJAa2V5ZnJhbWVzXCIpKX0sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBfKDEyLFN0cmluZyhuLm5hbWUpKX0sdGhpcy5uYW1lPWUsdGhpcy5pZD1cInNjLWtleWZyYW1lcy1cIitlLHRoaXMucnVsZXM9dH1yZXR1cm4gZS5wcm90b3R5cGUuZ2V0TmFtZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9b2UpLHRoaXMubmFtZStlLmhhc2h9LGV9KCksdWU9LyhbQS1aXSkvLGxlPS8oW0EtWl0pL2csZGU9L15tcy0vLGhlPWZ1bmN0aW9uKGUpe3JldHVyblwiLVwiK2UudG9Mb3dlckNhc2UoKX07ZnVuY3Rpb24gcGUoZSl7cmV0dXJuIHVlLnRlc3QoZSk/ZS5yZXBsYWNlKGxlLGhlKS5yZXBsYWNlKGRlLFwiLW1zLVwiKTplfXZhciBmZT1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfHxcIlwiPT09ZX07ZnVuY3Rpb24gbWUoZSxuLHIsbyl7aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciBzLGE9W10sYz0wLHU9ZS5sZW5ndGg7Yzx1O2MrPTEpXCJcIiE9PShzPW1lKGVbY10sbixyLG8pKSYmKEFycmF5LmlzQXJyYXkocyk/YS5wdXNoLmFwcGx5KGEscyk6YS5wdXNoKHMpKTtyZXR1cm4gYX1pZihmZShlKSlyZXR1cm5cIlwiO2lmKHkoZSkpcmV0dXJuXCIuXCIrZS5zdHlsZWRDb21wb25lbnRJZDtpZihmKGUpKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZihoPWUpfHxoLnByb3RvdHlwZSYmaC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudHx8IW4pcmV0dXJuIGU7dmFyIGw9ZShuKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ0LmlzRWxlbWVudChsKSYmY29uc29sZS53YXJuKG0oZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxtZShsLG4scixvKX12YXIgaDtyZXR1cm4gZSBpbnN0YW5jZW9mIGNlP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOmQoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGEgaW4gdCl0Lmhhc093blByb3BlcnR5KGEpJiYhZmUodFthXSkmJihBcnJheS5pc0FycmF5KHRbYV0pJiZ0W2FdLmlzQ3NzfHxmKHRbYV0pP3MucHVzaChwZShhKStcIjpcIix0W2FdLFwiO1wiKTpkKHRbYV0pP3MucHVzaC5hcHBseShzLGUodFthXSxhKSk6cy5wdXNoKHBlKGEpK1wiOiBcIisocj1hLG51bGw9PShvPXRbYV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIGk/U3RyaW5nKG8pLnRyaW0oKTpvK1wicHhcIikrXCI7XCIpKTtyZXR1cm4gbj9bbitcIiB7XCJdLmNvbmNhdChzLFtcIn1cIl0pOnN9KGUpOmUudG9TdHJpbmcoKX12YXIgeWU9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJihlLmlzQ3NzPSEwKSxlfTtmdW5jdGlvbiB2ZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGYoZSl8fGQoZSk/eWUobWUobChoLFtlXS5jb25jYXQobikpKSk6MD09PW4ubGVuZ3RoJiYxPT09ZS5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBlWzBdP2U6eWUobWUobChlLG4pKSl9dmFyIGdlPS9pbnZhbGlkIGhvb2sgY2FsbC9pLFNlPW5ldyBTZXQsd2U9ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgcj1cIlRoZSBjb21wb25lbnQgXCIrZSsodD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIikrXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5Zb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuVG8gcmVzb2x2ZSB0aGlzIG9ubHkgY3JlYXRlIG5ldyBTdHlsZWRDb21wb25lbnRzIG91dHNpZGUgb2YgYW55IHJlbmRlciBtZXRob2QgYW5kIGZ1bmN0aW9uIGNvbXBvbmVudC5cIixvPWNvbnNvbGUuZXJyb3I7dHJ5e3ZhciBzPSEwO2NvbnNvbGUuZXJyb3I9ZnVuY3Rpb24oZSl7aWYoZ2UudGVzdChlKSlzPSExLFNlLmRlbGV0ZShyKTtlbHNle2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCksaT0xO2k8dDtpKyspbltpLTFdPWFyZ3VtZW50c1tpXTtvLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKX19LG4udXNlUmVmKCkscyYmIVNlLmhhcyhyKSYmKGNvbnNvbGUud2FybihyKSxTZS5hZGQocikpfWNhdGNoKGUpe2dlLnRlc3QoZS5tZXNzYWdlKSYmU2UuZGVsZXRlKHIpfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1vfX19LEVlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49cCksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LGJlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csX2U9LyheLXwtJCkvZztmdW5jdGlvbiBOZShlKXtyZXR1cm4gZS5yZXBsYWNlKGJlLFwiLVwiKS5yZXBsYWNlKF9lLFwiXCIpfXZhciBDZT1mdW5jdGlvbihlKXtyZXR1cm4gSChXKGUpPj4+MCl9O2Z1bmN0aW9uIEFlKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYoXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8ZS5jaGFyQXQoMCk9PT1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpKX12YXIgSWU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZXx8XCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lJiYhQXJyYXkuaXNBcnJheShlKX0sUGU9ZnVuY3Rpb24oZSl7cmV0dXJuXCJfX3Byb3RvX19cIiE9PWUmJlwiY29uc3RydWN0b3JcIiE9PWUmJlwicHJvdG90eXBlXCIhPT1lfTtmdW5jdGlvbiBPZShlLHQsbil7dmFyIHI9ZVtuXTtJZSh0KSYmSWUocik/eGUocix0KTplW25dPXR9ZnVuY3Rpb24geGUoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO2Zvcih2YXIgbz0wLHM9bjtvPHMubGVuZ3RoO28rKyl7dmFyIGk9c1tvXTtpZihJZShpKSlmb3IodmFyIGEgaW4gaSlQZShhKSYmT2UoZSxpW2FdLGEpfXJldHVybiBlfXZhciBSZT1yLmNyZWF0ZUNvbnRleHQoKSxEZT1SZS5Db25zdW1lcixUZT17fTtmdW5jdGlvbiBqZShlLHQsbyl7dmFyIHM9eShlKSxpPSFBZShlKSxsPXQuYXR0cnMsZD12b2lkIDA9PT1sP2g6bCx2PXQuY29tcG9uZW50SWQsZz12b2lkIDA9PT12P2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOk5lKGUpO1RlW25dPShUZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK0NlKFwiNS4zLjlcIituK1RlW25dKTtyZXR1cm4gdD90K1wiLVwiK3I6cn0odC5kaXNwbGF5TmFtZSx0LnBhcmVudENvbXBvbmVudElkKTp2LFM9dC5kaXNwbGF5TmFtZSx3PXZvaWQgMD09PVM/ZnVuY3Rpb24oZSl7cmV0dXJuIEFlKGUpP1wic3R5bGVkLlwiK2U6XCJTdHlsZWQoXCIrbShlKStcIilcIn0oZSk6UyxFPXQuZGlzcGxheU5hbWUmJnQuY29tcG9uZW50SWQ/TmUodC5kaXNwbGF5TmFtZSkrXCItXCIrdC5jb21wb25lbnRJZDp0LmNvbXBvbmVudElkfHxnLGI9cyYmZS5hdHRycz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuYXR0cnMsZCkuZmlsdGVyKEJvb2xlYW4pOmQsXz10LnNob3VsZEZvcndhcmRQcm9wO3MmJmUuc2hvdWxkRm9yd2FyZFByb3AmJihfPXQuc2hvdWxkRm9yd2FyZFByb3A/ZnVuY3Rpb24obixyLG8pe3JldHVybiBlLnNob3VsZEZvcndhcmRQcm9wKG4scixvKSYmdC5zaG91bGRGb3J3YXJkUHJvcChuLHIsbyl9OmUuc2hvdWxkRm9yd2FyZFByb3ApO3ZhciBOLEM9bmV3IFgobyxFLHM/ZS5jb21wb25lbnRTdHlsZTp2b2lkIDApLEE9Qy5pc1N0YXRpYyYmMD09PWQubGVuZ3RoLEk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9ZS5hdHRycyxpPWUuY29tcG9uZW50U3R5bGUsYz1lLmRlZmF1bHRQcm9wcyxsPWUuZm9sZGVkQ29tcG9uZW50SWRzLGQ9ZS5zaG91bGRGb3J3YXJkUHJvcCxoPWUuc3R5bGVkQ29tcG9uZW50SWQsbT1lLnRhcmdldDtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZuLnVzZURlYnVnVmFsdWUoaCk7dmFyIHk9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPXApO3ZhciByPXUoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBmKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShFZSh0LG4udXNlQ29udGV4dChSZSksYyl8fHAsdCxzKSx2PXlbMF0sZz15WzFdLFM9ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIHM9c2UoKSxpPWllKCksYT10P2UuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMocCxzLGkpOmUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMocixzLGkpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJm4udXNlRGVidWdWYWx1ZShhKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYhdCYmbyYmbyhhKSxhfShpLG8sdixcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP2Uud2FyblRvb01hbnlDbGFzc2VzOnZvaWQgMCksdz1yLEU9Zy4kYXN8fHQuJGFzfHxnLmFzfHx0LmFzfHxtLGI9QWUoRSksXz1nIT09dD91KHt9LHQse30sZyk6dCxOPXt9O2Zvcih2YXIgQyBpbiBfKVwiJFwiIT09Q1swXSYmXCJhc1wiIT09QyYmKFwiZm9yd2FyZGVkQXNcIj09PUM/Ti5hcz1fW0NdOihkP2QoQyxhLEUpOiFifHxhKEMpKSYmKE5bQ109X1tDXSkpO3JldHVybiB0LnN0eWxlJiZnLnN0eWxlIT09dC5zdHlsZSYmKE4uc3R5bGU9dSh7fSx0LnN0eWxlLHt9LGcuc3R5bGUpKSxOLmNsYXNzTmFtZT1BcnJheS5wcm90b3R5cGUuY29uY2F0KGwsaCxTIT09aD9TOm51bGwsdC5jbGFzc05hbWUsZy5jbGFzc05hbWUpLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKSxOLnJlZj13LG4uY3JlYXRlRWxlbWVudChFLE4pfShOLGUsdCxBKX07cmV0dXJuIEkuZGlzcGxheU5hbWU9dywoTj1yLmZvcndhcmRSZWYoSSkpLmF0dHJzPWIsTi5jb21wb25lbnRTdHlsZT1DLE4uZGlzcGxheU5hbWU9dyxOLnNob3VsZEZvcndhcmRQcm9wPV8sTi5mb2xkZWRDb21wb25lbnRJZHM9cz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuZm9sZGVkQ29tcG9uZW50SWRzLGUuc3R5bGVkQ29tcG9uZW50SWQpOmgsTi5zdHlsZWRDb21wb25lbnRJZD1FLE4udGFyZ2V0PXM/ZS50YXJnZXQ6ZSxOLndpdGhDb21wb25lbnQ9ZnVuY3Rpb24oZSl7dmFyIG49dC5jb21wb25lbnRJZCxyPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLG89e30scz1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8cy5sZW5ndGg7cisrKW49c1tyXSx0LmluZGV4T2Yobik+PTB8fChvW25dPWVbbl0pO3JldHVybiBvfSh0LFtcImNvbXBvbmVudElkXCJdKSxzPW4mJm4rXCItXCIrKEFlKGUpP2U6TmUobShlKSkpO3JldHVybiBqZShlLHUoe30scix7YXR0cnM6Yixjb21wb25lbnRJZDpzfSksbyl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOLFwiZGVmYXVsdFByb3BzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHN9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM9cz94ZSh7fSxlLmRlZmF1bHRQcm9wcyx0KTp0fX0pLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJih3ZSh3LEUpLE4ud2FyblRvb01hbnlDbGFzc2VzPWZ1bmN0aW9uKGUsdCl7dmFyIG49e30scj0hMTtyZXR1cm4gZnVuY3Rpb24obyl7aWYoIXImJihuW29dPSEwLE9iamVjdC5rZXlzKG4pLmxlbmd0aD49MjAwKSl7dmFyIHM9dD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIjtjb25zb2xlLndhcm4oXCJPdmVyIDIwMCBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgXCIrZStzK1wiLlxcbkNvbnNpZGVyIHVzaW5nIHRoZSBhdHRycyBtZXRob2QsIHRvZ2V0aGVyIHdpdGggYSBzdHlsZSBvYmplY3QgZm9yIGZyZXF1ZW50bHkgY2hhbmdlZCBzdHlsZXMuXFxuRXhhbXBsZTpcXG4gIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4gICAgc3R5bGU6IHtcXG4gICAgICBiYWNrZ3JvdW5kOiBwcm9wcy5iYWNrZ3JvdW5kLFxcbiAgICB9LFxcbiAgfSkpYHdpZHRoOiAxMDAlO2BcXG5cXG4gIDxDb21wb25lbnQgLz5cIikscj0hMCxuPXt9fX19KHcsRSkpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOLFwidG9TdHJpbmdcIix7dmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIi5cIitOLnN0eWxlZENvbXBvbmVudElkfX0pLGkmJmMoTixlLHthdHRyczohMCxjb21wb25lbnRTdHlsZTohMCxkaXNwbGF5TmFtZTohMCxmb2xkZWRDb21wb25lbnRJZHM6ITAsc2hvdWxkRm9yd2FyZFByb3A6ITAsc3R5bGVkQ29tcG9uZW50SWQ6ITAsdGFyZ2V0OiEwLHdpdGhDb21wb25lbnQ6ITB9KSxOfXZhciBrZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gZShuLHIsbyl7aWYodm9pZCAwPT09byYmKG89cCksIXQuaXNWYWxpZEVsZW1lbnRUeXBlKHIpKXJldHVybiBfKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiBuKHIsbyx2ZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIGUobixyLHUoe30sbyx7fSx0KSl9LHMuYXR0cnM9ZnVuY3Rpb24odCl7cmV0dXJuIGUobixyLHUoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLHQpLmZpbHRlcihCb29sZWFuKX0pKX0sc30oamUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtrZVtlXT1rZShlKX0pKTt2YXIgVmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPVUoZSksTC5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrMSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXIobWUodGhpcy5ydWxlcyx0LG4scikuam9pbihcIlwiKSxcIlwiKSxzPXRoaXMuY29tcG9uZW50SWQrZTtuLmluc2VydFJ1bGVzKHMscyxvKX0sdC5yZW1vdmVTdHlsZXM9ZnVuY3Rpb24oZSx0KXt0LmNsZWFyUnVsZXModGhpcy5jb21wb25lbnRJZCtlKX0sdC5yZW5kZXJTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7ZT4yJiZMLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCtlKSx0aGlzLnJlbW92ZVN0eWxlcyhlLG4pLHRoaXMuY3JlYXRlU3R5bGVzKGUsdCxuLHIpfSxlfSgpLE1lPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49aygpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyx2Kyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjlcIiddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKStcIj5cIit0K1wiPC9zdHlsZT5cIn0sdGhpcy5nZXRTdHlsZVRhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWFsZWQ/XygyKTplLl9lbWl0U2hlZXRDU1MoKX0sdGhpcy5nZXRTdHlsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtpZihlLnNlYWxlZClyZXR1cm4gXygyKTt2YXIgbj0oKHQ9e30pW3ZdPVwiXCIsdFtcImRhdGEtc3R5bGVkLXZlcnNpb25cIl09XCI1LjMuOVwiLHQuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e19faHRtbDplLmluc3RhbmNlLnRvU3RyaW5nKCl9LHQpLG89aygpO3JldHVybiBvJiYobi5ub25jZT1vKSxbci5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix1KHt9LG4se2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IEwoe2lzU2VydmVyOiEwfSksdGhpcy5zZWFsZWQ9ITF9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY29sbGVjdFN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZWFsZWQ/XygyKTpyLmNyZWF0ZUVsZW1lbnQoYWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSx0LmludGVybGVhdmVXaXRoTm9kZVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gXygzKX0sZX0oKSxCZT17U3R5bGVTaGVldDpMLG1hc3RlclNoZWV0OnJlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInRlc3RcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl18fDAsMT09PXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSs9MSksZXhwb3J0cy5TZXJ2ZXJTdHlsZVNoZWV0PU1lLGV4cG9ydHMuU3R5bGVTaGVldENvbnN1bWVyPXRlLGV4cG9ydHMuU3R5bGVTaGVldENvbnRleHQ9ZWUsZXhwb3J0cy5TdHlsZVNoZWV0TWFuYWdlcj1hZSxleHBvcnRzLlRoZW1lQ29uc3VtZXI9RGUsZXhwb3J0cy5UaGVtZUNvbnRleHQ9UmUsZXhwb3J0cy5UaGVtZVByb3ZpZGVyPWZ1bmN0aW9uKGUpe3ZhciB0PW4udXNlQ29udGV4dChSZSksbz1uLnVzZU1lbW8oKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYoIWUpcmV0dXJuIF8oMTQpO2lmKGYoZSkpe3ZhciBuPWUodCk7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8bnVsbCE9PW4mJiFBcnJheS5pc0FycmF5KG4pJiZcIm9iamVjdFwiPT10eXBlb2Ygbj9uOl8oNyl9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSl8fFwib2JqZWN0XCIhPXR5cGVvZiBlP18oOCk6dD91KHt9LHQse30sZSk6ZX0oZS50aGVtZSx0KX0pLFtlLnRoZW1lLHRdKTtyZXR1cm4gZS5jaGlsZHJlbj9yLmNyZWF0ZUVsZW1lbnQoUmUuUHJvdmlkZXIse3ZhbHVlOm99LGUuY2hpbGRyZW4pOm51bGx9LGV4cG9ydHMuX19QUklWQVRFX189QmUsZXhwb3J0cy5jcmVhdGVHbG9iYWxTdHlsZT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxvPW5ldyBBcnJheSh0PjE/dC0xOjApLHM9MTtzPHQ7cysrKW9bcy0xXT1hcmd1bWVudHNbc107dmFyIGk9dmUuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobykpLGE9XCJzYy1nbG9iYWwtXCIrQ2UoSlNPTi5zdHJpbmdpZnkoaSkpLGM9bmV3IFZlKGksYSk7ZnVuY3Rpb24gbChlKXt2YXIgdD1zZSgpLG89aWUoKSxzPW4udXNlQ29udGV4dChSZSksdT1uLnVzZVJlZih0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmZCh1LGUsdCxzLG8pLG4udXNlTGF5b3V0RWZmZWN0KChmdW5jdGlvbigpe2lmKCF0LnNlcnZlcilyZXR1cm4gZCh1LGUsdCxzLG8pLGZ1bmN0aW9uKCl7cmV0dXJuIGMucmVtb3ZlU3R5bGVzKHUsdCl9fSksW3UsZSx0LHMsb10pLG51bGx9ZnVuY3Rpb24gZChlLHQsbixyLG8pe2lmKGMuaXNTdGF0aWMpYy5yZW5kZXJTdHlsZXMoZSx3LG4sbyk7ZWxzZXt2YXIgcz11KHt9LHQse3RoZW1lOkVlKHQscixsLmRlZmF1bHRQcm9wcyl9KTtjLnJlbmRlclN0eWxlcyhlLHMsbixvKX19cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmd2UoYSksci5tZW1vKGwpfSxleHBvcnRzLmNzcz12ZSxleHBvcnRzLmRlZmF1bHQ9a2UsZXhwb3J0cy5pc1N0eWxlZENvbXBvbmVudD15LGV4cG9ydHMua2V5ZnJhbWVzPWZ1bmN0aW9uKGUpe1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0JiZjb25zb2xlLndhcm4oXCJga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC5cIik7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPXZlLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KG4pKS5qb2luKFwiXCIpLHM9Q2Uobyk7cmV0dXJuIG5ldyBjZShzLG8pfSxleHBvcnRzLnVzZVRoZW1lPWZ1bmN0aW9uKCl7cmV0dXJuIG4udXNlQ29udGV4dChSZSl9LGV4cG9ydHMudmVyc2lvbj1cIjUuMy45XCIsZXhwb3J0cy53aXRoVGhlbWU9ZnVuY3Rpb24oZSl7dmFyIHQ9ci5mb3J3YXJkUmVmKChmdW5jdGlvbih0LG8pe3ZhciBzPW4udXNlQ29udGV4dChSZSksaT1lLmRlZmF1bHRQcm9wcyxhPUVlKHQscyxpKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1hJiZjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyttKGUpKydcIicpLHIuY3JlYXRlRWxlbWVudChlLHUoe30sdCx7dGhlbWU6YSxyZWY6b30pKX0pKTtyZXR1cm4gYyh0LGUpLHQuZGlzcGxheU5hbWU9XCJXaXRoVGhlbWUoXCIrbShlKStcIilcIix0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuY2pzLmpzLm1hcFxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb21wb3NlID0gZXhwb3J0cy5zeXN0ZW0gPSBleHBvcnRzLmNyZWF0ZVN0eWxlRnVuY3Rpb24gPSBleHBvcnRzLmNyZWF0ZVBhcnNlciA9IGV4cG9ydHMuZ2V0ID0gZXhwb3J0cy5tZXJnZSA9IHZvaWQgMDtcblxudmFyIF9vYmplY3RBc3NpZ24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKGEsIGIpIHtcbiAgdmFyIHJlc3VsdCA9ICgwLCBfb2JqZWN0QXNzaWduW1wiZGVmYXVsdFwiXSkoe30sIGEsIGIpO1xuXG4gIGZvciAodmFyIGtleSBpbiBhKSB7XG4gICAgdmFyIF9hc3NpZ247XG5cbiAgICBpZiAoIWFba2V5XSB8fCB0eXBlb2YgYltrZXldICE9PSAnb2JqZWN0JykgY29udGludWU7XG4gICAgKDAsIF9vYmplY3RBc3NpZ25bXCJkZWZhdWx0XCJdKShyZXN1bHQsIChfYXNzaWduID0ge30sIF9hc3NpZ25ba2V5XSA9ICgwLCBfb2JqZWN0QXNzaWduW1wiZGVmYXVsdFwiXSkoYVtrZXldLCBiW2tleV0pLCBfYXNzaWduKSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTsgLy8gc29ydCBvYmplY3QtdmFsdWUgcmVzcG9uc2l2ZSBzdHlsZXNcblxuXG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG5cbnZhciBzb3J0ID0gZnVuY3Rpb24gc29ydChvYmopIHtcbiAgdmFyIG5leHQgPSB7fTtcbiAgT2JqZWN0LmtleXMob2JqKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiLCB1bmRlZmluZWQsIHtcbiAgICAgIG51bWVyaWM6IHRydWUsXG4gICAgICBzZW5zaXRpdml0eTogJ2Jhc2UnXG4gICAgfSk7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIG5leHRba2V5XSA9IG9ialtrZXldO1xuICB9KTtcbiAgcmV0dXJuIG5leHQ7XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGJyZWFrcG9pbnRzOiBbNDAsIDUyLCA2NF0ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIG4gKyAnZW0nO1xuICB9KVxufTtcblxudmFyIGNyZWF0ZU1lZGlhUXVlcnkgPSBmdW5jdGlvbiBjcmVhdGVNZWRpYVF1ZXJ5KG4pIHtcbiAgcmV0dXJuIFwiQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogXCIgKyBuICsgXCIpXCI7XG59O1xuXG52YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShuLCBzY2FsZSkge1xuICByZXR1cm4gZ2V0KHNjYWxlLCBuLCBuKTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbiBnZXQob2JqLCBrZXksIGRlZiwgcCwgdW5kZWYpIHtcbiAga2V5ID0ga2V5ICYmIGtleS5zcGxpdCA/IGtleS5zcGxpdCgnLicpIDogW2tleV07XG5cbiAgZm9yIChwID0gMDsgcCA8IGtleS5sZW5ndGg7IHArKykge1xuICAgIG9iaiA9IG9iaiA/IG9ialtrZXlbcF1dIDogdW5kZWY7XG4gIH1cblxuICByZXR1cm4gb2JqID09PSB1bmRlZiA/IGRlZiA6IG9iajtcbn07XG5cbmV4cG9ydHMuZ2V0ID0gZ2V0O1xuXG52YXIgY3JlYXRlUGFyc2VyID0gZnVuY3Rpb24gY3JlYXRlUGFyc2VyKGNvbmZpZykge1xuICB2YXIgY2FjaGUgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBmdW5jdGlvbiBwYXJzZShwcm9wcykge1xuICAgIHZhciBzdHlsZXMgPSB7fTtcbiAgICB2YXIgc2hvdWxkU29ydCA9IGZhbHNlO1xuICAgIHZhciBpc0NhY2hlRGlzYWJsZWQgPSBwcm9wcy50aGVtZSAmJiBwcm9wcy50aGVtZS5kaXNhYmxlU3R5bGVkU3lzdGVtQ2FjaGU7XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmICghY29uZmlnW2tleV0pIGNvbnRpbnVlO1xuICAgICAgdmFyIHN4ID0gY29uZmlnW2tleV07XG4gICAgICB2YXIgcmF3ID0gcHJvcHNba2V5XTtcbiAgICAgIHZhciBzY2FsZSA9IGdldChwcm9wcy50aGVtZSwgc3guc2NhbGUsIHN4LmRlZmF1bHRzKTtcblxuICAgICAgaWYgKHR5cGVvZiByYXcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNhY2hlLmJyZWFrcG9pbnRzID0gIWlzQ2FjaGVEaXNhYmxlZCAmJiBjYWNoZS5icmVha3BvaW50cyB8fCBnZXQocHJvcHMudGhlbWUsICdicmVha3BvaW50cycsIGRlZmF1bHRzLmJyZWFrcG9pbnRzKTtcblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgICAgY2FjaGUubWVkaWEgPSAhaXNDYWNoZURpc2FibGVkICYmIGNhY2hlLm1lZGlhIHx8IFtudWxsXS5jb25jYXQoY2FjaGUuYnJlYWtwb2ludHMubWFwKGNyZWF0ZU1lZGlhUXVlcnkpKTtcbiAgICAgICAgICBzdHlsZXMgPSBtZXJnZShzdHlsZXMsIHBhcnNlUmVzcG9uc2l2ZVN0eWxlKGNhY2hlLm1lZGlhLCBzeCwgc2NhbGUsIHJhdywgcHJvcHMpKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYXcgIT09IG51bGwpIHtcbiAgICAgICAgICBzdHlsZXMgPSBtZXJnZShzdHlsZXMsIHBhcnNlUmVzcG9uc2l2ZU9iamVjdChjYWNoZS5icmVha3BvaW50cywgc3gsIHNjYWxlLCByYXcsIHByb3BzKSk7XG4gICAgICAgICAgc2hvdWxkU29ydCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgKDAsIF9vYmplY3RBc3NpZ25bXCJkZWZhdWx0XCJdKShzdHlsZXMsIHN4KHJhdywgc2NhbGUsIHByb3BzKSk7XG4gICAgfSAvLyBzb3J0IG9iamVjdC1iYXNlZCByZXNwb25zaXZlIHN0eWxlc1xuXG5cbiAgICBpZiAoc2hvdWxkU29ydCkge1xuICAgICAgc3R5bGVzID0gc29ydChzdHlsZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZXM7XG4gIH07XG5cbiAgcGFyc2UuY29uZmlnID0gY29uZmlnO1xuICBwYXJzZS5wcm9wTmFtZXMgPSBPYmplY3Qua2V5cyhjb25maWcpO1xuICBwYXJzZS5jYWNoZSA9IGNhY2hlO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbmZpZykuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIGsgIT09ICdjb25maWcnO1xuICB9KTtcblxuICBpZiAoa2V5cy5sZW5ndGggPiAxKSB7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBfY3JlYXRlUGFyc2VyO1xuXG4gICAgICBwYXJzZVtrZXldID0gY3JlYXRlUGFyc2VyKChfY3JlYXRlUGFyc2VyID0ge30sIF9jcmVhdGVQYXJzZXJba2V5XSA9IGNvbmZpZ1trZXldLCBfY3JlYXRlUGFyc2VyKSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcGFyc2U7XG59O1xuXG5leHBvcnRzLmNyZWF0ZVBhcnNlciA9IGNyZWF0ZVBhcnNlcjtcblxudmFyIHBhcnNlUmVzcG9uc2l2ZVN0eWxlID0gZnVuY3Rpb24gcGFyc2VSZXNwb25zaXZlU3R5bGUobWVkaWFRdWVyaWVzLCBzeCwgc2NhbGUsIHJhdywgX3Byb3BzKSB7XG4gIHZhciBzdHlsZXMgPSB7fTtcbiAgcmF3LnNsaWNlKDAsIG1lZGlhUXVlcmllcy5sZW5ndGgpLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgdmFyIG1lZGlhID0gbWVkaWFRdWVyaWVzW2ldO1xuICAgIHZhciBzdHlsZSA9IHN4KHZhbHVlLCBzY2FsZSwgX3Byb3BzKTtcblxuICAgIGlmICghbWVkaWEpIHtcbiAgICAgICgwLCBfb2JqZWN0QXNzaWduW1wiZGVmYXVsdFwiXSkoc3R5bGVzLCBzdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfYXNzaWduMjtcblxuICAgICAgKDAsIF9vYmplY3RBc3NpZ25bXCJkZWZhdWx0XCJdKShzdHlsZXMsIChfYXNzaWduMiA9IHt9LCBfYXNzaWduMlttZWRpYV0gPSAoMCwgX29iamVjdEFzc2lnbltcImRlZmF1bHRcIl0pKHt9LCBzdHlsZXNbbWVkaWFdLCBzdHlsZSksIF9hc3NpZ24yKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5cbnZhciBwYXJzZVJlc3BvbnNpdmVPYmplY3QgPSBmdW5jdGlvbiBwYXJzZVJlc3BvbnNpdmVPYmplY3QoYnJlYWtwb2ludHMsIHN4LCBzY2FsZSwgcmF3LCBfcHJvcHMpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiByYXcpIHtcbiAgICB2YXIgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnRzW2tleV07XG4gICAgdmFyIHZhbHVlID0gcmF3W2tleV07XG4gICAgdmFyIHN0eWxlID0gc3godmFsdWUsIHNjYWxlLCBfcHJvcHMpO1xuXG4gICAgaWYgKCFicmVha3BvaW50KSB7XG4gICAgICAoMCwgX29iamVjdEFzc2lnbltcImRlZmF1bHRcIl0pKHN0eWxlcywgc3R5bGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2Fzc2lnbjM7XG5cbiAgICAgIHZhciBtZWRpYSA9IGNyZWF0ZU1lZGlhUXVlcnkoYnJlYWtwb2ludCk7XG4gICAgICAoMCwgX29iamVjdEFzc2lnbltcImRlZmF1bHRcIl0pKHN0eWxlcywgKF9hc3NpZ24zID0ge30sIF9hc3NpZ24zW21lZGlhXSA9ICgwLCBfb2JqZWN0QXNzaWduW1wiZGVmYXVsdFwiXSkoe30sIHN0eWxlc1ttZWRpYV0sIHN0eWxlKSwgX2Fzc2lnbjMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlRnVuY3Rpb24gPSBmdW5jdGlvbiBjcmVhdGVTdHlsZUZ1bmN0aW9uKF9yZWYpIHtcbiAgdmFyIHByb3BlcnRpZXMgPSBfcmVmLnByb3BlcnRpZXMsXG4gICAgICBwcm9wZXJ0eSA9IF9yZWYucHJvcGVydHksXG4gICAgICBzY2FsZSA9IF9yZWYuc2NhbGUsXG4gICAgICBfcmVmJHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgdHJhbnNmb3JtID0gX3JlZiR0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IGdldFZhbHVlIDogX3JlZiR0cmFuc2Zvcm0sXG4gICAgICBkZWZhdWx0U2NhbGUgPSBfcmVmLmRlZmF1bHRTY2FsZTtcbiAgcHJvcGVydGllcyA9IHByb3BlcnRpZXMgfHwgW3Byb3BlcnR5XTtcblxuICB2YXIgc3ggPSBmdW5jdGlvbiBzeCh2YWx1ZSwgc2NhbGUsIF9wcm9wcykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgbiA9IHRyYW5zZm9ybSh2YWx1ZSwgc2NhbGUsIF9wcm9wcyk7XG4gICAgaWYgKG4gPT09IG51bGwpIHJldHVybjtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG47XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBzeC5zY2FsZSA9IHNjYWxlO1xuICBzeC5kZWZhdWx0cyA9IGRlZmF1bHRTY2FsZTtcbiAgcmV0dXJuIHN4O1xufTsgLy8gbmV3IHY1IEFQSVxuXG5cbmV4cG9ydHMuY3JlYXRlU3R5bGVGdW5jdGlvbiA9IGNyZWF0ZVN0eWxlRnVuY3Rpb247XG5cbnZhciBzeXN0ZW0gPSBmdW5jdGlvbiBzeXN0ZW0oYXJncykge1xuICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7XG4gICAgYXJncyA9IHt9O1xuICB9XG5cbiAgdmFyIGNvbmZpZyA9IHt9O1xuICBPYmplY3Qua2V5cyhhcmdzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgY29uZiA9IGFyZ3Nba2V5XTtcblxuICAgIGlmIChjb25mID09PSB0cnVlKSB7XG4gICAgICAvLyBzaG9ydGN1dCBkZWZpbml0aW9uXG4gICAgICBjb25maWdba2V5XSA9IGNyZWF0ZVN0eWxlRnVuY3Rpb24oe1xuICAgICAgICBwcm9wZXJ0eToga2V5LFxuICAgICAgICBzY2FsZToga2V5XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbmZpZ1trZXldID0gY29uZjtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdba2V5XSA9IGNyZWF0ZVN0eWxlRnVuY3Rpb24oY29uZik7XG4gIH0pO1xuICB2YXIgcGFyc2VyID0gY3JlYXRlUGFyc2VyKGNvbmZpZyk7XG4gIHJldHVybiBwYXJzZXI7XG59O1xuXG5leHBvcnRzLnN5c3RlbSA9IHN5c3RlbTtcblxudmFyIGNvbXBvc2UgPSBmdW5jdGlvbiBjb21wb3NlKCkge1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcnNlcnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgcGFyc2Vyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHBhcnNlcnMuZm9yRWFjaChmdW5jdGlvbiAocGFyc2VyKSB7XG4gICAgaWYgKCFwYXJzZXIgfHwgIXBhcnNlci5jb25maWcpIHJldHVybjtcbiAgICAoMCwgX29iamVjdEFzc2lnbltcImRlZmF1bHRcIl0pKGNvbmZpZywgcGFyc2VyLmNvbmZpZyk7XG4gIH0pO1xuICB2YXIgcGFyc2VyID0gY3JlYXRlUGFyc2VyKGNvbmZpZyk7XG4gIHJldHVybiBwYXJzZXI7XG59O1xuXG5leHBvcnRzLmNvbXBvc2UgPSBjb21wb3NlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmxheW91dCA9IHZvaWQgMDtcblxudmFyIF9jb3JlID0gcmVxdWlyZShcIkBzdHlsZWQtc3lzdGVtL2NvcmVcIik7XG5cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyAmJiAhaXNOYU4obik7XG59O1xuXG52YXIgZ2V0V2lkdGggPSBmdW5jdGlvbiBnZXRXaWR0aChuLCBzY2FsZSkge1xuICByZXR1cm4gKDAsIF9jb3JlLmdldCkoc2NhbGUsIG4sICFpc051bWJlcihuKSB8fCBuID4gMSA/IG4gOiBuICogMTAwICsgJyUnKTtcbn07XG5cbnZhciBjb25maWcgPSB7XG4gIHdpZHRoOiB7XG4gICAgcHJvcGVydHk6ICd3aWR0aCcsXG4gICAgc2NhbGU6ICdzaXplcycsXG4gICAgdHJhbnNmb3JtOiBnZXRXaWR0aFxuICB9LFxuICBoZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ2hlaWdodCcsXG4gICAgc2NhbGU6ICdzaXplcydcbiAgfSxcbiAgbWluV2lkdGg6IHtcbiAgICBwcm9wZXJ0eTogJ21pbldpZHRoJyxcbiAgICBzY2FsZTogJ3NpemVzJ1xuICB9LFxuICBtaW5IZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ21pbkhlaWdodCcsXG4gICAgc2NhbGU6ICdzaXplcydcbiAgfSxcbiAgbWF4V2lkdGg6IHtcbiAgICBwcm9wZXJ0eTogJ21heFdpZHRoJyxcbiAgICBzY2FsZTogJ3NpemVzJ1xuICB9LFxuICBtYXhIZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ21heEhlaWdodCcsXG4gICAgc2NhbGU6ICdzaXplcydcbiAgfSxcbiAgc2l6ZToge1xuICAgIHByb3BlcnRpZXM6IFsnd2lkdGgnLCAnaGVpZ2h0J10sXG4gICAgc2NhbGU6ICdzaXplcydcbiAgfSxcbiAgb3ZlcmZsb3c6IHRydWUsXG4gIG92ZXJmbG93WDogdHJ1ZSxcbiAgb3ZlcmZsb3dZOiB0cnVlLFxuICBkaXNwbGF5OiB0cnVlLFxuICB2ZXJ0aWNhbEFsaWduOiB0cnVlXG59O1xudmFyIGxheW91dCA9ICgwLCBfY29yZS5zeXN0ZW0pKGNvbmZpZyk7XG5leHBvcnRzLmxheW91dCA9IGxheW91dDtcbnZhciBfZGVmYXVsdCA9IGxheW91dDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuY29sb3IgPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgY29uZmlnID0ge1xuICBjb2xvcjoge1xuICAgIHByb3BlcnR5OiAnY29sb3InLFxuICAgIHNjYWxlOiAnY29sb3JzJ1xuICB9LFxuICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICBwcm9wZXJ0eTogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgc2NhbGU6ICdjb2xvcnMnXG4gIH0sXG4gIG9wYWNpdHk6IHRydWVcbn07XG5jb25maWcuYmcgPSBjb25maWcuYmFja2dyb3VuZENvbG9yO1xudmFyIGNvbG9yID0gKDAsIF9jb3JlLnN5c3RlbSkoY29uZmlnKTtcbmV4cG9ydHMuY29sb3IgPSBjb2xvcjtcbnZhciBfZGVmYXVsdCA9IGNvbG9yO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy50eXBvZ3JhcGh5ID0gdm9pZCAwO1xuXG52YXIgX2NvcmUgPSByZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vY29yZVwiKTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBmb250U2l6ZXM6IFsxMiwgMTQsIDE2LCAyMCwgMjQsIDMyLCA0OCwgNjQsIDcyXVxufTtcbnZhciBjb25maWcgPSB7XG4gIGZvbnRGYW1pbHk6IHtcbiAgICBwcm9wZXJ0eTogJ2ZvbnRGYW1pbHknLFxuICAgIHNjYWxlOiAnZm9udHMnXG4gIH0sXG4gIGZvbnRTaXplOiB7XG4gICAgcHJvcGVydHk6ICdmb250U2l6ZScsXG4gICAgc2NhbGU6ICdmb250U2l6ZXMnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuZm9udFNpemVzXG4gIH0sXG4gIGZvbnRXZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ2ZvbnRXZWlnaHQnLFxuICAgIHNjYWxlOiAnZm9udFdlaWdodHMnXG4gIH0sXG4gIGxpbmVIZWlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ2xpbmVIZWlnaHQnLFxuICAgIHNjYWxlOiAnbGluZUhlaWdodHMnXG4gIH0sXG4gIGxldHRlclNwYWNpbmc6IHtcbiAgICBwcm9wZXJ0eTogJ2xldHRlclNwYWNpbmcnLFxuICAgIHNjYWxlOiAnbGV0dGVyU3BhY2luZ3MnXG4gIH0sXG4gIHRleHRBbGlnbjogdHJ1ZSxcbiAgZm9udFN0eWxlOiB0cnVlXG59O1xudmFyIHR5cG9ncmFwaHkgPSAoMCwgX2NvcmUuc3lzdGVtKShjb25maWcpO1xuZXhwb3J0cy50eXBvZ3JhcGh5ID0gdHlwb2dyYXBoeTtcbnZhciBfZGVmYXVsdCA9IHR5cG9ncmFwaHk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmZsZXhib3ggPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgY29uZmlnID0ge1xuICBhbGlnbkl0ZW1zOiB0cnVlLFxuICBhbGlnbkNvbnRlbnQ6IHRydWUsXG4gIGp1c3RpZnlJdGVtczogdHJ1ZSxcbiAganVzdGlmeUNvbnRlbnQ6IHRydWUsXG4gIGZsZXhXcmFwOiB0cnVlLFxuICBmbGV4RGlyZWN0aW9uOiB0cnVlLFxuICAvLyBpdGVtXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4QmFzaXM6IHRydWUsXG4gIGp1c3RpZnlTZWxmOiB0cnVlLFxuICBhbGlnblNlbGY6IHRydWUsXG4gIG9yZGVyOiB0cnVlXG59O1xudmFyIGZsZXhib3ggPSAoMCwgX2NvcmUuc3lzdGVtKShjb25maWcpO1xuZXhwb3J0cy5mbGV4Ym94ID0gZmxleGJveDtcbnZhciBfZGVmYXVsdCA9IGZsZXhib3g7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmdyaWQgPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHNwYWNlOiBbMCwgNCwgOCwgMTYsIDMyLCA2NCwgMTI4LCAyNTYsIDUxMl1cbn07XG52YXIgY29uZmlnID0ge1xuICBncmlkR2FwOiB7XG4gICAgcHJvcGVydHk6ICdncmlkR2FwJyxcbiAgICBzY2FsZTogJ3NwYWNlJyxcbiAgICBkZWZhdWx0U2NhbGU6IGRlZmF1bHRzLnNwYWNlXG4gIH0sXG4gIGdyaWRDb2x1bW5HYXA6IHtcbiAgICBwcm9wZXJ0eTogJ2dyaWRDb2x1bW5HYXAnLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgZ3JpZFJvd0dhcDoge1xuICAgIHByb3BlcnR5OiAnZ3JpZFJvd0dhcCcsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkQXV0b0Zsb3c6IHRydWUsXG4gIGdyaWRBdXRvQ29sdW1uczogdHJ1ZSxcbiAgZ3JpZEF1dG9Sb3dzOiB0cnVlLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiB0cnVlLFxuICBncmlkVGVtcGxhdGVSb3dzOiB0cnVlLFxuICBncmlkVGVtcGxhdGVBcmVhczogdHJ1ZSxcbiAgZ3JpZEFyZWE6IHRydWVcbn07XG52YXIgZ3JpZCA9ICgwLCBfY29yZS5zeXN0ZW0pKGNvbmZpZyk7XG5leHBvcnRzLmdyaWQgPSBncmlkO1xudmFyIF9kZWZhdWx0ID0gZ3JpZDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuYm9yZGVyID0gdm9pZCAwO1xuXG52YXIgX2NvcmUgPSByZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vY29yZVwiKTtcblxudmFyIGNvbmZpZyA9IHtcbiAgYm9yZGVyOiB7XG4gICAgcHJvcGVydHk6ICdib3JkZXInLFxuICAgIHNjYWxlOiAnYm9yZGVycydcbiAgfSxcbiAgYm9yZGVyV2lkdGg6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlcldpZHRoJyxcbiAgICBzY2FsZTogJ2JvcmRlcldpZHRocydcbiAgfSxcbiAgYm9yZGVyU3R5bGU6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlclN0eWxlJyxcbiAgICBzY2FsZTogJ2JvcmRlclN0eWxlcydcbiAgfSxcbiAgYm9yZGVyQ29sb3I6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlckNvbG9yJyxcbiAgICBzY2FsZTogJ2NvbG9ycydcbiAgfSxcbiAgYm9yZGVyUmFkaXVzOiB7XG4gICAgcHJvcGVydHk6ICdib3JkZXJSYWRpdXMnLFxuICAgIHNjYWxlOiAncmFkaWknXG4gIH0sXG4gIGJvcmRlclRvcDoge1xuICAgIHByb3BlcnR5OiAnYm9yZGVyVG9wJyxcbiAgICBzY2FsZTogJ2JvcmRlcnMnXG4gIH0sXG4gIGJvcmRlclRvcExlZnRSYWRpdXM6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlclRvcExlZnRSYWRpdXMnLFxuICAgIHNjYWxlOiAncmFkaWknXG4gIH0sXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiB7XG4gICAgcHJvcGVydHk6ICdib3JkZXJUb3BSaWdodFJhZGl1cycsXG4gICAgc2NhbGU6ICdyYWRpaSdcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlclJpZ2h0JyxcbiAgICBzY2FsZTogJ2JvcmRlcnMnXG4gIH0sXG4gIGJvcmRlckJvdHRvbToge1xuICAgIHByb3BlcnR5OiAnYm9yZGVyQm90dG9tJyxcbiAgICBzY2FsZTogJ2JvcmRlcnMnXG4gIH0sXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHtcbiAgICBwcm9wZXJ0eTogJ2JvcmRlckJvdHRvbUxlZnRSYWRpdXMnLFxuICAgIHNjYWxlOiAncmFkaWknXG4gIH0sXG4gIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiB7XG4gICAgcHJvcGVydHk6ICdib3JkZXJCb3R0b21SaWdodFJhZGl1cycsXG4gICAgc2NhbGU6ICdyYWRpaSdcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIHByb3BlcnR5OiAnYm9yZGVyTGVmdCcsXG4gICAgc2NhbGU6ICdib3JkZXJzJ1xuICB9LFxuICBib3JkZXJYOiB7XG4gICAgcHJvcGVydGllczogWydib3JkZXJMZWZ0JywgJ2JvcmRlclJpZ2h0J10sXG4gICAgc2NhbGU6ICdib3JkZXJzJ1xuICB9LFxuICBib3JkZXJZOiB7XG4gICAgcHJvcGVydGllczogWydib3JkZXJUb3AnLCAnYm9yZGVyQm90dG9tJ10sXG4gICAgc2NhbGU6ICdib3JkZXJzJ1xuICB9XG59O1xuY29uZmlnLmJvcmRlclRvcFdpZHRoID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlclRvcFdpZHRoJyxcbiAgc2NhbGU6ICdib3JkZXJXaWR0aHMnXG59O1xuY29uZmlnLmJvcmRlclRvcENvbG9yID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlclRvcENvbG9yJyxcbiAgc2NhbGU6ICdjb2xvcnMnXG59O1xuY29uZmlnLmJvcmRlclRvcFN0eWxlID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlclRvcFN0eWxlJyxcbiAgc2NhbGU6ICdib3JkZXJTdHlsZXMnXG59O1xuY29uZmlnLmJvcmRlclRvcExlZnRSYWRpdXMgPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyVG9wTGVmdFJhZGl1cycsXG4gIHNjYWxlOiAncmFkaWknXG59O1xuY29uZmlnLmJvcmRlclRvcFJpZ2h0UmFkaXVzID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlclRvcFJpZ2h0UmFkaXVzJyxcbiAgc2NhbGU6ICdyYWRpaSdcbn07XG5jb25maWcuYm9yZGVyQm90dG9tV2lkdGggPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyQm90dG9tV2lkdGgnLFxuICBzY2FsZTogJ2JvcmRlcldpZHRocydcbn07XG5jb25maWcuYm9yZGVyQm90dG9tQ29sb3IgPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyQm90dG9tQ29sb3InLFxuICBzY2FsZTogJ2NvbG9ycydcbn07XG5jb25maWcuYm9yZGVyQm90dG9tU3R5bGUgPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyQm90dG9tU3R5bGUnLFxuICBzY2FsZTogJ2JvcmRlclN0eWxlcydcbn07XG5jb25maWcuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IHtcbiAgcHJvcGVydHk6ICdib3JkZXJCb3R0b21MZWZ0UmFkaXVzJyxcbiAgc2NhbGU6ICdyYWRpaSdcbn07XG5jb25maWcuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMnLFxuICBzY2FsZTogJ3JhZGlpJ1xufTtcbmNvbmZpZy5ib3JkZXJMZWZ0V2lkdGggPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyTGVmdFdpZHRoJyxcbiAgc2NhbGU6ICdib3JkZXJXaWR0aHMnXG59O1xuY29uZmlnLmJvcmRlckxlZnRDb2xvciA9IHtcbiAgcHJvcGVydHk6ICdib3JkZXJMZWZ0Q29sb3InLFxuICBzY2FsZTogJ2NvbG9ycydcbn07XG5jb25maWcuYm9yZGVyTGVmdFN0eWxlID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlckxlZnRTdHlsZScsXG4gIHNjYWxlOiAnYm9yZGVyU3R5bGVzJ1xufTtcbmNvbmZpZy5ib3JkZXJSaWdodFdpZHRoID0ge1xuICBwcm9wZXJ0eTogJ2JvcmRlclJpZ2h0V2lkdGgnLFxuICBzY2FsZTogJ2JvcmRlcldpZHRocydcbn07XG5jb25maWcuYm9yZGVyUmlnaHRDb2xvciA9IHtcbiAgcHJvcGVydHk6ICdib3JkZXJSaWdodENvbG9yJyxcbiAgc2NhbGU6ICdjb2xvcnMnXG59O1xuY29uZmlnLmJvcmRlclJpZ2h0U3R5bGUgPSB7XG4gIHByb3BlcnR5OiAnYm9yZGVyUmlnaHRTdHlsZScsXG4gIHNjYWxlOiAnYm9yZGVyU3R5bGVzJ1xufTtcbnZhciBib3JkZXIgPSAoMCwgX2NvcmUuc3lzdGVtKShjb25maWcpO1xuZXhwb3J0cy5ib3JkZXIgPSBib3JkZXI7XG52YXIgX2RlZmF1bHQgPSBib3JkZXI7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmJhY2tncm91bmQgPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgY29uZmlnID0ge1xuICBiYWNrZ3JvdW5kOiB0cnVlLFxuICBiYWNrZ3JvdW5kSW1hZ2U6IHRydWUsXG4gIGJhY2tncm91bmRTaXplOiB0cnVlLFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IHRydWUsXG4gIGJhY2tncm91bmRSZXBlYXQ6IHRydWVcbn07XG5jb25maWcuYmdJbWFnZSA9IGNvbmZpZy5iYWNrZ3JvdW5kSW1hZ2U7XG5jb25maWcuYmdTaXplID0gY29uZmlnLmJhY2tncm91bmRTaXplO1xuY29uZmlnLmJnUG9zaXRpb24gPSBjb25maWcuYmFja2dyb3VuZFBvc2l0aW9uO1xuY29uZmlnLmJnUmVwZWF0ID0gY29uZmlnLmJhY2tncm91bmRSZXBlYXQ7XG52YXIgYmFja2dyb3VuZCA9ICgwLCBfY29yZS5zeXN0ZW0pKGNvbmZpZyk7XG5leHBvcnRzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xudmFyIF9kZWZhdWx0ID0gYmFja2dyb3VuZDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMucG9zaXRpb24gPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHNwYWNlOiBbMCwgNCwgOCwgMTYsIDMyLCA2NCwgMTI4LCAyNTYsIDUxMl1cbn07XG52YXIgY29uZmlnID0ge1xuICBwb3NpdGlvbjogdHJ1ZSxcbiAgekluZGV4OiB7XG4gICAgcHJvcGVydHk6ICd6SW5kZXgnLFxuICAgIHNjYWxlOiAnekluZGljZXMnXG4gIH0sXG4gIHRvcDoge1xuICAgIHByb3BlcnR5OiAndG9wJyxcbiAgICBzY2FsZTogJ3NwYWNlJyxcbiAgICBkZWZhdWx0U2NhbGU6IGRlZmF1bHRzLnNwYWNlXG4gIH0sXG4gIHJpZ2h0OiB7XG4gICAgcHJvcGVydHk6ICdyaWdodCcsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBib3R0b206IHtcbiAgICBwcm9wZXJ0eTogJ2JvdHRvbScsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBsZWZ0OiB7XG4gICAgcHJvcGVydHk6ICdsZWZ0JyxcbiAgICBzY2FsZTogJ3NwYWNlJyxcbiAgICBkZWZhdWx0U2NhbGU6IGRlZmF1bHRzLnNwYWNlXG4gIH1cbn07XG52YXIgcG9zaXRpb24gPSAoMCwgX2NvcmUuc3lzdGVtKShjb25maWcpO1xuZXhwb3J0cy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xudmFyIF9kZWZhdWx0ID0gcG9zaXRpb247XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLnNwYWNlID0gZXhwb3J0cy5wYWRkaW5nID0gZXhwb3J0cy5tYXJnaW4gPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIHNwYWNlOiBbMCwgNCwgOCwgMTYsIDMyLCA2NCwgMTI4LCAyNTYsIDUxMl1cbn07XG5cbnZhciBpc051bWJlciA9IGZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyAmJiAhaXNOYU4obik7XG59O1xuXG52YXIgZ2V0TWFyZ2luID0gZnVuY3Rpb24gZ2V0TWFyZ2luKG4sIHNjYWxlKSB7XG4gIGlmICghaXNOdW1iZXIobikpIHtcbiAgICByZXR1cm4gKDAsIF9jb3JlLmdldCkoc2NhbGUsIG4sIG4pO1xuICB9XG5cbiAgdmFyIGlzTmVnYXRpdmUgPSBuIDwgMDtcbiAgdmFyIGFic29sdXRlID0gTWF0aC5hYnMobik7XG4gIHZhciB2YWx1ZSA9ICgwLCBfY29yZS5nZXQpKHNjYWxlLCBhYnNvbHV0ZSwgYWJzb2x1dGUpO1xuXG4gIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIGlzTmVnYXRpdmUgPyAnLScgKyB2YWx1ZSA6IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlICogKGlzTmVnYXRpdmUgPyAtMSA6IDEpO1xufTtcblxudmFyIGNvbmZpZ3MgPSB7fTtcbmNvbmZpZ3MubWFyZ2luID0ge1xuICBtYXJnaW46IHtcbiAgICBwcm9wZXJ0eTogJ21hcmdpbicsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgdHJhbnNmb3JtOiBnZXRNYXJnaW4sXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBtYXJnaW5Ub3A6IHtcbiAgICBwcm9wZXJ0eTogJ21hcmdpblRvcCcsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgdHJhbnNmb3JtOiBnZXRNYXJnaW4sXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBtYXJnaW5SaWdodDoge1xuICAgIHByb3BlcnR5OiAnbWFyZ2luUmlnaHQnLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIHRyYW5zZm9ybTogZ2V0TWFyZ2luLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgbWFyZ2luQm90dG9tOiB7XG4gICAgcHJvcGVydHk6ICdtYXJnaW5Cb3R0b20nLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIHRyYW5zZm9ybTogZ2V0TWFyZ2luLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgbWFyZ2luTGVmdDoge1xuICAgIHByb3BlcnR5OiAnbWFyZ2luTGVmdCcsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgdHJhbnNmb3JtOiBnZXRNYXJnaW4sXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBtYXJnaW5YOiB7XG4gICAgcHJvcGVydGllczogWydtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0J10sXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgdHJhbnNmb3JtOiBnZXRNYXJnaW4sXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBtYXJnaW5ZOiB7XG4gICAgcHJvcGVydGllczogWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJ10sXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgdHJhbnNmb3JtOiBnZXRNYXJnaW4sXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9XG59O1xuY29uZmlncy5tYXJnaW4ubSA9IGNvbmZpZ3MubWFyZ2luLm1hcmdpbjtcbmNvbmZpZ3MubWFyZ2luLm10ID0gY29uZmlncy5tYXJnaW4ubWFyZ2luVG9wO1xuY29uZmlncy5tYXJnaW4ubXIgPSBjb25maWdzLm1hcmdpbi5tYXJnaW5SaWdodDtcbmNvbmZpZ3MubWFyZ2luLm1iID0gY29uZmlncy5tYXJnaW4ubWFyZ2luQm90dG9tO1xuY29uZmlncy5tYXJnaW4ubWwgPSBjb25maWdzLm1hcmdpbi5tYXJnaW5MZWZ0O1xuY29uZmlncy5tYXJnaW4ubXggPSBjb25maWdzLm1hcmdpbi5tYXJnaW5YO1xuY29uZmlncy5tYXJnaW4ubXkgPSBjb25maWdzLm1hcmdpbi5tYXJnaW5ZO1xuY29uZmlncy5wYWRkaW5nID0ge1xuICBwYWRkaW5nOiB7XG4gICAgcHJvcGVydHk6ICdwYWRkaW5nJyxcbiAgICBzY2FsZTogJ3NwYWNlJyxcbiAgICBkZWZhdWx0U2NhbGU6IGRlZmF1bHRzLnNwYWNlXG4gIH0sXG4gIHBhZGRpbmdUb3A6IHtcbiAgICBwcm9wZXJ0eTogJ3BhZGRpbmdUb3AnLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgcGFkZGluZ1JpZ2h0OiB7XG4gICAgcHJvcGVydHk6ICdwYWRkaW5nUmlnaHQnLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgcGFkZGluZ0JvdHRvbToge1xuICAgIHByb3BlcnR5OiAncGFkZGluZ0JvdHRvbScsXG4gICAgc2NhbGU6ICdzcGFjZScsXG4gICAgZGVmYXVsdFNjYWxlOiBkZWZhdWx0cy5zcGFjZVxuICB9LFxuICBwYWRkaW5nTGVmdDoge1xuICAgIHByb3BlcnR5OiAncGFkZGluZ0xlZnQnLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgcGFkZGluZ1g6IHtcbiAgICBwcm9wZXJ0aWVzOiBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCddLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfSxcbiAgcGFkZGluZ1k6IHtcbiAgICBwcm9wZXJ0aWVzOiBbJ3BhZGRpbmdUb3AnLCAncGFkZGluZ0JvdHRvbSddLFxuICAgIHNjYWxlOiAnc3BhY2UnLFxuICAgIGRlZmF1bHRTY2FsZTogZGVmYXVsdHMuc3BhY2VcbiAgfVxufTtcbmNvbmZpZ3MucGFkZGluZy5wID0gY29uZmlncy5wYWRkaW5nLnBhZGRpbmc7XG5jb25maWdzLnBhZGRpbmcucHQgPSBjb25maWdzLnBhZGRpbmcucGFkZGluZ1RvcDtcbmNvbmZpZ3MucGFkZGluZy5wciA9IGNvbmZpZ3MucGFkZGluZy5wYWRkaW5nUmlnaHQ7XG5jb25maWdzLnBhZGRpbmcucGIgPSBjb25maWdzLnBhZGRpbmcucGFkZGluZ0JvdHRvbTtcbmNvbmZpZ3MucGFkZGluZy5wbCA9IGNvbmZpZ3MucGFkZGluZy5wYWRkaW5nTGVmdDtcbmNvbmZpZ3MucGFkZGluZy5weCA9IGNvbmZpZ3MucGFkZGluZy5wYWRkaW5nWDtcbmNvbmZpZ3MucGFkZGluZy5weSA9IGNvbmZpZ3MucGFkZGluZy5wYWRkaW5nWTtcbnZhciBtYXJnaW4gPSAoMCwgX2NvcmUuc3lzdGVtKShjb25maWdzLm1hcmdpbik7XG5leHBvcnRzLm1hcmdpbiA9IG1hcmdpbjtcbnZhciBwYWRkaW5nID0gKDAsIF9jb3JlLnN5c3RlbSkoY29uZmlncy5wYWRkaW5nKTtcbmV4cG9ydHMucGFkZGluZyA9IHBhZGRpbmc7XG52YXIgc3BhY2UgPSAoMCwgX2NvcmUuY29tcG9zZSkobWFyZ2luLCBwYWRkaW5nKTtcbmV4cG9ydHMuc3BhY2UgPSBzcGFjZTtcbnZhciBfZGVmYXVsdCA9IHNwYWNlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5zaGFkb3cgPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgc2hhZG93ID0gKDAsIF9jb3JlLnN5c3RlbSkoe1xuICBib3hTaGFkb3c6IHtcbiAgICBwcm9wZXJ0eTogJ2JveFNoYWRvdycsXG4gICAgc2NhbGU6ICdzaGFkb3dzJ1xuICB9LFxuICB0ZXh0U2hhZG93OiB7XG4gICAgcHJvcGVydHk6ICd0ZXh0U2hhZG93JyxcbiAgICBzY2FsZTogJ3NoYWRvd3MnXG4gIH1cbn0pO1xuZXhwb3J0cy5zaGFkb3cgPSBzaGFkb3c7XG52YXIgX2RlZmF1bHQgPSBzaGFkb3c7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLmNzcyA9IGV4cG9ydHMucmVzcG9uc2l2ZSA9IGV4cG9ydHMuZ2V0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L2RsdlxudmFyIGdldCA9IGZ1bmN0aW9uIGdldChvYmosIGtleSwgZGVmLCBwLCB1bmRlZikge1xuICBrZXkgPSBrZXkgJiYga2V5LnNwbGl0ID8ga2V5LnNwbGl0KCcuJykgOiBba2V5XTtcblxuICBmb3IgKHAgPSAwOyBwIDwga2V5Lmxlbmd0aDsgcCsrKSB7XG4gICAgb2JqID0gb2JqID8gb2JqW2tleVtwXV0gOiB1bmRlZjtcbiAgfVxuXG4gIHJldHVybiBvYmogPT09IHVuZGVmID8gZGVmIDogb2JqO1xufTtcblxuZXhwb3J0cy5nZXQgPSBnZXQ7XG52YXIgZGVmYXVsdEJyZWFrcG9pbnRzID0gWzQwLCA1MiwgNjRdLm1hcChmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArICdlbSc7XG59KTtcbnZhciBkZWZhdWx0VGhlbWUgPSB7XG4gIHNwYWNlOiBbMCwgNCwgOCwgMTYsIDMyLCA2NCwgMTI4LCAyNTYsIDUxMl0sXG4gIGZvbnRTaXplczogWzEyLCAxNCwgMTYsIDIwLCAyNCwgMzIsIDQ4LCA2NCwgNzJdXG59O1xudmFyIGFsaWFzZXMgPSB7XG4gIGJnOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgbTogJ21hcmdpbicsXG4gIG10OiAnbWFyZ2luVG9wJyxcbiAgbXI6ICdtYXJnaW5SaWdodCcsXG4gIG1iOiAnbWFyZ2luQm90dG9tJyxcbiAgbWw6ICdtYXJnaW5MZWZ0JyxcbiAgbXg6ICdtYXJnaW5YJyxcbiAgbXk6ICdtYXJnaW5ZJyxcbiAgcDogJ3BhZGRpbmcnLFxuICBwdDogJ3BhZGRpbmdUb3AnLFxuICBwcjogJ3BhZGRpbmdSaWdodCcsXG4gIHBiOiAncGFkZGluZ0JvdHRvbScsXG4gIHBsOiAncGFkZGluZ0xlZnQnLFxuICBweDogJ3BhZGRpbmdYJyxcbiAgcHk6ICdwYWRkaW5nWSdcbn07XG52YXIgbXVsdGlwbGVzID0ge1xuICBtYXJnaW5YOiBbJ21hcmdpbkxlZnQnLCAnbWFyZ2luUmlnaHQnXSxcbiAgbWFyZ2luWTogWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJ10sXG4gIHBhZGRpbmdYOiBbJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCddLFxuICBwYWRkaW5nWTogWydwYWRkaW5nVG9wJywgJ3BhZGRpbmdCb3R0b20nXSxcbiAgc2l6ZTogWyd3aWR0aCcsICdoZWlnaHQnXVxufTtcbnZhciBzY2FsZXMgPSB7XG4gIGNvbG9yOiAnY29sb3JzJyxcbiAgYmFja2dyb3VuZENvbG9yOiAnY29sb3JzJyxcbiAgYm9yZGVyQ29sb3I6ICdjb2xvcnMnLFxuICBtYXJnaW46ICdzcGFjZScsXG4gIG1hcmdpblRvcDogJ3NwYWNlJyxcbiAgbWFyZ2luUmlnaHQ6ICdzcGFjZScsXG4gIG1hcmdpbkJvdHRvbTogJ3NwYWNlJyxcbiAgbWFyZ2luTGVmdDogJ3NwYWNlJyxcbiAgbWFyZ2luWDogJ3NwYWNlJyxcbiAgbWFyZ2luWTogJ3NwYWNlJyxcbiAgcGFkZGluZzogJ3NwYWNlJyxcbiAgcGFkZGluZ1RvcDogJ3NwYWNlJyxcbiAgcGFkZGluZ1JpZ2h0OiAnc3BhY2UnLFxuICBwYWRkaW5nQm90dG9tOiAnc3BhY2UnLFxuICBwYWRkaW5nTGVmdDogJ3NwYWNlJyxcbiAgcGFkZGluZ1g6ICdzcGFjZScsXG4gIHBhZGRpbmdZOiAnc3BhY2UnLFxuICB0b3A6ICdzcGFjZScsXG4gIHJpZ2h0OiAnc3BhY2UnLFxuICBib3R0b206ICdzcGFjZScsXG4gIGxlZnQ6ICdzcGFjZScsXG4gIGdyaWRHYXA6ICdzcGFjZScsXG4gIGdyaWRDb2x1bW5HYXA6ICdzcGFjZScsXG4gIGdyaWRSb3dHYXA6ICdzcGFjZScsXG4gIGdhcDogJ3NwYWNlJyxcbiAgY29sdW1uR2FwOiAnc3BhY2UnLFxuICByb3dHYXA6ICdzcGFjZScsXG4gIGZvbnRGYW1pbHk6ICdmb250cycsXG4gIGZvbnRTaXplOiAnZm9udFNpemVzJyxcbiAgZm9udFdlaWdodDogJ2ZvbnRXZWlnaHRzJyxcbiAgbGluZUhlaWdodDogJ2xpbmVIZWlnaHRzJyxcbiAgbGV0dGVyU3BhY2luZzogJ2xldHRlclNwYWNpbmdzJyxcbiAgYm9yZGVyOiAnYm9yZGVycycsXG4gIGJvcmRlclRvcDogJ2JvcmRlcnMnLFxuICBib3JkZXJSaWdodDogJ2JvcmRlcnMnLFxuICBib3JkZXJCb3R0b206ICdib3JkZXJzJyxcbiAgYm9yZGVyTGVmdDogJ2JvcmRlcnMnLFxuICBib3JkZXJXaWR0aDogJ2JvcmRlcldpZHRocycsXG4gIGJvcmRlclN0eWxlOiAnYm9yZGVyU3R5bGVzJyxcbiAgYm9yZGVyUmFkaXVzOiAncmFkaWknLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogJ3JhZGlpJyxcbiAgYm9yZGVyVG9wTGVmdFJhZGl1czogJ3JhZGlpJyxcbiAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6ICdyYWRpaScsXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6ICdyYWRpaScsXG4gIGJvcmRlclRvcFdpZHRoOiAnYm9yZGVyV2lkdGhzJyxcbiAgYm9yZGVyVG9wQ29sb3I6ICdjb2xvcnMnLFxuICBib3JkZXJUb3BTdHlsZTogJ2JvcmRlclN0eWxlcycsXG4gIGJvcmRlckJvdHRvbVdpZHRoOiAnYm9yZGVyV2lkdGhzJyxcbiAgYm9yZGVyQm90dG9tQ29sb3I6ICdjb2xvcnMnLFxuICBib3JkZXJCb3R0b21TdHlsZTogJ2JvcmRlclN0eWxlcycsXG4gIGJvcmRlckxlZnRXaWR0aDogJ2JvcmRlcldpZHRocycsXG4gIGJvcmRlckxlZnRDb2xvcjogJ2NvbG9ycycsXG4gIGJvcmRlckxlZnRTdHlsZTogJ2JvcmRlclN0eWxlcycsXG4gIGJvcmRlclJpZ2h0V2lkdGg6ICdib3JkZXJXaWR0aHMnLFxuICBib3JkZXJSaWdodENvbG9yOiAnY29sb3JzJyxcbiAgYm9yZGVyUmlnaHRTdHlsZTogJ2JvcmRlclN0eWxlcycsXG4gIG91dGxpbmVDb2xvcjogJ2NvbG9ycycsXG4gIGJveFNoYWRvdzogJ3NoYWRvd3MnLFxuICB0ZXh0U2hhZG93OiAnc2hhZG93cycsXG4gIHpJbmRleDogJ3pJbmRpY2VzJyxcbiAgd2lkdGg6ICdzaXplcycsXG4gIG1pbldpZHRoOiAnc2l6ZXMnLFxuICBtYXhXaWR0aDogJ3NpemVzJyxcbiAgaGVpZ2h0OiAnc2l6ZXMnLFxuICBtaW5IZWlnaHQ6ICdzaXplcycsXG4gIG1heEhlaWdodDogJ3NpemVzJyxcbiAgZmxleEJhc2lzOiAnc2l6ZXMnLFxuICBzaXplOiAnc2l6ZXMnLFxuICAvLyBzdmdcbiAgZmlsbDogJ2NvbG9ycycsXG4gIHN0cm9rZTogJ2NvbG9ycydcbn07XG5cbnZhciBwb3NpdGl2ZU9yTmVnYXRpdmUgPSBmdW5jdGlvbiBwb3NpdGl2ZU9yTmVnYXRpdmUoc2NhbGUsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8IHZhbHVlID49IDApIHtcbiAgICByZXR1cm4gZ2V0KHNjYWxlLCB2YWx1ZSwgdmFsdWUpO1xuICB9XG5cbiAgdmFyIGFic29sdXRlID0gTWF0aC5hYnModmFsdWUpO1xuICB2YXIgbiA9IGdldChzY2FsZSwgYWJzb2x1dGUsIGFic29sdXRlKTtcbiAgaWYgKHR5cGVvZiBuID09PSAnc3RyaW5nJykgcmV0dXJuICctJyArIG47XG4gIHJldHVybiBuICogLTE7XG59O1xuXG52YXIgdHJhbnNmb3JtcyA9IFsnbWFyZ2luJywgJ21hcmdpblRvcCcsICdtYXJnaW5SaWdodCcsICdtYXJnaW5Cb3R0b20nLCAnbWFyZ2luTGVmdCcsICdtYXJnaW5YJywgJ21hcmdpblknLCAndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J10ucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgdmFyIF9leHRlbmRzMjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGFjYywgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbY3Vycl0gPSBwb3NpdGl2ZU9yTmVnYXRpdmUsIF9leHRlbmRzMikpO1xufSwge30pO1xuXG52YXIgcmVzcG9uc2l2ZSA9IGZ1bmN0aW9uIHJlc3BvbnNpdmUoc3R5bGVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICB2YXIgbmV4dCA9IHt9O1xuICAgIHZhciBicmVha3BvaW50cyA9IGdldCh0aGVtZSwgJ2JyZWFrcG9pbnRzJywgZGVmYXVsdEJyZWFrcG9pbnRzKTtcbiAgICB2YXIgbWVkaWFRdWVyaWVzID0gW251bGxdLmNvbmNhdChicmVha3BvaW50cy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IFwiICsgbiArIFwiKVwiO1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBzdHlsZXNba2V5XSA9PT0gJ2Z1bmN0aW9uJyA/IHN0eWxlc1trZXldKHRoZW1lKSA6IHN0eWxlc1trZXldO1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIG5leHRba2V5XSA9IHZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5zbGljZSgwLCBtZWRpYVF1ZXJpZXMubGVuZ3RoKS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbWVkaWEgPSBtZWRpYVF1ZXJpZXNbaV07XG5cbiAgICAgICAgaWYgKCFtZWRpYSkge1xuICAgICAgICAgIG5leHRba2V5XSA9IHZhbHVlW2ldO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dFttZWRpYV0gPSBuZXh0W21lZGlhXSB8fCB7fTtcbiAgICAgICAgaWYgKHZhbHVlW2ldID09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICBuZXh0W21lZGlhXVtrZXldID0gdmFsdWVbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQ7XG4gIH07XG59O1xuXG5leHBvcnRzLnJlc3BvbnNpdmUgPSByZXNwb25zaXZlO1xuXG52YXIgY3NzID0gZnVuY3Rpb24gY3NzKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9wcyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB0aGVtZSA9IF9leHRlbmRzKHt9LCBkZWZhdWx0VGhlbWUsIHt9LCBwcm9wcy50aGVtZSB8fCBwcm9wcyk7XG5cbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIG9iaiA9IHR5cGVvZiBhcmdzID09PSAnZnVuY3Rpb24nID8gYXJncyh0aGVtZSkgOiBhcmdzO1xuICAgIHZhciBzdHlsZXMgPSByZXNwb25zaXZlKG9iaikodGhlbWUpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgICAgdmFyIHggPSBzdHlsZXNba2V5XTtcbiAgICAgIHZhciB2YWwgPSB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyA/IHgodGhlbWUpIDogeDtcblxuICAgICAgaWYgKGtleSA9PT0gJ3ZhcmlhbnQnKSB7XG4gICAgICAgIHZhciB2YXJpYW50ID0gY3NzKGdldCh0aGVtZSwgdmFsKSkodGhlbWUpO1xuICAgICAgICByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7fSwgdmFyaWFudCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gY3NzKHZhbCkodGhlbWUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3AgPSBnZXQoYWxpYXNlcywga2V5LCBrZXkpO1xuICAgICAgdmFyIHNjYWxlTmFtZSA9IGdldChzY2FsZXMsIHByb3ApO1xuICAgICAgdmFyIHNjYWxlID0gZ2V0KHRoZW1lLCBzY2FsZU5hbWUsIGdldCh0aGVtZSwgcHJvcCwge30pKTtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBnZXQodHJhbnNmb3JtcywgcHJvcCwgZ2V0KTtcbiAgICAgIHZhciB2YWx1ZSA9IHRyYW5zZm9ybShzY2FsZSwgdmFsLCB2YWwpO1xuXG4gICAgICBpZiAobXVsdGlwbGVzW3Byb3BdKSB7XG4gICAgICAgIHZhciBkaXJzID0gbXVsdGlwbGVzW3Byb3BdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlc3VsdFtkaXJzW2ldXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuZXhwb3J0cy5jc3MgPSBjc3M7XG52YXIgX2RlZmF1bHQgPSBjc3M7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jb2xvclN0eWxlID0gZXhwb3J0cy50ZXh0U3R5bGUgPSBleHBvcnRzLmJ1dHRvblN0eWxlID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLnZhcmlhbnQgPSB2b2lkIDA7XG5cbnZhciBfY29yZSA9IHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9jb3JlXCIpO1xuXG52YXIgX2NzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBzdHlsZWQtc3lzdGVtL2Nzc1wiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG52YXIgdmFyaWFudCA9IGZ1bmN0aW9uIHZhcmlhbnQoX3JlZikge1xuICB2YXIgX2NvbmZpZztcblxuICB2YXIgc2NhbGUgPSBfcmVmLnNjYWxlLFxuICAgICAgX3JlZiRwcm9wID0gX3JlZi5wcm9wLFxuICAgICAgcHJvcCA9IF9yZWYkcHJvcCA9PT0gdm9pZCAwID8gJ3ZhcmlhbnQnIDogX3JlZiRwcm9wLFxuICAgICAgX3JlZiR2YXJpYW50cyA9IF9yZWYudmFyaWFudHMsXG4gICAgICB2YXJpYW50cyA9IF9yZWYkdmFyaWFudHMgPT09IHZvaWQgMCA/IHt9IDogX3JlZiR2YXJpYW50cyxcbiAgICAgIGtleSA9IF9yZWYua2V5O1xuICB2YXIgc3g7XG5cbiAgaWYgKE9iamVjdC5rZXlzKHZhcmlhbnRzKS5sZW5ndGgpIHtcbiAgICBzeCA9IGZ1bmN0aW9uIHN4KHZhbHVlLCBzY2FsZSwgcHJvcHMpIHtcbiAgICAgIHJldHVybiAoMCwgX2Nzc1tcImRlZmF1bHRcIl0pKCgwLCBfY29yZS5nZXQpKHNjYWxlLCB2YWx1ZSwgbnVsbCkpKHByb3BzLnRoZW1lKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHN4ID0gZnVuY3Rpb24gc3godmFsdWUsIHNjYWxlKSB7XG4gICAgICByZXR1cm4gKDAsIF9jb3JlLmdldCkoc2NhbGUsIHZhbHVlLCBudWxsKTtcbiAgICB9O1xuICB9XG5cbiAgc3guc2NhbGUgPSBzY2FsZSB8fCBrZXk7XG4gIHN4LmRlZmF1bHRzID0gdmFyaWFudHM7XG4gIHZhciBjb25maWcgPSAoX2NvbmZpZyA9IHt9LCBfY29uZmlnW3Byb3BdID0gc3gsIF9jb25maWcpO1xuICB2YXIgcGFyc2VyID0gKDAsIF9jb3JlLmNyZWF0ZVBhcnNlcikoY29uZmlnKTtcbiAgcmV0dXJuIHBhcnNlcjtcbn07XG5cbmV4cG9ydHMudmFyaWFudCA9IHZhcmlhbnQ7XG52YXIgX2RlZmF1bHQgPSB2YXJpYW50O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbnZhciBidXR0b25TdHlsZSA9IHZhcmlhbnQoe1xuICBrZXk6ICdidXR0b25zJ1xufSk7XG5leHBvcnRzLmJ1dHRvblN0eWxlID0gYnV0dG9uU3R5bGU7XG52YXIgdGV4dFN0eWxlID0gdmFyaWFudCh7XG4gIGtleTogJ3RleHRTdHlsZXMnLFxuICBwcm9wOiAndGV4dFN0eWxlJ1xufSk7XG5leHBvcnRzLnRleHRTdHlsZSA9IHRleHRTdHlsZTtcbnZhciBjb2xvclN0eWxlID0gdmFyaWFudCh7XG4gIGtleTogJ2NvbG9yU3R5bGVzJyxcbiAgcHJvcDogJ2NvbG9ycydcbn0pO1xuZXhwb3J0cy5jb2xvclN0eWxlID0gY29sb3JTdHlsZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuc3R5bGUgPSBleHBvcnRzLmxlZnQgPSBleHBvcnRzLmJvdHRvbSA9IGV4cG9ydHMucmlnaHQgPSBleHBvcnRzLnRvcCA9IGV4cG9ydHMuekluZGV4ID0gZXhwb3J0cy5iYWNrZ3JvdW5kUmVwZWF0ID0gZXhwb3J0cy5iYWNrZ3JvdW5kUG9zaXRpb24gPSBleHBvcnRzLmJhY2tncm91bmRTaXplID0gZXhwb3J0cy5iYWNrZ3JvdW5kSW1hZ2UgPSBleHBvcnRzLmJvcmRlclJhZGl1cyA9IGV4cG9ydHMuYm9yZGVyTGVmdCA9IGV4cG9ydHMuYm9yZGVyQm90dG9tID0gZXhwb3J0cy5ib3JkZXJSaWdodCA9IGV4cG9ydHMuYm9yZGVyVG9wID0gZXhwb3J0cy5ib3JkZXJDb2xvciA9IGV4cG9ydHMuYm9yZGVyU3R5bGUgPSBleHBvcnRzLmJvcmRlcldpZHRoID0gZXhwb3J0cy5ncmlkQXJlYSA9IGV4cG9ydHMuZ3JpZFRlbXBsYXRlQXJlYXMgPSBleHBvcnRzLmdyaWRUZW1wbGF0ZVJvd3MgPSBleHBvcnRzLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBleHBvcnRzLmdyaWRBdXRvUm93cyA9IGV4cG9ydHMuZ3JpZEF1dG9Db2x1bW5zID0gZXhwb3J0cy5ncmlkQXV0b0Zsb3cgPSBleHBvcnRzLmdyaWRSb3cgPSBleHBvcnRzLmdyaWRDb2x1bW4gPSBleHBvcnRzLmdyaWRSb3dHYXAgPSBleHBvcnRzLmdyaWRDb2x1bW5HYXAgPSBleHBvcnRzLmdyaWRHYXAgPSBleHBvcnRzLm9yZGVyID0gZXhwb3J0cy5hbGlnblNlbGYgPSBleHBvcnRzLmp1c3RpZnlTZWxmID0gZXhwb3J0cy5mbGV4QmFzaXMgPSBleHBvcnRzLmZsZXhTaHJpbmsgPSBleHBvcnRzLmZsZXhHcm93ID0gZXhwb3J0cy5mbGV4ID0gZXhwb3J0cy5mbGV4RGlyZWN0aW9uID0gZXhwb3J0cy5mbGV4V3JhcCA9IGV4cG9ydHMuanVzdGlmeUNvbnRlbnQgPSBleHBvcnRzLmp1c3RpZnlJdGVtcyA9IGV4cG9ydHMuYWxpZ25Db250ZW50ID0gZXhwb3J0cy5hbGlnbkl0ZW1zID0gZXhwb3J0cy5sZXR0ZXJTcGFjaW5nID0gZXhwb3J0cy5mb250U3R5bGUgPSBleHBvcnRzLnRleHRBbGlnbiA9IGV4cG9ydHMubGluZUhlaWdodCA9IGV4cG9ydHMuZm9udFdlaWdodCA9IGV4cG9ydHMuZm9udEZhbWlseSA9IGV4cG9ydHMuZm9udFNpemUgPSBleHBvcnRzLm9wYWNpdHkgPSBleHBvcnRzLm92ZXJmbG93WSA9IGV4cG9ydHMub3ZlcmZsb3dYID0gZXhwb3J0cy5vdmVyZmxvdyA9IGV4cG9ydHMuZGlzcGxheSA9IGV4cG9ydHMudmVydGljYWxBbGlnbiA9IGV4cG9ydHMuc2l6ZSA9IGV4cG9ydHMubWF4SGVpZ2h0ID0gZXhwb3J0cy5tYXhXaWR0aCA9IGV4cG9ydHMubWluSGVpZ2h0ID0gZXhwb3J0cy5taW5XaWR0aCA9IGV4cG9ydHMuaGVpZ2h0ID0gZXhwb3J0cy53aWR0aCA9IGV4cG9ydHMuY29sb3JTdHlsZSA9IGV4cG9ydHMudGV4dFN0eWxlID0gZXhwb3J0cy5idXR0b25TdHlsZSA9IGV4cG9ydHMudmFyaWFudCA9IGV4cG9ydHMuYm9yZGVycyA9IGV4cG9ydHMudGV4dFNoYWRvdyA9IGV4cG9ydHMuYm94U2hhZG93ID0gZXhwb3J0cy5zaGFkb3cgPSBleHBvcnRzLnNwYWNlID0gZXhwb3J0cy5wYWRkaW5nID0gZXhwb3J0cy5tYXJnaW4gPSBleHBvcnRzLnN5c3RlbSA9IGV4cG9ydHMuY29tcG9zZSA9IGV4cG9ydHMuZ2V0ID0gdm9pZCAwO1xuXG52YXIgX2NvcmUgPSByZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vY29yZVwiKTtcblxuZXhwb3J0cy5jcmVhdGVTdHlsZUZ1bmN0aW9uID0gX2NvcmUuY3JlYXRlU3R5bGVGdW5jdGlvbjtcbmV4cG9ydHMuY3JlYXRlUGFyc2VyID0gX2NvcmUuY3JlYXRlUGFyc2VyO1xuZXhwb3J0cy5nZXQgPSBfY29yZS5nZXQ7XG5leHBvcnRzLmNvbXBvc2UgPSBfY29yZS5jb21wb3NlO1xuZXhwb3J0cy5zeXN0ZW0gPSBfY29yZS5zeXN0ZW07XG5cbnZhciBfbGF5b3V0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBzdHlsZWQtc3lzdGVtL2xheW91dFwiKSk7XG5cbmV4cG9ydHMubGF5b3V0ID0gX2xheW91dC5sYXlvdXQ7XG5cbnZhciBfY29sb3IgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vY29sb3JcIikpO1xuXG5leHBvcnRzLmNvbG9yID0gX2NvbG9yLmNvbG9yO1xuXG52YXIgX3R5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vdHlwb2dyYXBoeVwiKSk7XG5cbmV4cG9ydHMudHlwb2dyYXBoeSA9IF90eXBvZ3JhcGh5LnR5cG9ncmFwaHk7XG5cbnZhciBfZmxleGJveCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9mbGV4Ym94XCIpKTtcblxuZXhwb3J0cy5mbGV4Ym94ID0gX2ZsZXhib3guZmxleGJveDtcblxudmFyIF9ncmlkID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBzdHlsZWQtc3lzdGVtL2dyaWRcIikpO1xuXG5leHBvcnRzLmdyaWQgPSBfZ3JpZC5ncmlkO1xuXG52YXIgX2JvcmRlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9ib3JkZXJcIikpO1xuXG5leHBvcnRzLmJvcmRlciA9IF9ib3JkZXIuYm9yZGVyO1xuZXhwb3J0cy5ib3JkZXJzID0gX2JvcmRlcltcImRlZmF1bHRcIl07XG5cbnZhciBfYmFja2dyb3VuZCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9iYWNrZ3JvdW5kXCIpKTtcblxuZXhwb3J0cy5iYWNrZ3JvdW5kID0gX2JhY2tncm91bmQuYmFja2dyb3VuZDtcblxudmFyIF9wb3NpdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAc3R5bGVkLXN5c3RlbS9wb3NpdGlvblwiKSk7XG5cbmV4cG9ydHMucG9zaXRpb24gPSBfcG9zaXRpb24ucG9zaXRpb247XG5cbnZhciBfc3BhY2UgPSByZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vc3BhY2VcIik7XG5cbmV4cG9ydHMubWFyZ2luID0gX3NwYWNlLm1hcmdpbjtcbmV4cG9ydHMucGFkZGluZyA9IF9zcGFjZS5wYWRkaW5nO1xuZXhwb3J0cy5zcGFjZSA9IF9zcGFjZS5zcGFjZTtcblxudmFyIF9zaGFkb3cgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiQHN0eWxlZC1zeXN0ZW0vc2hhZG93XCIpKTtcblxuZXhwb3J0cy5zaGFkb3cgPSBfc2hhZG93LnNoYWRvdztcbmV4cG9ydHMuYm94U2hhZG93ID0gX3NoYWRvd1tcImRlZmF1bHRcIl07XG5leHBvcnRzLnRleHRTaGFkb3cgPSBfc2hhZG93W1wiZGVmYXVsdFwiXTtcblxudmFyIF92YXJpYW50ID0gcmVxdWlyZShcIkBzdHlsZWQtc3lzdGVtL3ZhcmlhbnRcIik7XG5cbmV4cG9ydHMudmFyaWFudCA9IF92YXJpYW50LnZhcmlhbnQ7XG5leHBvcnRzLmJ1dHRvblN0eWxlID0gX3ZhcmlhbnQuYnV0dG9uU3R5bGU7XG5leHBvcnRzLnRleHRTdHlsZSA9IF92YXJpYW50LnRleHRTdHlsZTtcbmV4cG9ydHMuY29sb3JTdHlsZSA9IF92YXJpYW50LmNvbG9yU3R5bGU7XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG4vLyB2NCBhcGkgc2hpbXNcbnZhciB3aWR0aCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLndpZHRoLFxuICAgIGhlaWdodCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLmhlaWdodCxcbiAgICBtaW5XaWR0aCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm1pbldpZHRoLFxuICAgIG1pbkhlaWdodCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm1pbkhlaWdodCxcbiAgICBtYXhXaWR0aCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm1heFdpZHRoLFxuICAgIG1heEhlaWdodCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm1heEhlaWdodCxcbiAgICBzaXplID0gX2xheW91dFtcImRlZmF1bHRcIl0uc2l6ZSxcbiAgICB2ZXJ0aWNhbEFsaWduID0gX2xheW91dFtcImRlZmF1bHRcIl0udmVydGljYWxBbGlnbixcbiAgICBkaXNwbGF5ID0gX2xheW91dFtcImRlZmF1bHRcIl0uZGlzcGxheSxcbiAgICBvdmVyZmxvdyA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm92ZXJmbG93LFxuICAgIG92ZXJmbG93WCA9IF9sYXlvdXRbXCJkZWZhdWx0XCJdLm92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1kgPSBfbGF5b3V0W1wiZGVmYXVsdFwiXS5vdmVyZmxvd1k7XG5leHBvcnRzLm92ZXJmbG93WSA9IG92ZXJmbG93WTtcbmV4cG9ydHMub3ZlcmZsb3dYID0gb3ZlcmZsb3dYO1xuZXhwb3J0cy5vdmVyZmxvdyA9IG92ZXJmbG93O1xuZXhwb3J0cy5kaXNwbGF5ID0gZGlzcGxheTtcbmV4cG9ydHMudmVydGljYWxBbGlnbiA9IHZlcnRpY2FsQWxpZ247XG5leHBvcnRzLnNpemUgPSBzaXplO1xuZXhwb3J0cy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5leHBvcnRzLm1heFdpZHRoID0gbWF4V2lkdGg7XG5leHBvcnRzLm1pbkhlaWdodCA9IG1pbkhlaWdodDtcbmV4cG9ydHMubWluV2lkdGggPSBtaW5XaWR0aDtcbmV4cG9ydHMuaGVpZ2h0ID0gaGVpZ2h0O1xuZXhwb3J0cy53aWR0aCA9IHdpZHRoO1xudmFyIG9wYWNpdHkgPSBfY29sb3JbXCJkZWZhdWx0XCJdLm9wYWNpdHk7XG5leHBvcnRzLm9wYWNpdHkgPSBvcGFjaXR5O1xudmFyIGZvbnRTaXplID0gX3R5cG9ncmFwaHlbXCJkZWZhdWx0XCJdLmZvbnRTaXplLFxuICAgIGZvbnRGYW1pbHkgPSBfdHlwb2dyYXBoeVtcImRlZmF1bHRcIl0uZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0ID0gX3R5cG9ncmFwaHlbXCJkZWZhdWx0XCJdLmZvbnRXZWlnaHQsXG4gICAgbGluZUhlaWdodCA9IF90eXBvZ3JhcGh5W1wiZGVmYXVsdFwiXS5saW5lSGVpZ2h0LFxuICAgIHRleHRBbGlnbiA9IF90eXBvZ3JhcGh5W1wiZGVmYXVsdFwiXS50ZXh0QWxpZ24sXG4gICAgZm9udFN0eWxlID0gX3R5cG9ncmFwaHlbXCJkZWZhdWx0XCJdLmZvbnRTdHlsZSxcbiAgICBsZXR0ZXJTcGFjaW5nID0gX3R5cG9ncmFwaHlbXCJkZWZhdWx0XCJdLmxldHRlclNwYWNpbmc7XG5leHBvcnRzLmxldHRlclNwYWNpbmcgPSBsZXR0ZXJTcGFjaW5nO1xuZXhwb3J0cy5mb250U3R5bGUgPSBmb250U3R5bGU7XG5leHBvcnRzLnRleHRBbGlnbiA9IHRleHRBbGlnbjtcbmV4cG9ydHMubGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XG5leHBvcnRzLmZvbnRXZWlnaHQgPSBmb250V2VpZ2h0O1xuZXhwb3J0cy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbmV4cG9ydHMuZm9udFNpemUgPSBmb250U2l6ZTtcbnZhciBhbGlnbkl0ZW1zID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmFsaWduSXRlbXMsXG4gICAgYWxpZ25Db250ZW50ID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmFsaWduQ29udGVudCxcbiAgICBqdXN0aWZ5SXRlbXMgPSBfZmxleGJveFtcImRlZmF1bHRcIl0uanVzdGlmeUl0ZW1zLFxuICAgIGp1c3RpZnlDb250ZW50ID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmp1c3RpZnlDb250ZW50LFxuICAgIGZsZXhXcmFwID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmZsZXhXcmFwLFxuICAgIGZsZXhEaXJlY3Rpb24gPSBfZmxleGJveFtcImRlZmF1bHRcIl0uZmxleERpcmVjdGlvbixcbiAgICBmbGV4ID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmZsZXgsXG4gICAgZmxleEdyb3cgPSBfZmxleGJveFtcImRlZmF1bHRcIl0uZmxleEdyb3csXG4gICAgZmxleFNocmluayA9IF9mbGV4Ym94W1wiZGVmYXVsdFwiXS5mbGV4U2hyaW5rLFxuICAgIGZsZXhCYXNpcyA9IF9mbGV4Ym94W1wiZGVmYXVsdFwiXS5mbGV4QmFzaXMsXG4gICAganVzdGlmeVNlbGYgPSBfZmxleGJveFtcImRlZmF1bHRcIl0uanVzdGlmeVNlbGYsXG4gICAgYWxpZ25TZWxmID0gX2ZsZXhib3hbXCJkZWZhdWx0XCJdLmFsaWduU2VsZixcbiAgICBvcmRlciA9IF9mbGV4Ym94W1wiZGVmYXVsdFwiXS5vcmRlcjtcbmV4cG9ydHMub3JkZXIgPSBvcmRlcjtcbmV4cG9ydHMuYWxpZ25TZWxmID0gYWxpZ25TZWxmO1xuZXhwb3J0cy5qdXN0aWZ5U2VsZiA9IGp1c3RpZnlTZWxmO1xuZXhwb3J0cy5mbGV4QmFzaXMgPSBmbGV4QmFzaXM7XG5leHBvcnRzLmZsZXhTaHJpbmsgPSBmbGV4U2hyaW5rO1xuZXhwb3J0cy5mbGV4R3JvdyA9IGZsZXhHcm93O1xuZXhwb3J0cy5mbGV4ID0gZmxleDtcbmV4cG9ydHMuZmxleERpcmVjdGlvbiA9IGZsZXhEaXJlY3Rpb247XG5leHBvcnRzLmZsZXhXcmFwID0gZmxleFdyYXA7XG5leHBvcnRzLmp1c3RpZnlDb250ZW50ID0ganVzdGlmeUNvbnRlbnQ7XG5leHBvcnRzLmp1c3RpZnlJdGVtcyA9IGp1c3RpZnlJdGVtcztcbmV4cG9ydHMuYWxpZ25Db250ZW50ID0gYWxpZ25Db250ZW50O1xuZXhwb3J0cy5hbGlnbkl0ZW1zID0gYWxpZ25JdGVtcztcbnZhciBncmlkR2FwID0gX2dyaWRbXCJkZWZhdWx0XCJdLmdyaWRHYXAsXG4gICAgZ3JpZENvbHVtbkdhcCA9IF9ncmlkW1wiZGVmYXVsdFwiXS5ncmlkQ29sdW1uR2FwLFxuICAgIGdyaWRSb3dHYXAgPSBfZ3JpZFtcImRlZmF1bHRcIl0uZ3JpZFJvd0dhcCxcbiAgICBncmlkQ29sdW1uID0gX2dyaWRbXCJkZWZhdWx0XCJdLmdyaWRDb2x1bW4sXG4gICAgZ3JpZFJvdyA9IF9ncmlkW1wiZGVmYXVsdFwiXS5ncmlkUm93LFxuICAgIGdyaWRBdXRvRmxvdyA9IF9ncmlkW1wiZGVmYXVsdFwiXS5ncmlkQXV0b0Zsb3csXG4gICAgZ3JpZEF1dG9Db2x1bW5zID0gX2dyaWRbXCJkZWZhdWx0XCJdLmdyaWRBdXRvQ29sdW1ucyxcbiAgICBncmlkQXV0b1Jvd3MgPSBfZ3JpZFtcImRlZmF1bHRcIl0uZ3JpZEF1dG9Sb3dzLFxuICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBfZ3JpZFtcImRlZmF1bHRcIl0uZ3JpZFRlbXBsYXRlQ29sdW1ucyxcbiAgICBncmlkVGVtcGxhdGVSb3dzID0gX2dyaWRbXCJkZWZhdWx0XCJdLmdyaWRUZW1wbGF0ZVJvd3MsXG4gICAgZ3JpZFRlbXBsYXRlQXJlYXMgPSBfZ3JpZFtcImRlZmF1bHRcIl0uZ3JpZFRlbXBsYXRlQXJlYXMsXG4gICAgZ3JpZEFyZWEgPSBfZ3JpZFtcImRlZmF1bHRcIl0uZ3JpZEFyZWE7XG5leHBvcnRzLmdyaWRBcmVhID0gZ3JpZEFyZWE7XG5leHBvcnRzLmdyaWRUZW1wbGF0ZUFyZWFzID0gZ3JpZFRlbXBsYXRlQXJlYXM7XG5leHBvcnRzLmdyaWRUZW1wbGF0ZVJvd3MgPSBncmlkVGVtcGxhdGVSb3dzO1xuZXhwb3J0cy5ncmlkVGVtcGxhdGVDb2x1bW5zID0gZ3JpZFRlbXBsYXRlQ29sdW1ucztcbmV4cG9ydHMuZ3JpZEF1dG9Sb3dzID0gZ3JpZEF1dG9Sb3dzO1xuZXhwb3J0cy5ncmlkQXV0b0NvbHVtbnMgPSBncmlkQXV0b0NvbHVtbnM7XG5leHBvcnRzLmdyaWRBdXRvRmxvdyA9IGdyaWRBdXRvRmxvdztcbmV4cG9ydHMuZ3JpZFJvdyA9IGdyaWRSb3c7XG5leHBvcnRzLmdyaWRDb2x1bW4gPSBncmlkQ29sdW1uO1xuZXhwb3J0cy5ncmlkUm93R2FwID0gZ3JpZFJvd0dhcDtcbmV4cG9ydHMuZ3JpZENvbHVtbkdhcCA9IGdyaWRDb2x1bW5HYXA7XG5leHBvcnRzLmdyaWRHYXAgPSBncmlkR2FwO1xudmFyIGJvcmRlcldpZHRoID0gX2JvcmRlcltcImRlZmF1bHRcIl0uYm9yZGVyV2lkdGgsXG4gICAgYm9yZGVyU3R5bGUgPSBfYm9yZGVyW1wiZGVmYXVsdFwiXS5ib3JkZXJTdHlsZSxcbiAgICBib3JkZXJDb2xvciA9IF9ib3JkZXJbXCJkZWZhdWx0XCJdLmJvcmRlckNvbG9yLFxuICAgIGJvcmRlclRvcCA9IF9ib3JkZXJbXCJkZWZhdWx0XCJdLmJvcmRlclRvcCxcbiAgICBib3JkZXJSaWdodCA9IF9ib3JkZXJbXCJkZWZhdWx0XCJdLmJvcmRlclJpZ2h0LFxuICAgIGJvcmRlckJvdHRvbSA9IF9ib3JkZXJbXCJkZWZhdWx0XCJdLmJvcmRlckJvdHRvbSxcbiAgICBib3JkZXJMZWZ0ID0gX2JvcmRlcltcImRlZmF1bHRcIl0uYm9yZGVyTGVmdCxcbiAgICBib3JkZXJSYWRpdXMgPSBfYm9yZGVyW1wiZGVmYXVsdFwiXS5ib3JkZXJSYWRpdXM7XG5leHBvcnRzLmJvcmRlclJhZGl1cyA9IGJvcmRlclJhZGl1cztcbmV4cG9ydHMuYm9yZGVyTGVmdCA9IGJvcmRlckxlZnQ7XG5leHBvcnRzLmJvcmRlckJvdHRvbSA9IGJvcmRlckJvdHRvbTtcbmV4cG9ydHMuYm9yZGVyUmlnaHQgPSBib3JkZXJSaWdodDtcbmV4cG9ydHMuYm9yZGVyVG9wID0gYm9yZGVyVG9wO1xuZXhwb3J0cy5ib3JkZXJDb2xvciA9IGJvcmRlckNvbG9yO1xuZXhwb3J0cy5ib3JkZXJTdHlsZSA9IGJvcmRlclN0eWxlO1xuZXhwb3J0cy5ib3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoO1xudmFyIGJhY2tncm91bmRJbWFnZSA9IF9iYWNrZ3JvdW5kW1wiZGVmYXVsdFwiXS5iYWNrZ3JvdW5kSW1hZ2UsXG4gICAgYmFja2dyb3VuZFNpemUgPSBfYmFja2dyb3VuZFtcImRlZmF1bHRcIl0uYmFja2dyb3VuZFNpemUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uID0gX2JhY2tncm91bmRbXCJkZWZhdWx0XCJdLmJhY2tncm91bmRQb3NpdGlvbixcbiAgICBiYWNrZ3JvdW5kUmVwZWF0ID0gX2JhY2tncm91bmRbXCJkZWZhdWx0XCJdLmJhY2tncm91bmRSZXBlYXQ7XG5leHBvcnRzLmJhY2tncm91bmRSZXBlYXQgPSBiYWNrZ3JvdW5kUmVwZWF0O1xuZXhwb3J0cy5iYWNrZ3JvdW5kUG9zaXRpb24gPSBiYWNrZ3JvdW5kUG9zaXRpb247XG5leHBvcnRzLmJhY2tncm91bmRTaXplID0gYmFja2dyb3VuZFNpemU7XG5leHBvcnRzLmJhY2tncm91bmRJbWFnZSA9IGJhY2tncm91bmRJbWFnZTtcbnZhciB6SW5kZXggPSBfcG9zaXRpb25bXCJkZWZhdWx0XCJdLnpJbmRleCxcbiAgICB0b3AgPSBfcG9zaXRpb25bXCJkZWZhdWx0XCJdLnRvcCxcbiAgICByaWdodCA9IF9wb3NpdGlvbltcImRlZmF1bHRcIl0ucmlnaHQsXG4gICAgYm90dG9tID0gX3Bvc2l0aW9uW1wiZGVmYXVsdFwiXS5ib3R0b20sXG4gICAgbGVmdCA9IF9wb3NpdGlvbltcImRlZmF1bHRcIl0ubGVmdDtcbmV4cG9ydHMubGVmdCA9IGxlZnQ7XG5leHBvcnRzLmJvdHRvbSA9IGJvdHRvbTtcbmV4cG9ydHMucmlnaHQgPSByaWdodDtcbmV4cG9ydHMudG9wID0gdG9wO1xuZXhwb3J0cy56SW5kZXggPSB6SW5kZXg7XG5cbi8vIHY0IHN0eWxlIEFQSSBzaGltXG52YXIgc3R5bGUgPSBmdW5jdGlvbiBzdHlsZShfcmVmKSB7XG4gIHZhciBwcm9wID0gX3JlZi5wcm9wLFxuICAgICAgY3NzUHJvcGVydHkgPSBfcmVmLmNzc1Byb3BlcnR5LFxuICAgICAgYWxpYXMgPSBfcmVmLmFsaWFzLFxuICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICB0cmFuc2Zvcm1WYWx1ZSA9IF9yZWYudHJhbnNmb3JtVmFsdWUsXG4gICAgICBzY2FsZSA9IF9yZWYuc2NhbGUsXG4gICAgICBwcm9wZXJ0aWVzID0gX3JlZi5wcm9wZXJ0aWVzO1xuICB2YXIgY29uZmlnID0ge307XG4gIGNvbmZpZ1twcm9wXSA9ICgwLCBfY29yZS5jcmVhdGVTdHlsZUZ1bmN0aW9uKSh7XG4gICAgcHJvcGVydGllczogcHJvcGVydGllcyxcbiAgICBwcm9wZXJ0eTogY3NzUHJvcGVydHkgfHwgcHJvcCxcbiAgICBzY2FsZToga2V5LFxuICAgIGRlZmF1bHRTY2FsZTogc2NhbGUsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm1WYWx1ZVxuICB9KTtcbiAgaWYgKGFsaWFzKSBjb25maWdbYWxpYXNdID0gY29uZmlnW3Byb3BdO1xuICB2YXIgcGFyc2UgPSAoMCwgX2NvcmUuY3JlYXRlUGFyc2VyKShjb25maWcpO1xuICByZXR1cm4gcGFyc2U7XG59O1xuXG5leHBvcnRzLnN0eWxlID0gc3R5bGU7IiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBzcGFjZSwgbGF5b3V0IH0gZnJvbSAnc3R5bGVkLXN5c3RlbSc7XG5cbmV4cG9ydCBjb25zdCBjb2xvcnMgPSB7XG4gIGJnOiAnIzAwMDAwMCcsIC8vIEJsYWNrIGJhY2tncm91bmRcbiAgcHJpbWFyeTogJyMzOUZGMTQnLCAvLyBOZW9uIEdyZWVuXG4gIGFwcHJvdmFsOiAnIzM5RkYxNCcsIC8vIE5lb24gR3JlZW5cbiAgZGFuZ2VyOiAnI0RDMTQzQycsIC8vIENyaW1zb24gUmVkXG4gIGdyZXkxMDA6ICcjQ0NDQ0NDJywgLy8gTGlnaHQgR3JleVxuICBncmV5ODA6ICcjMzMzMzMzJywgLy8gRGFyayBHcmV5XG4gIHdoaXRlOiAnI0ZGRkZGRicsIC8vIFdoaXRlXG59O1xuXG5leHBvcnQgY29uc3QgQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+IGNvbG9yc1twcm9wcy5iZ0NvbG9yXSB8fCAnbm9uZSd9O1xuICBjb2xvcjogJHtjb2xvcnMud2hpdGV9OyAvLyBBc3N1bWluZyB5b3Ugd2FudCB0aGUgdGV4dCBjb2xvciB0byBjb250cmFzdCB0aGUgYmFja2dyb3VuZFxuICBwYWRkaW5nOiA4cHggMTZweDsgLy8gRXhhbXBsZSBwYWRkaW5nLCBhZGp1c3QgYXMgbmVlZGVkXG4gIGJvcmRlcjogbm9uZTsgLy8gQXNzdW1pbmcgbm8gYm9yZGVyIGlzIG5lZWRlZFxuICBib3JkZXItcmFkaXVzOiA0cHg7IC8vIEdpdmluZyB0aGUgYnV0dG9uIHJvdW5kZWQgY29ybmVyc1xuICBjdXJzb3I6IHBvaW50ZXI7IC8vIENoYW5nZXMgdGhlIGN1cnNvciB0byBhIHBvaW50ZXIgb24gaG92ZXJcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyhwcm9wcykgPT5cbiAgICAgIGNvbG9yc1twcm9wcy5ob3ZlckNvbG9yXSB8fFxuICAgICAgY29sb3JzLmFwcHJvdmFsfTsgLy8gT3B0aW9uYWw6IGNoYW5nZSBjb2xvciBvbiBob3ZlclxuICB9XG5cbiAgJHtzcGFjZX0gJHtsYXlvdXR9XG5gO1xuZXhwb3J0IGNvbnN0IFNlY3Rpb24gPSBzdHlsZWQuc2VjdGlvbmBcbiAgLy8gICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xuICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAke3NwYWNlfSAke2xheW91dH0gLy8gQWxsb3dzIHNwYWNlIGFuZCBsYXlvdXQgcHJvcHMgZnJvbSBzdHlsZWQtc3lzdGVtXG5gO1xuXG5leHBvcnQgY29uc3QgSGVhZGluZyA9IHN0eWxlZC5oNmBcbiAgY29sb3I6IGdyZWVuO1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICR7c3BhY2V9ICR7bGF5b3V0fSAvLyBBbGxvd3Mgc3BhY2UgYW5kIGxheW91dCBwcm9wcyBmcm9tIHN0eWxlZC1zeXN0ZW1cbmA7XG5cbmV4cG9ydCBjb25zdCBSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyAvKiBkZWZhdWx0IG1vYmlsZSB2aWV3ICovXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcblxuICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAvKiBleGFtcGxlIGJyZWFrcG9pbnQgKi9cbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICB9XG4gICR7c3BhY2V9ICR7bGF5b3V0fSAvLyBBbGxvd3Mgc3BhY2UgYW5kIGxheW91dCBwcm9wcyBmcm9tIHN0eWxlZC1zeXN0ZW1cbmA7XG5cbmV4cG9ydCBjb25zdCBDZWxsID0gc3R5bGVkLmRpdmBcbiAgZmxleC1ncm93OiAxO1xuICBtYXJnaW4tYm90dG9tOiAwLjFyZW07XG4gIG1hcmdpbi1yaWdodDogMC41cmVtO1xuICB3aWR0aDogYXV0bztcbiAgbWluLXdpZHRoOiBmaXQtY29udGVudDtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9IC8vIEFsbG93cyBzcGFjZSBhbmQgbGF5b3V0IHByb3BzIGZyb20gc3R5bGVkLXN5c3RlbVxuYDtcblxuZXhwb3J0IGNvbnN0IENlbGxGbGV4ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9IC8vIEFsbG93cyBzcGFjZSBhbmQgbGF5b3V0IHByb3BzIGZyb20gc3R5bGVkLXN5c3RlbVxuYDtcblxuZXhwb3J0IGNvbnN0IFNlbGVjdCA9IHN0eWxlZC5zZWxlY3RgXG4gIGJvcmRlcjogMnB4IHNvbGlkICNjY2M7XG4gIHBhZGRpbmc6IDhweCAxMnB4O1xuICBib3JkZXItcmFkaXVzOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB3aWR0aDogYXV0bztcbiAgbWluLXdpZHRoOiAxNTBweDtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9IC8vIEFsbG93cyBzcGFjZSBhbmQgbGF5b3V0IHByb3BzIGZyb20gc3R5bGVkLXN5c3RlbVxuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0YFxuICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICB3aWR0aDogYXV0bztcbiAgbWluLXdpZHRoOiAxNTBweDtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9IC8vIEFsbG93cyBzcGFjZSBhbmQgbGF5b3V0IHByb3BzIGZyb20gc3R5bGVkLXN5c3RlbVxuYDtcblxuZXhwb3J0IGNvbnN0IEltYWdlID0gc3R5bGVkLmltZ2BcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcblxuICBib3JkZXItcmFkaXVzOiA1cHg7XG5cbiAgd2lkdGg6IGF1dG87XG4gIG1pbi13aWR0aDogMTUwcHg7XG4gICR7c3BhY2V9ICR7bGF5b3V0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFRleHRGaWVsZCA9IHN0eWxlZC50ZXh0YXJlYWBcbiAgYm9yZGVyOiAycHggc29saWQgI2NjYztcbiAgcGFkZGluZzogOHB4IDEycHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gIHdpZHRoOiBhdXRvO1xuICBtaW4td2lkdGg6IDE1MHB4O1xuICByZXNpemU6IHZlcnRpY2FsOyAvLyBBbGxvd3MgdGhlIHVzZXIgdG8gcmVzaXplIHRoZSB0ZXh0YXJlYSB2ZXJ0aWNhbGx5XG4gICR7c3BhY2V9ICR7bGF5b3V0fSAvLyBBbGxvd3Mgc3BhY2UgYW5kIGxheW91dCBwcm9wcyBmcm9tIHN0eWxlZC1zeXN0ZW1cbmA7XG5cbmV4cG9ydCBjb25zdCBQYXJhZ3JhcGggPSBzdHlsZWQucGBcbiAgZm9udC1zdHlsZTogJHsocHJvcHMpID0+IHByb3BzLmZvbnRTdHlsZSB8fCAnbm9ybWFsJ307XG4gIGNvbG9yOiAkeyhwcm9wcykgPT4gcHJvcHMuZm9udENvbG9yIHx8ICdub25lJ30gJHtzcGFjZX0gJHtsYXlvdXR9OyAvLyBBbGxvd3Mgc3BhY2UgYW5kIGxheW91dCBwcm9wcyBmcm9tIHN0eWxlZC1zeXN0ZW1cbmA7XG5cbmV4cG9ydCBjb25zdCBDb2xvcmVkU3BhbiA9IHN0eWxlZC5zcGFuYFxuICBmb250LXN0eWxlOiAkeyhwcm9wcykgPT4gcHJvcHMuZm9udFN0eWxlIHx8ICdub3JtYWwnfTtcbiAgY29sb3I6ICR7KHByb3BzKSA9PiAocHJvcHMuZm9udENvbG9yID8gY29sb3JzW3Byb3BzLmZvbnRDb2xvcl0gOiAnaW5oZXJpdCcpfTtcbiAgJHtzcGFjZX1cbiAgJHtsYXlvdXR9XG5gO1xuXG5leHBvcnQgY29uc3QgQUhyZWYgPSBzdHlsZWQuYWBcbiAgJHtzcGFjZX0gJHtsYXlvdXR9IC8vIEFsbG93cyBzcGFjZSBhbmQgbGF5b3V0IHByb3BzIGZyb20gc3R5bGVkLXN5c3RlbVxuYDtcblxuZXhwb3J0IGNvbnN0IExhYmVsID0gc3R5bGVkLmxhYmVsYFxuICBkaXNwbGF5OiBmbGV4OyAvLyBDaGFuZ2VzIGRpc3BsYXkgdG8gZmxleCB0byB1c2UgZmxleGJveCBwcm9wZXJ0aWVzXG5cbiAgYWxpZ24taXRlbXM6IGNlbnRlcjsgLy8gVmVydGljYWxseSBjZW50ZXJzIHRoZSBjaGlsZHJlblxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47IC8vIFNwcmVhZHMgdGhlIGNoaWxkcmVuIG91dCBhY3Jvc3MgdGhlIGxhYmVsJ3Mgd2lkdGhcbiAgY3Vyc29yOiBwb2ludGVyO1xuICAke3NwYWNlfVxuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0QXRvbSA9IHN0eWxlZC5pbnB1dGBcbiAgYm9yZGVyOiAycHggc29saWQgI2NjYztcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9XG5gO1xuXG5leHBvcnQgY29uc3QgQm94ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246ICR7KHByb3BzKSA9PiBwcm9wcy5kaXJlY3Rpb24gfHwgJ2NvbHVtbid9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cbiAgJHtzcGFjZX1cbmA7XG5cbmV4cG9ydCBjb25zdCBDYW52YXNDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAvLyBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5ncmV5MTAwfTtcbiAgLy8gYm9yZGVyLXJhZGl1czogMTBweDtcbiAgLy8gYm9yZGVyOiAycHggc29saWQgJHtjb2xvcnMuZ3JleTEwMH07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAvLyBvdmVyZmxvdzogaGlkZGVuOyAvLyBFbnN1cmVzIG5vIG92ZXJmbG93IG9mIHRoZSBjYW52YXMgZWRnZXNcbiAgLy8gd2lkdGg6IDEwMCU7IC8vIFRha2VzIGZ1bGwgd2lkdGggb2YgdGhlIGNvbnRhaW5lclxuICAvLyBoZWlnaHQ6IGF1dG87IC8vIERlZmF1bHQgaGVpZ2h0LCBjYW4gYmUgYWRqdXN0ZWQgb3IgbWFkZSByZXNwb25zaXZlXG5cbiAgLy8gQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIC8vICAgaGVpZ2h0OiA1MDBweDsgLy8gTGFyZ2VyIGhlaWdodCBmb3IgbGFyZ2VyIHNjcmVlbnNcbiAgLy8gfVxuXG4gICR7c3BhY2V9ICR7bGF5b3V0fSAvLyBJbmNvcnBvcmF0ZXMgc3BhY2UgYW5kIGxheW91dCBmb3IgcGFkZGluZywgbWFyZ2luIGFkanVzdG1lbnRzXG5gO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBzcGFjZSwgbGF5b3V0IH0gZnJvbSAnc3R5bGVkLXN5c3RlbSc7XG5cbi8vIFN0eWxlZCBncmlkIGNvbnRhaW5lclxuY29uc3QgQ2hlY2tib3hHcmlkID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZ3JpZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHsocHJvcHMpID0+XG4gICAgcHJvcHMuYmdDb2xvciB8fCAnbm9uZSd9OyAvLyBDb3JyZWN0ZWQgc3ludGF4IGFuZCBkZWZhdWx0IGNvbG9yXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KFxuICAgICR7KHByb3BzKSA9PiBwcm9wcy5jb2x1bW5zIHx8IDJ9LFxuICAgIC8vIENvcnJlY3RlZCBwcm9wZXJ0eSBuYW1lXG4gICAgMWZyXG4gICk7IC8vIER5bmFtaWNhbGx5IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zLCBkZWZhdWx0cyB0byAyXG4gIGdyaWQtZ2FwOiAxNnB4OyAvLyBBZGRzIHNwYWNlIGJldHdlZW4gdGhlIGdyaWQgaXRlbXNcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7IC8vIE9uZSBjb2x1bW4gd2hlbiB0aGUgc2NyZWVuIGlzIGxlc3MgdGhhbiA3NjhweFxuICB9XG4gICR7c3BhY2V9ICR7bGF5b3V0fSAvLyBBbGxvd3Mgc3BhY2UgYW5kIGxheW91dCBwcm9wcyBmcm9tIHN0eWxlZC1zeXN0ZW1cbmA7XG5cbmNvbnN0IEJveCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiAkeyhwcm9wcykgPT4gcHJvcHMuZGlyZWN0aW9uIHx8ICdjb2x1bW4nfTtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG4gICR7c3BhY2V9XG5gO1xuXG5jb25zdCBMYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgZGlzcGxheTogZmxleDsgLy8gQ2hhbmdlcyBkaXNwbGF5IHRvIGZsZXggdG8gdXNlIGZsZXhib3ggcHJvcGVydGllc1xuXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7IC8vIFZlcnRpY2FsbHkgY2VudGVycyB0aGUgY2hpbGRyZW5cbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyAvLyBTcHJlYWRzIHRoZSBjaGlsZHJlbiBvdXQgYWNyb3NzIHRoZSBsYWJlbCdzIHdpZHRoXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJHtzcGFjZX1cbmA7XG5cbmNvbnN0IElucHV0ID0gc3R5bGVkLmlucHV0YFxuICAke3NwYWNlfSAke2xheW91dH1cbmA7XG5cbmNvbnN0IFN0eWxlZFRleHRBcmVhID0gc3R5bGVkLnRleHRhcmVhYFxuICB3aWR0aDogMTAwJTsgLy8gQ29ycmVzcG9uZHMgdG8gd2lkdGg9ezF9XG4gIG1hcmdpbi10b3A6IDQwcHg7IC8vIG15PXsxMH0gYXNzdW1lcyA0IGlzIHRoZSBiYXNlIHVuaXQgZm9yIG1hcmdpbnNcbiAgbWFyZ2luLWJvdHRvbTogNDBweDsgLy8gbXk9ezEwfVxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgLy8gYmc9J3doaXRlJ1xuXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm9yZGVyLWNvbG9yOiAjNGE5MGUyOyAvLyBFeGFtcGxlIGZvY3VzIHN0eWxlXG4gIH1cbmA7XG5leHBvcnQgeyBMYWJlbCwgQ2hlY2tib3hHcmlkLCBCb3gsIFN0eWxlZFRleHRBcmVhIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgU2VjdGlvbixcbiAgSGVhZGluZyxcbiAgUm93LFxuICBDZWxsLFxuICBTZWxlY3QsXG4gIElucHV0LFxuICBUZXh0RmllbGQsXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcbmltcG9ydCB7IExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcblxuLy8gIGltcG9ydCBtb2RlbHNcblxuLy8gW1xuLy8gICByb3dDb25maWcsXG4vLyAgIFtcbi8vICAgICBbJ3NpdGVfaWQnLCBjZWxsQ29uZmlnXSxcbi8vICAgICBbJ25mY190YWdfaWQnLCBjZWxsQ29uZmlnXSxcbi8vICAgICBbJ3BhcmVudF9lcXVpcG1lbnRfaWQnLCBjZWxsQ29uZmlnXSxcbi8vICAgICBbJ2luc3RhbGxhdGlvbl9kYXRlJywgY2VsbENvbmZpZ10sXG4vLyAgIF0sXG4vLyBdLFxuXG5jb25zdCBFcXVpcG1lbnRGb3JtID0gKHsgcmVzb3VyY2UgfSkgPT4ge1xuICBjb25zb2xlLmxvZyhwcm9wcyk7XG4gIC8vIGNvbnNvbGUubG9nKHByb3BzLnJlc291cmNlLnByb3BlcnRpZXMucHJvZHVpdF9pZC5hdmFpbGFibGVWYWx1ZXMpO1xuXG4gIHJldHVybiAoXG4gICAgPFNlY3Rpb24+XG4gICAgICA8SGVhZGluZz5QYXJhbWV0cmFnZTwvSGVhZGluZz5cbiAgICA8L1NlY3Rpb24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcXVpcG1lbnRGb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgRGFzaGJvYXJkQ2FyZCA9ICgpID0+IHtcbiAgLy8gRGVmaW5lIHRoZSBpbmxpbmUgc3R5bGVzXG4gIGNvbnN0IGNvbnRhaW5lclN0eWxlID0ge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgIC8vIGJhY2tncm91bmRDb2xvcjogJyNmNGY0ZjQnLCAvLyBMaWdodCBncmV5IGJhY2tncm91bmRcbiAgfTtcblxuICBjb25zdCBjYXJkU3R5bGUgPSB7XG4gICAgd2lkdGg6ICczMDBweCcsIC8vIEFkanVzdCB3aWR0aCBhcyBuZWVkZWRcbiAgICBwYWRkaW5nOiAnMjBweCcsXG4gICAgYm94U2hhZG93OiAnMCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xKScsXG4gICAgLy8gYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgfTtcblxuICBjb25zdCBsb2dvU3R5bGUgPSB7XG4gICAgd2lkdGg6ICcxMDBweCcsIC8vIEFkanVzdCBzaXplIGFzIG5lZWRlZFxuICAgIGhlaWdodDogJ2F1dG8nLFxuICAgIG1hcmdpbkJvdHRvbTogJzIwcHgnLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17Y29udGFpbmVyU3R5bGV9PlxuICAgICAgPGRpdiBzdHlsZT17Y2FyZFN0eWxlfT5cbiAgICAgICAgPGltZ1xuICAgICAgICAgIHNyYz0naHR0cHM6Ly9va3RvcHVjZS5jb20vYnVpbGQvaW1hZ2VzL2xvZ28uNWZkMjM1ZjEuc3ZnJ1xuICAgICAgICAgIGFsdD0nQ29tcGFueSBMb2dvJ1xuICAgICAgICAgIHN0eWxlPXtsb2dvU3R5bGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxoMT5CaWVudmVudWUgZGFucyB2b3RyZSB0YWJsZWF1IGRlIGJvcmQgcGVyc29ubmFsaXPDqTwvaDE+XG4gICAgICAgIDxwPlxuICAgICAgICAgIElsIHMnYWdpdCBkJ3VuZSBwYWdlIGRlIHRhYmxlYXUgZGUgYm9yZCBwZXJzb25uYWxpc8OpZSBwb3VyIHZvdHJlXG4gICAgICAgICAgcGFubmVhdSBPa3RvcHVjZS5cbiAgICAgICAgPC9wPlxuICAgICAgICA8cD5JbCBzZXJhIGTDqXZlbG9wcMOpIGRhbnMgdW5lIHBhZ2UgcGx1cyB1dGlsZTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkQ2FyZDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1NZXNzYWdlIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5jb25zdCBDdXN0b21TZWxlY3QgPSAoeyBwcm9wZXJ0eSwgcmVjb3JkLCBvbkNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IFtvcHRpb25zLCBzZXRPcHRpb25zXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3BhcmVudEZpZWxkLCBzZXRQYXJlbnRGaWVsZF0gPSB1c2VTdGF0ZShwcm9wZXJ0eS5wcm9wcy5wYXJlbnQpO1xuICBjb25zdCBbcGFyZW50VmFsdWUsIHNldFBhcmVudFZhbHVlXSA9IHVzZVN0YXRlKFxuICAgIHJlY29yZC5wYXJhbXNbcHJvcGVydHkucHJvcHMucGFyZW50XVxuICApO1xuICBjb25zdCBbc2VsZWN0ZWRPcHRpb25WYWx1ZSwgc2V0U2VsZWN0ZWRPcHRpb25WYWx1ZV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRTZWxlY3RlZE9wdGlvblZhbHVlKHNlbGVjdGVkT3B0aW9uKTtcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5wYXRoLCBzZWxlY3RlZE9wdGlvbi52YWx1ZSk7XG4gIH07XG5cbiAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hPcHRpb25zKCkge1xuICAgIGlmIChwYXJlbnRGaWVsZCAmJiBwYXJlbnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGAvYXBpL3Jlc291cmNlcy8ke3Byb3BlcnR5LnByb3BzLnRhYmxlTmFtZX0vYWN0aW9ucy9saXN0P2ZpbHRlcnMuJHtwYXJlbnRGaWVsZH09JHtwYXJlbnRWYWx1ZX1gXG4gICAgICAgICk7XG4gICAgICAgIC8vIGAvYXBpL3Jlc291cmNlcy8ke3Byb3BlcnR5LnByb3BzLnRhYmxlTmFtZX0vYWN0aW9ucy9saXN0P2ZpbHRlcnMuJHtwYXJlbnRGaWVsZH09JHtwYXJlbnRWYWx1ZX1gXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRPcHRpb25zID0gZGF0YS5yZWNvcmRzLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgICB2YWx1ZTogaXRlbS5pZCxcbiAgICAgICAgICBsYWJlbDogaXRlbS50aXRsZSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHNldE9wdGlvbnMoZm9ybWF0dGVkT3B0aW9ucyk7XG4gICAgICAgIC8vIEZPUiBFRElUIEFDVElPTiBTZXQgaW5pdGlhbCB2YWx1ZSBhZnRlciBvcHRpb25zIGhhdmUgbG9hZGVkXG4gICAgICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXSkge1xuICAgICAgICAgIGNvbnN0IGluaXRpYWxWYWx1ZSA9IGZvcm1hdHRlZE9wdGlvbnMuZmluZChcbiAgICAgICAgICAgIChvcHQpID0+IG9wdC52YWx1ZSA9PT0gcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5uYW1lXVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc29sZS5sb2coaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICBzZXRTZWxlY3RlZE9wdGlvblZhbHVlKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBvcHRpb25zOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFBhcmVudEZpZWxkKHByb3BlcnR5LnByb3BzLnBhcmVudCk7XG4gICAgc2V0UGFyZW50VmFsdWUocmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wcm9wcy5wYXJlbnRdKTtcbiAgfSwgW3JlY29yZC5wYXJhbXNdKTsgLy8sIHByb3BlcnR5LnByb3BzLnBhcmVudFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0T3B0aW9ucyhbXSk7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShudWxsKTtcbiAgICByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdID0gbnVsbDtcblxuICAgIGZldGNoT3B0aW9ucygpO1xuICB9LCBbcGFyZW50RmllbGQsIHBhcmVudFZhbHVlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEZvcm1Hcm91cCBlcnJvcj17Jyd9PlxuICAgICAgICA8TGFiZWwgaHRtbEZvcj17cHJvcGVydHkubmFtZX0+e3Byb3BlcnR5LnByb3BzLmxhYmVsfTwvTGFiZWw+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWRPcHRpb24pID0+IGhhbmRsZUNoYW5nZShzZWxlY3RlZE9wdGlvbil9XG4gICAgICAgICAgbmFtZT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRPcHRpb25WYWx1ZX1cbiAgICAgICAgLz5cbiAgICAgICAgPEZvcm1NZXNzYWdlPnsnJ308L0Zvcm1NZXNzYWdlPlxuICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXN0b21TZWxlY3Q7XG4iLCJpbXBvcnQgc3R5bGVkLCB7IGNzcyB9IGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IHNwYWNlLCBsYXlvdXQsIGNvbG9yLCBzeXN0ZW0gfSBmcm9tICdzdHlsZWQtc3lzdGVtJztcblxuLy8gU3R5bGVkIGxhYmVsXG5jb25zdCBUb2dnbGVMYWJlbCA9IHN0eWxlZC5sYWJlbGBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiA1NnB4OyAvLyBUYWlsd2luZCdzIHctMTQgaXMgMy41cmVtIG9yIDU2cHhcbiAgaGVpZ2h0OiAzMnB4OyAvLyBUYWlsd2luZCdzIGgtOCBpcyAycmVtIG9yIDMycHhcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTdlYjsgLy8gVGFpbHdpbmQncyBiZy1ncmF5LTIwMFxuICBib3JkZXItcmFkaXVzOiA5OTk5cHg7IC8vIFRhaWx3aW5kJ3Mgcm91bmRlZC1mdWxsXG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgJHtzcGFjZX0gJHtsYXlvdXR9ICR7Y29sb3J9XG5gO1xuXG4vLyBTdHlsZWQgaW5wdXQgKGNoZWNrYm94KVxuY29uc3QgVG9nZ2xlSW5wdXQgPSBzdHlsZWQuaW5wdXQuYXR0cnMoKHByb3BzKSA9PiAoe1xuICB0eXBlOiAnY2hlY2tib3gnLFxufSkpYFxuICBvcGFjaXR5OiAwO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHotaW5kZXg6IC0xO1xuICAke3NwYWNlfVxuYDtcblxuLy8gU3R5bGVkIHRvZ2dsZSBpbmRpY2F0b3JcbmNvbnN0IFRvZ2dsZUluZGljYXRvciA9IHN0eWxlZC5zcGFuYFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDRweDsgLy8gVGFpbHdpbmQncyBsZWZ0LTEgaXMgMC4yNXJlbSBvciA0cHhcbiAgdG9wOiA0cHg7IC8vIFRhaWx3aW5kJ3MgdG9wLTEgaXMgMC4yNXJlbSBvciA0cHhcbiAgd2lkdGg6IDI0cHg7IC8vIFRhaWx3aW5kJ3Mgdy02IGlzIDEuNXJlbSBvciAyNHB4XG4gIGhlaWdodDogMjRweDsgLy8gVGFpbHdpbmQncyBoLTYgaXMgMS41cmVtIG9yIDI0cHhcbiAgYm9yZGVyLXJhZGl1czogOTk5OXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkeyh7IGNoZWNrZWQgfSkgPT5cbiAgICBjaGVja2VkID8gJyMwNjVmNDYnIDogJyNiOTFjMWMnfTsgLy8gVGFpbHdpbmQncyBiZy10ZWFsLTYwMCBhbmQgYmctcmVkLTYwMFxuICB0cmFuc2Zvcm06ICR7KHsgY2hlY2tlZCB9KSA9PlxuICAgIGNoZWNrZWQgPyAndHJhbnNsYXRlWCgyNHB4KScgOiAndHJhbnNsYXRlWCgwcHgpJ307XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzO1xuICAke3N5c3RlbSh7XG4gICAgYmc6IHtcbiAgICAgIHByb3BlcnR5OiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgIHNjYWxlOiAnY29sb3JzJyxcbiAgICB9LFxuICB9KX1cbmA7XG5cbmV4cG9ydCB7IFRvZ2dsZUxhYmVsLCBUb2dnbGVJbnB1dCwgVG9nZ2xlSW5kaWNhdG9yIH07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0IHsgTGFiZWwgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcblxuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuL0NoZWNrQm94R3JpZC5tanMnO1xuaW1wb3J0IHsgVG9nZ2xlTGFiZWwsIFRvZ2dsZUlucHV0LCBUb2dnbGVJbmRpY2F0b3IgfSBmcm9tICcuL1N3aXRjaC5tanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUb2dnbGVTd2l0Y2goeyBpZCwgY2hlY2tlZCwgb25DaGFuZ2UsIG5hbWUsIGxhYmVsIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8TGFiZWwgaHRtbEZvcj17aWR9PlxuICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgIDxUb2dnbGVMYWJlbCBodG1sRm9yPXtpZH0+XG4gICAgICAgIDxUb2dnbGVJbnB1dFxuICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAvPlxuICAgICAgICA8VG9nZ2xlSW5kaWNhdG9yIGNoZWNrZWQ9e2NoZWNrZWR9IC8+XG4gICAgICA8L1RvZ2dsZUxhYmVsPlxuICAgIDwvTGFiZWw+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSDYgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJzsgLy9Cb3gsIExhYmVsLFxuXG5pbXBvcnQgeyBMYWJlbCwgQ2hlY2tib3hHcmlkLCBCb3ggfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL0NoZWNrQm94R3JpZC5tanMnO1xuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL1RvZ2dsZVN3aXRjaCc7XG5cbmNvbnN0IEN1c3RvbUNoZWNrQm94ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgb25DaGFuZ2UsIHJlY29yZCwgcHJvcGVydHksIHJlc291cmNlIH0gPSBwcm9wcztcbiAgY29uc3QgY2hlY2tCb3hlcyA9IHByb3BlcnR5LmF2YWlsYWJsZVZhbHVlcztcbiAgY29uc3QgW3BhcmVudFZhbHVlLCBzZXRQYXJlbnRWYWx1ZV0gPSB1c2VTdGF0ZShcbiAgICByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnByb3BzLnBhcmVudF1cbiAgKTtcbiAgY29uc3QgaW5pdGlhbFN0YXRlID0gY2hlY2tCb3hlcy5yZWR1Y2UoKGFjYywgY2hlY2spID0+IHtcbiAgICBhY2NbY2hlY2sudmFsdWVdID0gZmFsc2U7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuXG4gIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSB1c2VTdGF0ZShcbiAgICBwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUuaW5jbHVkZXMocmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wcm9wcy5wYXJlbnRdKVxuICApO1xuXG4gIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IHVzZVN0YXRlKGluaXRpYWxTdGF0ZSk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGZpZWxkKSA9PiB7XG4gICAgc2V0Q2hlY2tlZCgocHJldlN0YXRlKSA9PiAoe1xuICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgW2ZpZWxkXTogIWNoZWNrZWRbZmllbGRdLFxuICAgIH0pKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IG5ld1Zpc2liaWxpdHkgPSBwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUuaW5jbHVkZXMoXG4gICAgICByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnByb3BzLnBhcmVudF1cbiAgICApO1xuICAgIHNldElzVmlzaWJsZShuZXdWaXNpYmlsaXR5KTtcbiAgfSwgW3JlY29yZC5wYXJhbXNbcHJvcGVydHkucHJvcHMucGFyZW50XV0pOyAvLyByZWNvcmQucGFyYW1zW3Byb3BlcnR5LnByb3BzLnBhcmVudF0gIEpTT04uc3RyaW5naWZ5KHJlY29yZC5wYXJhbXNbcHJvcGVydHkucHJvcHMucGFyZW50XSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrZWQpLmZvckVhY2goKGtleSkgPT4gb25DaGFuZ2Uoa2V5LCBjaGVja2VkW2tleV0pKTtcbiAgfSwgW2NoZWNrZWRdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaXNWaXNpYmxlKSBzZXRDaGVja2VkKGluaXRpYWxTdGF0ZSk7XG4gIH0sIFtpc1Zpc2libGVdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNWaXNpYmxlICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8SDY+e3Byb3BlcnR5LnByb3BzLmxhYmVsfTwvSDY+XG4gICAgICAgICAgPENoZWNrYm94R3JpZD5cbiAgICAgICAgICAgIHtjaGVja0JveGVzLm1hcCgoYm94LCBpKSA9PiAoXG4gICAgICAgICAgICAgIDxCb3gga2V5PXtpfT5cbiAgICAgICAgICAgICAgICA8TGFiZWwgaHRtbEZvcj17aX0+XG4gICAgICAgICAgICAgICAgICB7Ym94LmxhYmVsfVxuICAgICAgICAgICAgICAgICAgPFRvZ2dsZVN3aXRjaFxuICAgICAgICAgICAgICAgICAgICBpZD17aX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBoYW5kbGVDaGFuZ2UoYm94LnZhbHVlLCBlLnRhcmdldC5jaGVja2VkKX1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17Y2hlY2tlZFtib3gudmFsdWVdfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtib3gudmFsdWV9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9DaGVja2JveEdyaWQ+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBDdXN0b21DaGVja0JveDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBCb3gsIExhYmVsLCBINiwgVGV4dEFyZWEgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcblxuaW1wb3J0IHtcbiAgQ2hlY2tib3hHcmlkLFxuICBTdHlsZWRUZXh0QXJlYSxcbn0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5pbXBvcnQgVG9nZ2xlU3dpdGNoIGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvVG9nZ2xlU3dpdGNoJztcblxuY29uc3QgTG9jYXRpb25JbmZvQ29tcG9uZW50ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IHsgcmVjb3JkLCBwcm9wZXJ0eSwgb25DaGFuZ2UsIHJlc291cmNlIH0gPSBwcm9wcztcbiAgY29uc3QgW2lzVmlzaWJsZSwgc2V0SXNWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lucHV0VmFsdWUsIHNldElucHV0VmFsdWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtoYXNNb3JlLCBzZXRIYXNNb3JlXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcGFnZSwgc2V0UGFnZV0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgcGVyUGFnZSA9IDEwOyAvLyBRdWFuYnRpdMOpIGRlcyBvcHRpb25zIHBhciByZXF1ZXR0ZVxuXG4gIC8vIGdlcmVyIGxlIHByZWNpc2lvblxuXG4gIGNvbnN0IFtzaG93UHJlY2lzaW9uLCBzZXRTaG93UHJlY2lzaW9uXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBsb2FkT3B0aW9ucyA9IGFzeW5jIChpbnB1dFZhbHVlLCBjYWxsYmFjaykgPT4ge1xuICAgIGlmICghaGFzTW9yZSAmJiBpbnB1dFZhbHVlID09PSAnJykgcmV0dXJuOyAvLyBwYXMgZGVzIGFjdGlvbiBzaWwgbnkgYSBwYXMgZGVzIG9wdGlvbnNcblxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgYC9hcGkvcmVzb3VyY2VzL2VxdWlwbWVudF9sb2NhdGlvbnMvYWN0aW9ucy9saXN0P3BlclBhZ2U9JHtwZXJQYWdlfSZwYWdlPSR7cGFnZX1gXG4gICAgICApO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIGNvbnN0IG5ld09wdGlvbnMgPSBkYXRhLnJlY29yZHMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgICB2YWx1ZTogaXRlbS5pZCxcbiAgICAgICAgbGFiZWw6IGl0ZW0udGl0bGUsXG4gICAgICB9KSk7XG5cbiAgICAgIHNldE9wdGlvbnMoKHByZXYpID0+IFsuLi5wcmV2LCAuLi5uZXdPcHRpb25zXSk7IC8vIEpvdW50ZSBsZXMgb3B0aW9uc1xuICAgICAgc2V0SGFzTW9yZShkYXRhLnJlY29yZHMubGVuZ3RoID49IHBlclBhZ2UpOyAvLyBWZWZpcmllciBzaSBpbCB5IGF1cmEgZW5jb3JlIGRlcyBwYWdlc1xuICAgICAgc2V0UGFnZSgocHJldikgPT4gcHJldiArIDEpOyAvLyBNQWogUGFnZSBudW1lcm9cbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG5cbiAgICAgIGNhbGxiYWNrKG5ld09wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggb3B0aW9uczonLCBlcnJvcik7XG4gICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgW3NlbGVjdGVkT3B0aW9uVmFsdWUsIHNldFNlbGVjdGVkT3B0aW9uVmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFt0ZXh0RmllbGRWYWx1ZSwgc2V0VGV4dEZpZWxkVmFsdWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBoYW5kbGVDaGFuZ2VTZWxlY3QgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRTZWxlY3RlZE9wdGlvblZhbHVlKHNlbGVjdGVkT3B0aW9uKTtcbiAgICBvbkNoYW5nZShwcm9wZXJ0eS5wcm9wcy5zZWxlY3QudmFsdWUsIHNlbGVjdGVkT3B0aW9uLnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2VUZXh0RmllbGQgPSAodGV4dCkgPT4ge1xuICAgIHNldFRleHRGaWVsZFZhbHVlKHRleHQpO1xuXG4gICAgb25DaGFuZ2UocHJvcGVydHkucHJvcHMudGV4dEZpZWxkLnZhbHVlLCB0ZXh0RmllbGRWYWx1ZSk7XG4gIH07XG4gIC8vIFNFVCBWSVNJQklMSVRZIC0gQ0hBTkdFIFRIRSBTVEFURSBPTkNFIEZJTklTSEVEXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRJc1Zpc2libGUoXG4gICAgICBwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUuaW5jbHVkZXMocmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wcm9wcy5wYXJlbnRdKVxuICAgICk7XG4gIH0sIFtyZWNvcmQucGFyYW1zW3Byb3BlcnR5LnByb3BzLnBhcmVudF1dKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxvYWRPcHRpb25zKGlucHV0VmFsdWUsICgpID0+IHt9KTtcbiAgfSwgW2lzVmlzaWJsZV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc1Zpc2libGUpIHtcbiAgICAgIG9uQ2hhbmdlKHByb3BlcnR5LnByb3BzLnNlbGVjdC52YWx1ZSwgbnVsbCk7XG4gICAgICBvbkNoYW5nZShwcm9wZXJ0eS5wcm9wcy50ZXh0RmllbGQudmFsdWUsICcnKTtcbiAgICB9XG4gIH0sIFtpc1Zpc2libGVdKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNWaXNpYmxlICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8SDY+e3Byb3BlcnR5LnByb3BzLnNlbGVjdC5sYWJlbH08L0g2PlxuXG4gICAgICAgICAgPENoZWNrYm94R3JpZD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgb25JbnB1dENoYW5nZT17KHZhbHVlKSA9PiBzZXRJbnB1dFZhbHVlKHZhbHVlKX1cbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgICAgICAgb25NZW51U2Nyb2xsVG9Cb3R0b209eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTG9hZGluZyAmJiBoYXNNb3JlKSB7XG4gICAgICAgICAgICAgICAgICBsb2FkT3B0aW9ucyhpbnB1dFZhbHVlLCAoKSA9PiB7fSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiBoYW5kbGVDaGFuZ2VTZWxlY3Qoc2VsZWN0ZWRPcHRpb24pfVxuICAgICAgICAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgaXNTZWFyY2hhYmxlPXt0cnVlfVxuICAgICAgICAgICAgICBmbGV4R3Jvdz17MX1cbiAgICAgICAgICAgICAgd2lkdGg9ezIgLyAzfVxuICAgICAgICAgICAgICBtaW5XaWR0aD0nZmkvdC1jb250ZW50J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxCb3hcbiAgICAgICAgICAgICAgZmxleEdyb3c9ezF9XG4gICAgICAgICAgICAgIHdpZHRoPXsxIC8gM30+XG4gICAgICAgICAgICAgIDxUb2dnbGVTd2l0Y2hcbiAgICAgICAgICAgICAgICBsYWJlbD17cHJvcGVydHkucHJvcHMuY2hlY2tCb3gubGFiZWx9XG4gICAgICAgICAgICAgICAgaWQ9J3ByZWNpc2lvbl90b2dnbGUnXG4gICAgICAgICAgICAgICAgY2hlY2tlZD17c2hvd1ByZWNpc2lvbn1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gc2V0U2hvd1ByZWNpc2lvbighc2hvd1ByZWNpc2lvbil9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8L0NoZWNrYm94R3JpZD5cblxuICAgICAgICAgIHtzaG93UHJlY2lzaW9uICYmIChcbiAgICAgICAgICAgIDxTdHlsZWRUZXh0QXJlYVxuICAgICAgICAgICAgICBpZD17XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UucHJvcGVydGllc1twcm9wZXJ0eS5wcm9wcy50ZXh0RmllbGQudmFsdWVdLnByb3BlcnR5UGF0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5hbWU9e1xuICAgICAgICAgICAgICAgIHJlc291cmNlLnByb3BlcnRpZXNbcHJvcGVydHkucHJvcHMudGV4dEZpZWxkLnZhbHVlXS5wcm9wZXJ0eVBhdGhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IGhhbmRsZUNoYW5nZVRleHRGaWVsZChlLnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgIHJvd3M9ezN9XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wZXJ0eS5wcm9wcy50ZXh0RmllbGQubGFiZWx9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uSW5mb0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5jb25zdCBTaW5nbGVTZWxlY3QgPSAoeyBwcm9wZXJ0eSwgcmVjb3JkLCBvbkNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtvcHRpb25zLCBzZXRPcHRpb25zXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkT3B0aW9uVmFsdWUsIHNldFNlbGVjdGVkT3B0aW9uVmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKHNlbGVjdGVkT3B0aW9uKSA9PiB7XG4gICAgc2V0U2VsZWN0ZWRPcHRpb25WYWx1ZShzZWxlY3RlZE9wdGlvbik7XG4gICAgb25DaGFuZ2UocHJvcGVydHkucGF0aCwgc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUgPT09ICdib29sZWFuJykge1xuICAgICAgc2V0SXNWaXNpYmxlKHByb3BlcnR5LnByb3BzLmlzVmlzaWJsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1Zpc2liaWxpdHkgPSBwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUuaW5jbHVkZXMoXG4gICAgICAgIHJlY29yZC5wYXJhbXNbcHJvcGVydHkucHJvcHMucGFyZW50XVxuICAgICAgKTtcbiAgICAgIHNldElzVmlzaWJsZShuZXdWaXNpYmlsaXR5KTtcbiAgICAgIC8vICAgY29uc29sZS5sb2coJ1Zpc2liaWxpdHkgdXBkYXRlZCB0bzonLCBuZXdWaXNpYmlsaXR5KTtcbiAgICB9XG4gIH0sIFtwcm9wZXJ0eS5wcm9wcy5pc1Zpc2libGUsIHJlY29yZC5wYXJhbXNbcHJvcGVydHkucHJvcHMucGFyZW50XV0pO1xuXG4gIGNvbnN0IGZldGNoT3B0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgYC9hcGkvcmVzb3VyY2VzLyR7cHJvcGVydHkucHJvcHMudGFibGVOYW1lfS9hY3Rpb25zL2xpc3RgXG4gICAgICApO1xuICAgICAgLy8gYC9hcGkvcmVzb3VyY2VzLyR7cHJvcGVydHkucHJvcHMudGFibGVOYW1lfS9hY3Rpb25zL2xpc3Q/ZmlsdGVycy4ke3BhcmVudEZpZWxkfT0ke3BhcmVudFZhbHVlfWBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBTdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgc2V0T3B0aW9ucyhcbiAgICAgICAgZGF0YS5yZWNvcmRzLm1hcCgoaXRlbSkgPT4gKHsgdmFsdWU6IGl0ZW0uaWQsIGxhYmVsOiBpdGVtLnRpdGxlIH0pKVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9wZXJ0eS5wcm9wcy5vcHRpb25zKSByZXR1cm4gc2V0T3B0aW9ucyhwcm9wZXJ0eS5wcm9wcy5vcHRpb25zKTtcbiAgICBmZXRjaE9wdGlvbnMoKTtcbiAgfSwgW3Byb3BlcnR5LnByb3BzLnRhYmxlTmFtZV0pO1xuXG4gIC8vICAgY29uc29sZS5sb2cocmVjb3JkLnBhcmFtcyk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2lzVmlzaWJsZSAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPExhYmVsIGh0bWxGb3I9e3Byb3BlcnR5Lm5hbWV9Pntwcm9wZXJ0eS5wcm9wcy5sYWJlbH08L0xhYmVsPlxuICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiBoYW5kbGVDaGFuZ2Uoc2VsZWN0ZWRPcHRpb24pfVxuICAgICAgICAgICAgbmFtZT17cHJvcGVydHkubmFtZX1cbiAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZE9wdGlvblZhbHVlfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNpbmdsZVNlbGVjdDtcbiIsImNvbnN0IGNvbnRyb2xlRXRhbmNoZWl0ZSA9IChwb2lkcywgcG90ZW50aWVsLCBkZXRlY3Rpb24pID0+IHtcbiAgaWYgKCFwb2lkcykgcmV0dXJuIGBzJ2lsIHZvdXMgcGxhaXQgdGFwZXogbGUgcG9pZHMgLyBjaG9pc3NleiB0eXBlIGRlIGdheiBgO1xuICBjb25zdCBjaGFyZ2UgPSAocG9pZHMgKiBwb3RlbnRpZWwpIC8gMTAwMDtcbiAgLy8gY29uc29sZS5sb2coY2hhcmdlKTtcblxuICBpZiAoaXNOYU4oY2hhcmdlKSkgcmV0dXJuIGBQYXMgYXNzZXogZCdpbmZvcm1hdGlvbmA7XG4gIGlmIChjaGFyZ2UgPCA1KSB7XG4gICAgcmV0dXJuIGRldGVjdGlvblxuICAgICAgPyBgcGFzXG4gICAgICAgIGTigJlvYmxpZ2F0aW9uYCAvLyBBdmVjIHN5c3TDqG1lIGRlIGTDqXRlY3Rpb25cbiAgICAgIDogJ1VuZSBmb2lzIHBhciBhbic7IC8vIFNhbnMgc3lzdMOobWUgZGUgZMOpdGVjdGlvblxuICB9XG5cbiAgaWYgKGNoYXJnZSA+PSA1ICYmIGNoYXJnZSA8PSA1MCkge1xuICAgIHJldHVybiBkZXRlY3Rpb25cbiAgICAgID8gJ1RvdXMgbGVzIDIgYW5zJyAvLyBBdmVjIHN5c3TDqG1lIGRlIGTDqXRlY3Rpb25cbiAgICAgIDogJ1RvdXMgbGVzIDYgbW9pcyc7IC8vIFNhbnMgc3lzdMOobWUgZGUgZMOpdGVjdGlvblxuICB9XG5cbiAgaWYgKGNoYXJnZSA+IDUwICYmIGNoYXJnZSA8PSA1MDApIHtcbiAgICByZXR1cm4gZGV0ZWN0aW9uXG4gICAgICA/ICdUb3VzIGxlcyBhbnMnIC8vIEF2ZWMgc3lzdMOobWUgZGUgZMOpdGVjdGlvblxuICAgICAgOiAnVG91cyBsZXMgNiBtb2lzJzsgLy8gU2FucyBzeXN0w6htZSBkZSBkw6l0ZWN0aW9uXG4gIH1cblxuICAvLyBFbiBzdXBwb3NhbnQgZGVzIGNoYXJnZXMgc3Vww6lyaWV1cmVzIMOgIDUwMCB0IEVxLiBDTzJcbiAgcmV0dXJuIGRldGVjdGlvblxuICAgID8gJ1RvdXMgbGVzIDYgbW9pcycgLy8gQXZlYyBzeXN0w6htZSBkZSBkw6l0ZWN0aW9uXG4gICAgOiAnVG91cyBsZXMgMyBtb2lzJzsgLy8gU2FucyBzeXN0w6htZSBkZSBkw6l0ZWN0aW9uXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb250cm9sZUV0YW5jaGVpdGU7XG5cbmV4cG9ydCBjb25zdCB0ZW1wZXJhdHVyZU9wdGlvbnMgPSAoc3RhcnQsIGVuZCwgc3RlcCA9IDEpID0+IHtcbiAgY29uc3QgcmFuZ2UgPSBbXTtcbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlLnB1c2goaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpID4gZW5kOyBpICs9IHN0ZXApIHtcbiAgICAgIHJhbmdlLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IG9wdGlvbnMgPSBbXTtcbiAgcmFuZ2UuZm9yRWFjaCgocikgPT4gb3B0aW9ucy5wdXNoKHsgdmFsdWU6IHIsIGxhYmVsOiByIH0pKTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBDaGVja2JveEdyaWQsXG4gIExhYmVsIGFzIFN0eWxlZExhYmVsLFxuICBCb3gsXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQ2hlY2tCb3hHcmlkLm1qcyc7XG5pbXBvcnQgeyBJbnB1dCwgTGFiZWwgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCBTaW5nbGVTZWxlY3QgZnJvbSAnLi9TaW5nbGVTZWxlY3QnO1xuXG5pbXBvcnQgVG9nZ2xlU3dpdGNoIGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvVG9nZ2xlU3dpdGNoJztcblxuaW1wb3J0IGNvbnRyb2xlRXRhbmNoZWl0ZSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29udHJvbGVFdGFuY2hlaXRlLm1qcyc7XG5cbmNvbnN0IEdhc1BhcmFtc0NvbXBvbmVudCA9ICh7IHByb3BlcnR5LCByZWNvcmQsIG9uQ2hhbmdlIH0pID0+IHtcbiAgY29uc3QgW2lzVmlzaWJsZSwgc2V0SXNWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3BlcmlvZGljaXRlLCBzZXRQZXJpb2RpY2l0ZV0gPSB1c2VTdGF0ZShjb250cm9sZUV0YW5jaGVpdGUoKSk7XG4gIGNvbnN0IFtwb2lkc0dheiwgc2V0UG9pZEdhel0gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2hhc19sZWFrX2RldGVjdGlvbiwgc2V0X2hhc19sZWFrX2RldGVjdGlvbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBuZXdWaXNpYmlsaXR5ID0gcHJvcGVydHkucHJvcHMuaXNWaXNpYmxlLmluY2x1ZGVzKFxuICAgICAgcmVjb3JkLnBhcmFtc1twcm9wZXJ0eS5wcm9wcy5wYXJlbnRdXG4gICAgKTtcbiAgICBzZXRJc1Zpc2libGUobmV3VmlzaWJpbGl0eSk7XG4gIH0sIFtyZWNvcmQucGFyYW1zW3Byb3BlcnR5LnByb3BzLnBhcmVudF1dKTtcblxuICBjb25zdCBnYXNUeXBlUHJvcGVydHkgPSB7XG4gICAgLi4ucHJvcGVydHksXG4gICAgbGFiZWw6ICdnYXNfdHlwZV9pZCcsXG4gICAgbmFtZTogJ2dhc190eXBlX2lkJyxcbiAgICBwYXRoOiAnZ2FzX3R5cGVfaWQnLFxuICAgIHByb3BlcnR5UGF0aDogJ2dhc190eXBlX2lkJyxcbiAgICBwcm9wczoge1xuICAgICAgLi4ucHJvcGVydHkucHJvcHMsXG4gICAgICBsYWJlbDogJ1R5cGUgZGUgZ2F6JyxcbiAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUlucHV0VmFsdWUgPSAoZ2FzX3dlaWdodCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGdhc193ZWlnaHQpO1xuICAgIHNldFBvaWRHYXoocGFyc2VGbG9hdChnYXNfd2VpZ2h0KSk7XG4gICAgb25DaGFuZ2UoJ2dhc193ZWlnaHQnLCBwYXJzZUZsb2F0KGdhc193ZWlnaHQpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVMZWFrRGV0ZWN0aW9uID0gKCkgPT4ge1xuICAgIHNldF9oYXNfbGVha19kZXRlY3Rpb24oIWhhc19sZWFrX2RldGVjdGlvbik7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBwb3RlbnRpZWwgPSBwcm9wZXJ0eS5wcm9wcy5wb3RlbnRpZWxbcmVjb3JkLnBhcmFtcy5nYXNfdHlwZV9pZF07XG4gICAgc2V0UGVyaW9kaWNpdGUoY29udHJvbGVFdGFuY2hlaXRlKHBvaWRzR2F6LCBwb3RlbnRpZWwsIGhhc19sZWFrX2RldGVjdGlvbikpO1xuICAgIG9uQ2hhbmdlKCdoYXNfbGVha19kZXRlY3Rpb24nLCBoYXNfbGVha19kZXRlY3Rpb24pO1xuICAgIG9uQ2hhbmdlKCdsZWFrX2RldGVjdGlvbl9wZXJpb2RpY2l0eScsIHBlcmlvZGljaXRlKTtcbiAgfSwgW3JlY29yZC5wYXJhbXMuZ2FzX3R5cGVfaWQsIHBvaWRzR2F6LCBoYXNfbGVha19kZXRlY3Rpb25dKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNWaXNpYmxlICYmIChcbiAgICAgICAgPEJveD5cbiAgICAgICAgICA8U3R5bGVkTGFiZWw+e3Byb3BlcnR5LnByb3BzLmxhYmVsfTwvU3R5bGVkTGFiZWw+XG5cbiAgICAgICAgICA8Q2hlY2tib3hHcmlkIG1iPSczJz5cbiAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgIDxTaW5nbGVTZWxlY3RcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eT17Z2FzVHlwZVByb3BlcnR5fVxuICAgICAgICAgICAgICAgIHJlY29yZD17cmVjb3JkfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPEJveD5cbiAgICAgICAgICAgICAgPExhYmVsIGh0bWxGb3I9J2dhc193ZWlnaHQnPlBvaWRzIGRlIGdhejwvTGFiZWw+XG4gICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgIGlkPSdnYXNfd2VpZ2h0J1xuICAgICAgICAgICAgICAgIG5hbWU9J2dhc193ZWlnaHQnXG4gICAgICAgICAgICAgICAgdHlwZT0nbnVtYmVyJ1xuICAgICAgICAgICAgICAgIHN0ZXA9JzAuMDEnXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBoYW5kbGVJbnB1dFZhbHVlKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDwvQ2hlY2tib3hHcmlkPlxuICAgICAgICAgIDxDaGVja2JveEdyaWQ+XG4gICAgICAgICAgICA8Qm94PlxuICAgICAgICAgICAgICA8VG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICAgICAgaWQ9J2hhc19sZWFrX2RldGVjdGlvbidcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gaGFuZGxlTGVha0RldGVjdGlvbigpfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2hhc19sZWFrX2RldGVjdGlvbn1cbiAgICAgICAgICAgICAgICBsYWJlbD0nRMOpdGVjdGV1ciBkZSBmdWl0ZSdcbiAgICAgICAgICAgICAgICBuYW1lPSdoYXNfbGVha19kZXRlY3Rpb24nXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgIDxzcGFuPkNvbnRyw7RsZSBk4oCZw6l0YW5jaMOpaXTDqSBvYmxpZ2F0b2lyZTo8L3NwYW4+XG4gICAgICAgICAgICAgIDxzcGFuPntwZXJpb2RpY2l0ZX08L3NwYW4+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8L0NoZWNrYm94R3JpZD5cbiAgICAgICAgPC9Cb3g+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgR2FzUGFyYW1zQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3gsIExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5pbXBvcnQgeyB0ZW1wZXJhdHVyZU9wdGlvbnMgfSBmcm9tICcuLi8uLi91dGlsaXRpZXMvY29udHJvbGVFdGFuY2hlaXRlLm1qcyc7XG5cbmNvbnN0IFNvdWZmbGFnZUNvbXBvbmVudCA9ICh7XG4gIHBhcmVudCxcbiAgZmV0Y2hBdXgsXG4gIG9wdGlvbnNNYXBwZXIsXG4gIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIsXG59KSA9PiB7XG4gIGNvbnN0IFthdXhRdWVzdGlvbnMsIHNldEF1eFF1ZXN0aW9uc10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW21vZGVPcHRpb24sIHNldE1vZGVPcHRpb25dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbcmVsZXZlVmFsdWUsIHNldFJlbGV2ZVZhbHVlXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3JlcHJpc2VWYWx1ZSwgc2V0UmVwcmlzZVZhbHVlXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3NvdWZEZWx0YVZhbHVlLCBzZXRTb3VmRGVsdGFWYWx1ZV0gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBtb2RlID0gYXV4UXVlc3Rpb25zICYmIGF1eFF1ZXN0aW9uc1swXTtcbiAgY29uc3QgdGVtcFJlbGV2ZSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMV07XG4gIGNvbnN0IHRlbXBSZXByaXNlID0gYXV4UXVlc3Rpb25zICYmIGF1eFF1ZXN0aW9uc1syXTtcbiAgY29uc3Qgc291ZmZsYWdlRGVsdGEgPSBhdXhRdWVzdGlvbnMgJiYgYXV4UXVlc3Rpb25zWzNdO1xuXG4gIGNvbnN0IGhhbmxkZU1vZGUgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRNb2RlT3B0aW9uKHNlbGVjdGVkT3B0aW9uLnZhbHVlKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVSZWxldmUgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRSZWxldmVWYWx1ZShzZWxlY3RlZE9wdGlvbi52YWx1ZSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVJlcHJpc2UgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRSZXByaXNlVmFsdWUoc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1eFF1ZXN0aW9ucykge1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7IGlkOiBtb2RlLmlkLCByZXNwb25zZTogbW9kZU9wdGlvbiB9KTtcbiAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIoe1xuICAgICAgICBpZDogdGVtcFJlbGV2ZS5pZCxcbiAgICAgICAgcmVzcG9uc2U6IHJlbGV2ZVZhbHVlLFxuICAgICAgfSk7XG4gICAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyKHtcbiAgICAgICAgaWQ6IHRlbXBSZXByaXNlLmlkLFxuICAgICAgICByZXNwb25zZTogcmVwcmlzZVZhbHVlLFxuICAgICAgfSk7XG4gICAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyKHtcbiAgICAgICAgaWQ6IHNvdWZmbGFnZURlbHRhLmlkLFxuICAgICAgICByZXNwb25zZTogc291ZkRlbHRhVmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtcbiAgICBtb2RlT3B0aW9uLFxuICAgIHJlbGV2ZVZhbHVlLFxuICAgIHJlcHJpc2VWYWx1ZSxcbiAgICBzb3VmZmxhZ2VEZWx0YSxcbiAgICBzb3VmRGVsdGFWYWx1ZSxcbiAgICBhdXhRdWVzdGlvbnMsXG4gIF0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIHJlbGV2ZVZhbHVlICE9PSBudWxsICYmXG4gICAgICByZWxldmVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICByZXByaXNlVmFsdWUgIT09IG51bGwgJiZcbiAgICAgIHJlcHJpc2VWYWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBzZXRTb3VmRGVsdGFWYWx1ZShyZWxldmVWYWx1ZSAtIHJlcHJpc2VWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFNvdWZEZWx0YVZhbHVlKG51bGwpO1xuICAgIH1cbiAgfSwgW3JlbGV2ZVZhbHVlLCByZXByaXNlVmFsdWVdKTtcblxuICAvLyB1c2VFZmZlY3QoKCkgPT4ge1xuXG4gIC8vICAgc2V0U291ZkRlbHRhVmFsdWUoXG4gIC8vICAgICByZWxldmVWYWx1ZSAmJiByZXByaXNlVmFsdWUgPyByZWxldmVWYWx1ZSAtIHJlcHJpc2VWYWx1ZSA6IG51bGxcbiAgLy8gICApO1xuICAvLyB9LCBbcmVsZXZlVmFsdWUsIHJlcHJpc2VWYWx1ZV0pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoUXVlc3Rpb25zKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoQXV4KHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHBhcmVudERhdGEgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uX3F1ZXN0aW9uX3R5cGVzL3JlY29yZHMvJHtwYXJlbnR9L3Nob3dgXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0QXV4UXVlc3Rpb25zKGRhdGEucXVlc3Rpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBvcHRpb25zOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hRdWVzdGlvbnMoKTtcbiAgfSwgW3BhcmVudF0pO1xuXG4gIHJldHVybiAoXG4gICAgPEJveCBteT17MX0+XG4gICAgICB7YXV4UXVlc3Rpb25zICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXttb2RlLmlkfVxuICAgICAgICAgICAgICBteT17MX0+XG4gICAgICAgICAgICAgIDxzcGFuPnttb2RlLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc01hcHBlcihtb2RlLm9wdGlvbnMpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiBoYW5sZGVNb2RlKHNlbGVjdGVkT3B0aW9uKX1cbiAgICAgICAgICAgICAgbmFtZT17bW9kZS5uYW1lfVxuICAgICAgICAgICAgICB2YWx1ZT17bW9kZU9wdGlvbi52YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPEJveCBtYj17Mn0+XG4gICAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgICAgaHRtbEZvcj17dGVtcFJlbGV2ZS5pZH1cbiAgICAgICAgICAgICAgbWI9ezF9PlxuICAgICAgICAgICAgICB7dGVtcFJlbGV2ZS5uYW1lfVxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgb3B0aW9ucz17dGVtcGVyYXR1cmVPcHRpb25zKC01LCA2MSl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWRPcHRpb24pID0+IGhhbmRsZVJlbGV2ZShzZWxlY3RlZE9wdGlvbil9XG4gICAgICAgICAgICAgIG5hbWU9e3RlbXBSZWxldmUubmFtZX1cbiAgICAgICAgICAgICAgdmFsdWU9e3JlbGV2ZVZhbHVlLnZhbHVlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXt0ZW1wUmVwcmlzZS5pZH1cbiAgICAgICAgICAgICAgbWI9ezF9PlxuICAgICAgICAgICAgICB7dGVtcFJlcHJpc2UubmFtZX1cbiAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIG9wdGlvbnM9e3RlbXBlcmF0dXJlT3B0aW9ucygtNSwgNDEpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiBoYW5kbGVSZXByaXNlKHNlbGVjdGVkT3B0aW9uKX1cbiAgICAgICAgICAgICAgbmFtZT17dGVtcFJlcHJpc2UubmFtZX1cbiAgICAgICAgICAgICAgdmFsdWU9e3JlcHJpc2VWYWx1ZS52YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgPEJveCBtYj17Mn0+XG4gICAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgICAgaHRtbEZvcj17c291ZmZsYWdlRGVsdGEuaWR9XG4gICAgICAgICAgICAgIG1iPXsxfT5cbiAgICAgICAgICAgICAge3NvdWZmbGFnZURlbHRhLm5hbWV9XG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIHtzb3VmRGVsdGFWYWx1ZSA/IHNvdWZEZWx0YVZhbHVlIDogJ0VudHJleiByZWxldmUgb3UgcmVwcmlzZSd9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNvdWZmbGFnZUNvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQm94LCBMYWJlbCB9IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQ2hlY2tCb3hHcmlkLm1qcyc7XG5pbXBvcnQgeyBTZWxlY3QgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcblxuaW1wb3J0IHsgdGVtcGVyYXR1cmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbnRyb2xlRXRhbmNoZWl0ZS5tanMnO1xuXG5jb25zdCBQcmVzc2lvbnNDb21wb25lbnQgPSAoe1xuICBwYXJlbnQsXG4gIGZldGNoQXV4LFxuICBvcHRpb25zTWFwcGVyLFxuICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyLFxufSkgPT4ge1xuICBjb25zdCBbYXV4UXVlc3Rpb25zLCBzZXRBdXhRdWVzdGlvbnNdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFttb2RlT3B0aW9uLCBzZXRNb2RlT3B0aW9uXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3ByZXNzaW9uUmVsZXZlVmFsdWUsIHNldFByZXNzaW9uUmVsZXZlVmFsdWVdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IG1vZGUgPSBhdXhRdWVzdGlvbnMgJiYgYXV4UXVlc3Rpb25zWzBdO1xuICBjb25zdCBwcmVzc2lvblJlbGV2ZSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMV07XG5cbiAgY29uc3QgaGFubGRlTW9kZSA9IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIHNldE1vZGVPcHRpb24oc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuICBjb25zdCBoYW5kbGVQcmVzc2lvblJlbGV2ZSA9IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIHNldFByZXNzaW9uUmVsZXZlVmFsdWUoc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hRdWVzdGlvbnMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hBdXgocGFyZW50KTtcbiAgICAgICAgY29uc3QgcGFyZW50RGF0YSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGAvYXBpL3Jlc291cmNlcy9pbnRlcnZlbnRpb25fcXVlc3Rpb25fdHlwZXMvcmVjb3Jkcy8ke3BhcmVudH0vc2hvd2BcbiAgICAgICAgKTtcblxuICAgICAgICBzZXRBdXhRdWVzdGlvbnMoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmZXRjaFF1ZXN0aW9ucygpO1xuICB9LCBbcGFyZW50XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYXV4UXVlc3Rpb25zKSB7XG4gICAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyKHsgaWQ6IG1vZGUuaWQsIHJlc3BvbnNlOiBtb2RlT3B0aW9uIH0pO1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7XG4gICAgICAgIGlkOiBwcmVzc2lvblJlbGV2ZS5pZCxcbiAgICAgICAgcmVzcG9uc2U6IHByZXNzaW9uUmVsZXZlVmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFttb2RlT3B0aW9uLCBwcmVzc2lvblJlbGV2ZVZhbHVlLCBhdXhRdWVzdGlvbnNdKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggbXk9ezF9PlxuICAgICAge2F1eFF1ZXN0aW9ucyAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEJveCBtYj17Mn0+XG4gICAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgICAgaHRtbEZvcj17bW9kZS5pZH1cbiAgICAgICAgICAgICAgbXk9ezF9PlxuICAgICAgICAgICAgICA8c3Bhbj57bW9kZS5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvTGFiZWw+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIG9wdGlvbnM9e29wdGlvbnNNYXBwZXIobW9kZS5vcHRpb25zKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhzZWxlY3RlZE9wdGlvbikgPT4gaGFubGRlTW9kZShzZWxlY3RlZE9wdGlvbil9XG4gICAgICAgICAgICAgIG5hbWU9e21vZGUubmFtZX1cbiAgICAgICAgICAgICAgdmFsdWU9e21vZGVPcHRpb24udmFsdWV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxCb3ggbWI9ezJ9PlxuICAgICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICAgIGh0bWxGb3I9e3ByZXNzaW9uUmVsZXZlLmlkfVxuICAgICAgICAgICAgICBtYj17MX0+XG4gICAgICAgICAgICAgIHtwcmVzc2lvblJlbGV2ZS5uYW1lfSwgQkFSXG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBvcHRpb25zPXt0ZW1wZXJhdHVyZU9wdGlvbnMoMSwgNDApfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PlxuICAgICAgICAgICAgICAgIGhhbmRsZVByZXNzaW9uUmVsZXZlKHNlbGVjdGVkT3B0aW9uKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5hbWU9e3ByZXNzaW9uUmVsZXZlLm5hbWV9XG4gICAgICAgICAgICAgIHZhbHVlPXtwcmVzc2lvblJlbGV2ZVZhbHVlLnZhbHVlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJlc3Npb25zQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3gsIExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG4vLyBUZW1ww6lyYXR1cmUgZGUgZMOpcGFydCBk4oCZZWF1ID8gKExJU1RFIERFIENIT0lYKSBkZSAtNcKwIMOgICs3MMKwIGRlIDEgZW4gMSAoRXhlbXBsZSA6IC01wrAgOyAtNMKwIDsgLTPCsCA7XG4vLyAgIC0ywrAgOyAtMcKwIDsgMMKwIDsgMcKwIDsgMsKwIDsgM+KApjcwwrApXG4vLyAgIFRlbXDDqXJhdHVyZSBkZSByZXRvdXIgZOKAmWVhdSA/IChMSVNURSBERSBDSE9JWCkgZGUgLTXCsCDDoCArNzDCsCBkZSAxIGVuIDEgKEV4ZW1wbGUgOiAtNcKwIDsgLTTCsCA7IC0zwrAgOyAtXG4vLyAgIDLCsCA7IC0xwrAgOyAwwrAgOyAxwrAgOyAywrAgOyAz4oCmNzDCsClcblxuaW1wb3J0IHsgdGVtcGVyYXR1cmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vdXRpbGl0aWVzL2NvbnRyb2xlRXRhbmNoZWl0ZS5tanMnO1xuXG5jb25zdCBQb21wZUVhdUNvbXBvbmVudCA9ICh7XG4gIHBhcmVudCxcbiAgZmV0Y2hBdXgsXG4gIG9wdGlvbnNNYXBwZXIsXG4gIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIsXG59KSA9PiB7XG4gIGNvbnN0IFthdXhRdWVzdGlvbnMsIHNldEF1eFF1ZXN0aW9uc10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW21vZGVPcHRpb24sIHNldE1vZGVPcHRpb25dID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZGVwYXJ0RWF1VmFsdWUsIHNldERlcGFydEVhdVZhbHVlXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3JldG91ckVhdVZhbHVlLCBzZXRSZXRvdXJFYXVWYWx1ZV0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgbW9kZSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMV07XG4gIGNvbnN0IGRlcGFydEVhdSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMl07XG4gIGNvbnN0IHJldG91ckVhdSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbM107XG5cbiAgY29uc3QgaGFubGRlTW9kZSA9IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIHNldE1vZGVPcHRpb24oc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURlcGFydCA9IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIHNldERlcGFydEVhdVZhbHVlKHNlbGVjdGVkT3B0aW9uLnZhbHVlKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlUmV0b3VyID0gKHNlbGVjdGVkT3B0aW9uKSA9PiB7XG4gICAgc2V0UmV0b3VyRWF1VmFsdWUoc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1eFF1ZXN0aW9ucykge1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7IGlkOiBtb2RlLmlkLCByZXNwb25zZTogbW9kZU9wdGlvbiB9KTtcbiAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIoe1xuICAgICAgICBpZDogZGVwYXJ0RWF1LmlkLFxuICAgICAgICByZXNwb25zZTogZGVwYXJ0RWF1VmFsdWUsXG4gICAgICB9KTtcbiAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIoe1xuICAgICAgICBpZDogcmV0b3VyRWF1LmlkLFxuICAgICAgICByZXNwb25zZTogcmV0b3VyRWF1VmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFttb2RlT3B0aW9uLCBkZXBhcnRFYXVWYWx1ZSwgcmV0b3VyRWF1VmFsdWUsIGF1eFF1ZXN0aW9uc10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hRdWVzdGlvbnMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hBdXgocGFyZW50KTtcbiAgICAgICAgY29uc3QgcGFyZW50RGF0YSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGAvYXBpL3Jlc291cmNlcy9pbnRlcnZlbnRpb25fcXVlc3Rpb25fdHlwZXMvcmVjb3Jkcy8ke3BhcmVudH0vc2hvd2BcbiAgICAgICAgKTtcblxuICAgICAgICBzZXRBdXhRdWVzdGlvbnMoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmZXRjaFF1ZXN0aW9ucygpO1xuICB9LCBbcGFyZW50XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94IG15PXsxfT5cbiAgICAgIHthdXhRdWVzdGlvbnMgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxCb3ggbWI9ezJ9PlxuICAgICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICAgIGh0bWxGb3I9e21vZGUuaWR9XG4gICAgICAgICAgICAgIG15PXsxfT5cbiAgICAgICAgICAgICAgPHNwYW4+e21vZGUubmFtZX08L3NwYW4+XG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zTWFwcGVyKG1vZGUub3B0aW9ucyl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWRPcHRpb24pID0+IGhhbmxkZU1vZGUoc2VsZWN0ZWRPcHRpb24pfVxuICAgICAgICAgICAgICBuYW1lPXttb2RlLm5hbWV9XG4gICAgICAgICAgICAgIHZhbHVlPXttb2RlT3B0aW9uLnZhbHVlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXtkZXBhcnRFYXUuaWR9XG4gICAgICAgICAgICAgIG1iPXsxfT5cbiAgICAgICAgICAgICAge2RlcGFydEVhdS5uYW1lfVxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgb3B0aW9ucz17dGVtcGVyYXR1cmVPcHRpb25zKC01LCA3MSl9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWRPcHRpb24pID0+IGhhbmRsZURlcGFydChzZWxlY3RlZE9wdGlvbil9XG4gICAgICAgICAgICAgIG5hbWU9e2RlcGFydEVhdS5uYW1lfVxuICAgICAgICAgICAgICB2YWx1ZT17ZGVwYXJ0RWF1VmFsdWUudmFsdWV9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICAgIDxCb3ggbWI9ezJ9PlxuICAgICAgICAgICAgPExhYmVsXG4gICAgICAgICAgICAgIGh0bWxGb3I9e3JldG91ckVhdS5pZH1cbiAgICAgICAgICAgICAgbWI9ezF9PlxuICAgICAgICAgICAgICB7cmV0b3VyRWF1Lm5hbWV9XG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBvcHRpb25zPXt0ZW1wZXJhdHVyZU9wdGlvbnMoLTUsIDcxKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhzZWxlY3RlZE9wdGlvbikgPT4gaGFuZGxlUmV0b3VyKHNlbGVjdGVkT3B0aW9uKX1cbiAgICAgICAgICAgICAgbmFtZT17cmV0b3VyRWF1Lm5hbWV9XG4gICAgICAgICAgICAgIHZhbHVlPXtyZXRvdXJFYXVWYWx1ZS52YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvbXBlRWF1Q29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3gsIExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcblxuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL1RvZ2dsZVN3aXRjaCc7XG5cbmNvbnN0IEV0YW5jaGVpdGVDb21wb25lbnQgPSAoeyBwYXJlbnQsIGZldGNoQXV4LCBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyIH0pID0+IHtcbiAgY29uc3QgW2F1eFF1ZXN0aW9ucywgc2V0QXV4UXVlc3Rpb25zXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZXRhbmNoZVJlc2VhdXhWYWx1ZSwgc2V0RXRhbmNoZVJlc2VhdXhWYWx1ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgZXRhbmNoZVJlc2VhdXggPSBhdXhRdWVzdGlvbnMgJiYgYXV4UXVlc3Rpb25zWzBdO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1eFF1ZXN0aW9ucykge1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7XG4gICAgICAgIGlkOiBldGFuY2hlUmVzZWF1eC5pZCxcbiAgICAgICAgcmVzcG9uc2U6IGV0YW5jaGVSZXNlYXV4VmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtldGFuY2hlUmVzZWF1eFZhbHVlLCBhdXhRdWVzdGlvbnNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoUXVlc3Rpb25zKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoQXV4KHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHBhcmVudERhdGEgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uX3F1ZXN0aW9uX3R5cGVzL3JlY29yZHMvJHtwYXJlbnR9L3Nob3dgXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0QXV4UXVlc3Rpb25zKGRhdGEucXVlc3Rpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBvcHRpb25zOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hRdWVzdGlvbnMoKTtcbiAgfSwgW3BhcmVudF0pO1xuXG4gIGNvbnNvbGUubG9nKGF1eFF1ZXN0aW9ucyk7XG4gIHJldHVybiAoXG4gICAgPEJveCBteT17MX0+XG4gICAgICB7YXV4UXVlc3Rpb25zICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXtldGFuY2hlUmVzZWF1eC5pZH1cbiAgICAgICAgICAgICAgbXk9ezF9PlxuICAgICAgICAgICAgICA8c3Bhbj57ZXRhbmNoZVJlc2VhdXgubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgIDxUb2dnbGVTd2l0Y2hcbiAgICAgICAgICAgICAgICBpZD17ZXRhbmNoZVJlc2VhdXguaWR9XG4gICAgICAgICAgICAgICAgbmFtZT17ZXRhbmNoZVJlc2VhdXguaWR9XG4gICAgICAgICAgICAgICAgY2hlY2tlZD17ZXRhbmNoZVJlc2VhdXhWYWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gc2V0RXRhbmNoZVJlc2VhdXhWYWx1ZSghZXRhbmNoZVJlc2VhdXhWYWx1ZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFdGFuY2hlaXRlQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3gsIExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL1RvZ2dsZVN3aXRjaCc7XG5cbmNvbnN0IFNlY3VyaXRlQ29tcG9uZW50ID0gKHtcbiAgcGFyZW50LFxuICBmZXRjaEF1eCxcbiAgb3B0aW9uc01hcHBlcixcbiAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcixcbn0pID0+IHtcbiAgY29uc3QgW2F1eFF1ZXN0aW9ucywgc2V0QXV4UXVlc3Rpb25zXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbbW9kZU9wdGlvbiwgc2V0TW9kZU9wdGlvbl0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtmb25jdGlvbkdyb3VwZVZhbHVlLCBzZXRGb25jdGlvbkdyb3VwZVZhbHVlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBmb25jdGlvbkdyb3VwZSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMF07XG5cbiAgY29uc3QgbW9kZSA9IGF1eFF1ZXN0aW9ucyAmJiBhdXhRdWVzdGlvbnNbMV07XG5cbiAgY29uc3QgaGFubGRlTW9kZSA9IChzZWxlY3RlZE9wdGlvbikgPT4ge1xuICAgIHNldE1vZGVPcHRpb24oc2VsZWN0ZWRPcHRpb24udmFsdWUpO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1eFF1ZXN0aW9ucykge1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7IGlkOiBtb2RlLmlkLCByZXNwb25zZTogbW9kZU9wdGlvbiB9KTtcbiAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIoe1xuICAgICAgICBpZDogZm9uY3Rpb25Hcm91cGUuaWQsXG4gICAgICAgIHJlc3BvbnNlOiBmb25jdGlvbkdyb3VwZVZhbHVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbbW9kZU9wdGlvbiwgZm9uY3Rpb25Hcm91cGVWYWx1ZSwgYXV4UXVlc3Rpb25zXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBmZXRjaFF1ZXN0aW9ucygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaEF1eChwYXJlbnQpO1xuICAgICAgICBjb25zdCBwYXJlbnREYXRhID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgYC9hcGkvcmVzb3VyY2VzL2ludGVydmVudGlvbl9xdWVzdGlvbl90eXBlcy9yZWNvcmRzLyR7cGFyZW50fS9zaG93YFxuICAgICAgICApO1xuXG4gICAgICAgIHNldEF1eFF1ZXN0aW9ucyhkYXRhLnF1ZXN0aW9ucyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggb3B0aW9uczonLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZldGNoUXVlc3Rpb25zKCk7XG4gIH0sIFtwYXJlbnRdKTtcblxuICByZXR1cm4gKFxuICAgIDxCb3ggbXk9ezF9PlxuICAgICAge2F1eFF1ZXN0aW9ucyAmJiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPEJveCBtYj17Mn0+XG4gICAgICAgICAgICA8TGFiZWxcbiAgICAgICAgICAgICAgaHRtbEZvcj17Zm9uY3Rpb25Hcm91cGUuaWR9XG4gICAgICAgICAgICAgIG15PXsxfT5cbiAgICAgICAgICAgICAgPHNwYW4+e2ZvbmN0aW9uR3JvdXBlLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICA8VG9nZ2xlU3dpdGNoXG4gICAgICAgICAgICAgICAgaWQ9e2ZvbmN0aW9uR3JvdXBlLmlkfVxuICAgICAgICAgICAgICAgIG5hbWU9e2ZvbmN0aW9uR3JvdXBlLmlkfVxuICAgICAgICAgICAgICAgIGNoZWNrZWQ9e2ZvbmN0aW9uR3JvdXBlVmFsdWV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHNldEZvbmN0aW9uR3JvdXBlVmFsdWUoIWZvbmN0aW9uR3JvdXBlVmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICA8L0JveD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXttb2RlLmlkfVxuICAgICAgICAgICAgICBteT17MX0+XG4gICAgICAgICAgICAgIDxzcGFuPnttb2RlLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgb3B0aW9ucz17b3B0aW9uc01hcHBlcihtb2RlLm9wdGlvbnMpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHNlbGVjdGVkT3B0aW9uKSA9PiBoYW5sZGVNb2RlKHNlbGVjdGVkT3B0aW9uKX1cbiAgICAgICAgICAgICAgbmFtZT17bW9kZS5uYW1lfVxuICAgICAgICAgICAgICB2YWx1ZT17bW9kZU9wdGlvbi52YWx1ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlY3VyaXRlQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCb3gsIExhYmVsIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcblxuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL1RvZ2dsZVN3aXRjaCc7XG5cbmNvbnN0IFJlc2lzdGFuY2VDb21wb25lbnQgPSAoeyBwYXJlbnQsIGZldGNoQXV4LCBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyIH0pID0+IHtcbiAgY29uc3QgW2F1eFF1ZXN0aW9ucywgc2V0QXV4UXVlc3Rpb25zXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZm9uY3Rpb25Hcm91cGVWYWx1ZSwgc2V0Rm9uY3Rpb25Hcm91cGVWYWx1ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgZm9uY3Rpb25Hcm91cGUgPSBhdXhRdWVzdGlvbnMgJiYgYXV4UXVlc3Rpb25zWzBdO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1eFF1ZXN0aW9ucykge1xuICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcih7XG4gICAgICAgIGlkOiBmb25jdGlvbkdyb3VwZS5pZCxcbiAgICAgICAgcmVzcG9uc2U6IGZvbmN0aW9uR3JvdXBlVmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtmb25jdGlvbkdyb3VwZVZhbHVlLCBhdXhRdWVzdGlvbnNdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoUXVlc3Rpb25zKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGZldGNoQXV4KHBhcmVudCk7XG4gICAgICAgIGNvbnN0IHBhcmVudERhdGEgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uX3F1ZXN0aW9uX3R5cGVzL3JlY29yZHMvJHtwYXJlbnR9L3Nob3dgXG4gICAgICAgICk7XG5cbiAgICAgICAgc2V0QXV4UXVlc3Rpb25zKGRhdGEucXVlc3Rpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBvcHRpb25zOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmV0Y2hRdWVzdGlvbnMoKTtcbiAgfSwgW3BhcmVudF0pO1xuXG4gIHJldHVybiAoXG4gICAgPEJveCBteT17MX0+XG4gICAgICB7YXV4UXVlc3Rpb25zICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8Qm94IG1iPXsyfT5cbiAgICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAgICBodG1sRm9yPXtmb25jdGlvbkdyb3VwZS5pZH1cbiAgICAgICAgICAgICAgbXk9ezF9PlxuICAgICAgICAgICAgICA8c3Bhbj57Zm9uY3Rpb25Hcm91cGUubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgIDxUb2dnbGVTd2l0Y2hcbiAgICAgICAgICAgICAgICBpZD17Zm9uY3Rpb25Hcm91cGUuaWR9XG4gICAgICAgICAgICAgICAgbmFtZT17Zm9uY3Rpb25Hcm91cGUuaWR9XG4gICAgICAgICAgICAgICAgY2hlY2tlZD17Zm9uY3Rpb25Hcm91cGVWYWx1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4gc2V0Rm9uY3Rpb25Hcm91cGVWYWx1ZSghZm9uY3Rpb25Hcm91cGVWYWx1ZSl9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgIDwvQm94PlxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXNpc3RhbmNlQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IExhYmVsLCBCb3ggfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL0NoZWNrQm94R3JpZC5tanMnO1xuaW1wb3J0IFRvZ2dsZVN3aXRjaCBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL1RvZ2dsZVN3aXRjaCc7XG5cbmltcG9ydCBTb3VmZmxhZ2VDb21wb25lbnQgZnJvbSAnLi9Tb3VmZmxhZ2VDb21wb25lbnQnO1xuaW1wb3J0IFByZXNzaW9uc0NvbXBvbmVudCBmcm9tICcuL1ByZXNzaW9uc0NvbXBvbmVudCc7XG5pbXBvcnQgUG9tcGVFYXVDb21wb25lbnQgZnJvbSAnLi9Qb21wZUVhdUNvbXBvbmVudCc7XG5pbXBvcnQgRXRhbmNoZWl0ZUNvbXBvbmVudCBmcm9tICcuL0V0YW5jaGVpdGVDb21wb25lbnQnO1xuaW1wb3J0IFNlY3VyaXRlQ29tcG9uZW50IGZyb20gJy4vU2VjdXJpdGVDb21wb25lbnQnO1xuaW1wb3J0IFJlc2lzdGFuY2VDb21wb25lbnQgZnJvbSAnLi9SZXNpc3RhbmNlQ29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IGZldGNoQWRkaXRpb25hbFF1ZXN0aW9ucyA9IGFzeW5jIChwYXJlbnRJZCwgY2hpbGRJZCA9IG51bGwpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uc19kZXBfcXVlc3Rpb25zL2FjdGlvbnMvZ2V0RGVwUXVlc3Rpb25zP3BhcmVudF9xX2lkPSR7cGFyZW50SWR9JHtcbiAgICAgIGNoaWxkSWQgIT09IG51bGwgPyBgJmNoaWxkX3FfaWQ9JHtjaGlsZElkfWAgOiAnJ1xuICAgIH1gO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggb3B0aW9uczonLCBlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBvcHRpb25zTWFwcGVyID0gKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLnNwbGl0KCcsJykubWFwKChvcHRpb24pID0+ICh7IHZhbHVlOiBvcHRpb24sIGxhYmVsOiBvcHRpb24gfSkpO1xufTtcblxuY29uc3QgUXVlc3Rpb25Db21wb25lbnQgPSAoe1xuICBxdWVzdGlvbixcbiAgcmVjb3JkLFxuICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyLFxuICBjaGlsZFF1ZXN0aW9uc0hhbmRsZXIsXG59KSA9PiB7XG4gIGNvbnN0IFtwYXJlbnRJZHMsIHNldFBhcmVudElkc10gPSB1c2VTdGF0ZShbXSk7XG5cbiAgLy8gYXBpL3Jlc291cmNlcy9pbnRlcnZlbnRpb25zX2RlcF9xdWVzdGlvbnMvYWN0aW9ucy9nZXRQYXJlbnRBbGxcblxuICBjb25zdCBbYXV4UXVlc3Rpb25zLCBzZXRBdXhRdWVzdGlvbnNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcmVzcG9uc2UsIHNldFJlc3BvbnNlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2F1eENvbXAsIHNldEF1eENvbXBdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgY29uc3QgYXV4TWFwcGluZyA9IG5ldyBNYXAoW1xuICAgIFtcbiAgICAgIDYsIC8vIGFkZGVkXG4gICAgICA8U291ZmZsYWdlQ29tcG9uZW50XG4gICAgICAgIHBhcmVudD17N31cbiAgICAgICAgZmV0Y2hBdXg9e2ZldGNoQWRkaXRpb25hbFF1ZXN0aW9uc31cbiAgICAgICAgb3B0aW9uc01hcHBlcj17b3B0aW9uc01hcHBlcn1cbiAgICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcj17cXVlc3Rpb25zVmFsdWVzSGFuZGxlcn1cbiAgICAgIC8+LFxuICAgIF0sXG4gICAgW1xuICAgICAgNywgLy8gYWRkZWRcbiAgICAgIDxTb3VmZmxhZ2VDb21wb25lbnRcbiAgICAgICAgcGFyZW50PXtxdWVzdGlvbi5pZH1cbiAgICAgICAgZmV0Y2hBdXg9e2ZldGNoQWRkaXRpb25hbFF1ZXN0aW9uc31cbiAgICAgICAgb3B0aW9uc01hcHBlcj17b3B0aW9uc01hcHBlcn1cbiAgICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcj17cXVlc3Rpb25zVmFsdWVzSGFuZGxlcn1cbiAgICAgIC8+LFxuICAgIF0sXG4gICAgW1xuICAgICAgNTEsIC8vIGFkZGVkXG4gICAgICA8UHJlc3Npb25zQ29tcG9uZW50XG4gICAgICAgIHBhcmVudD17cXVlc3Rpb24uaWR9XG4gICAgICAgIGZldGNoQXV4PXtmZXRjaEFkZGl0aW9uYWxRdWVzdGlvbnN9XG4gICAgICAgIG9wdGlvbnNNYXBwZXI9e29wdGlvbnNNYXBwZXJ9XG4gICAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXI9e3F1ZXN0aW9uc1ZhbHVlc0hhbmRsZXJ9XG4gICAgICAvPixcbiAgICBdLFxuICAgIFtcbiAgICAgIDI4LCAvLyBhZGRlZFxuICAgICAgPFBvbXBlRWF1Q29tcG9uZW50XG4gICAgICAgIHBhcmVudD17cXVlc3Rpb24uaWR9XG4gICAgICAgIGZldGNoQXV4PXtmZXRjaEFkZGl0aW9uYWxRdWVzdGlvbnN9XG4gICAgICAgIG9wdGlvbnNNYXBwZXI9e29wdGlvbnNNYXBwZXJ9XG4gICAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXI9e3F1ZXN0aW9uc1ZhbHVlc0hhbmRsZXJ9XG4gICAgICAvPixcbiAgICBdLFxuICAgIFtcbiAgICAgIDY5LCAvLyBhZGRlZFxuICAgICAgPFBvbXBlRWF1Q29tcG9uZW50XG4gICAgICAgIHBhcmVudD17cXVlc3Rpb24uaWR9XG4gICAgICAgIGZldGNoQXV4PXtmZXRjaEFkZGl0aW9uYWxRdWVzdGlvbnN9XG4gICAgICAgIG9wdGlvbnNNYXBwZXI9e29wdGlvbnNNYXBwZXJ9XG4gICAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXI9e3F1ZXN0aW9uc1ZhbHVlc0hhbmRsZXJ9XG4gICAgICAvPixcbiAgICBdLFxuICAgIFtcbiAgICAgIDU3LCAvLyBhZGRlZFxuICAgICAgPFNlY3VyaXRlQ29tcG9uZW50XG4gICAgICAgIHBhcmVudD17cXVlc3Rpb24uaWR9XG4gICAgICAgIGZldGNoQXV4PXtmZXRjaEFkZGl0aW9uYWxRdWVzdGlvbnN9XG4gICAgICAgIG9wdGlvbnNNYXBwZXI9e29wdGlvbnNNYXBwZXJ9XG4gICAgICAgIHF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXI9e3F1ZXN0aW9uc1ZhbHVlc0hhbmRsZXJ9XG4gICAgICAvPixcbiAgICBdLFxuICAgIFtcbiAgICAgIDU4LFxuICAgICAgPFJlc2lzdGFuY2VDb21wb25lbnQgLy8gYWRkZWRcbiAgICAgICAgcGFyZW50PXtxdWVzdGlvbi5pZH1cbiAgICAgICAgZmV0Y2hBdXg9e2ZldGNoQWRkaXRpb25hbFF1ZXN0aW9uc31cbiAgICAgICAgcXVlc3Rpb25zVmFsdWVzSGFuZGxlcj17cXVlc3Rpb25zVmFsdWVzSGFuZGxlcn1cbiAgICAgIC8+LFxuICAgIF0sXG4gICAgW1xuICAgICAgNSxcbiAgICAgIDxFdGFuY2hlaXRlQ29tcG9uZW50XG4gICAgICAgIHBhcmVudD17NX1cbiAgICAgICAgY2hpbGQ9ezE3fVxuICAgICAgICBmZXRjaEF1eD17ZmV0Y2hBZGRpdGlvbmFsUXVlc3Rpb25zfVxuICAgICAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyPXtxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyfVxuICAgICAgLz4sXG4gICAgXSxcbiAgXSk7XG4gIC8vICAgYXV4IGRlcHMgLSBpbnRlcnZlbnRpb25fdHlwZV9pZFxuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICBzZXRBdXhDb21wKG51bGwpO1xuICAgIHNldFJlc3BvbnNlKCFyZXNwb25zZSk7XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyKHsgaWQ6IHF1ZXN0aW9uLmlkLCByZXNwb25zZTogcmVzcG9uc2UgfSk7XG4gIH0sIFtxdWVzdGlvbiwgcmVzcG9uc2VdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHNldENoaWxkSWRzKCkge1xuICAgICAgaWYgKCFyZXNwb25zZSAmJiBwYXJlbnRJZHMuaW5jbHVkZXMocXVlc3Rpb24uaWQpKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkSWRzID0gYXdhaXQgZmV0Y2hBZGRpdGlvbmFsUXVlc3Rpb25zKHF1ZXN0aW9uLmlkKTtcblxuICAgICAgICBjaGlsZFF1ZXN0aW9uc0hhbmRsZXIoXG4gICAgICAgICAgY2hpbGRJZHMucXVlc3Rpb25zLm1hcCgocXVlc3Rpb24pID0+IHF1ZXN0aW9uLmlkKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldENoaWxkSWRzKCk7XG4gIH0sIFtyZXNwb25zZSwgcXVlc3Rpb25dKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZXNwb25zZSAmJiBwYXJlbnRJZHMuaW5jbHVkZXMocXVlc3Rpb24uaWQpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJlY29yZC5wYXJhbXMuaW50ZXJ2ZW50aW9uX3R5cGVfaWQgPT09IDEgJiZcbiAgICAgICAgcmVjb3JkLnBhcmFtcy5lcXVpcG1lbnRfdHlwZV9pZCA9PT0gMjggJiZcbiAgICAgICAgcXVlc3Rpb24uaWQgIT09IDVcbiAgICAgICkge1xuICAgICAgICAvLyBoYW5kbGUgcG9tcGUgbWlzIGVuIHNlcnZpY2UgaW50XG4gICAgICAgIHJldHVybiBzZXRBdXhDb21wKGF1eE1hcHBpbmcuZ2V0KHJlY29yZC5wYXJhbXMuZXF1aXBtZW50X3R5cGVfaWQpKTtcbiAgICAgIH1cbiAgICAgIHNldEF1eENvbXAoYXV4TWFwcGluZy5nZXQocXVlc3Rpb24uaWQpKTtcbiAgICB9XG4gIH0sIFtyZXNwb25zZSwgcmVjb3JkLnBhcmFtcy5pbnRlcnZlbnRpb25fdHlwZV9pZCwgcmVjb3JkLnBhcmFtcy5wcm9kdWl0X2lkXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBmZXRjaEF1eCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hBZGRpdGlvbmFsUXVlc3Rpb25zKHF1ZXN0aW9uLmlkKTtcbiAgICAgICAgY29uc3QgcGFyZW50QXJyYXkgPSBhd2FpdCBmZXRjaChcbiAgICAgICAgICBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uc19kZXBfcXVlc3Rpb25zL2FjdGlvbnMvZ2V0UGFyZW50QWxsYFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcGFyZW50QXJyYXkuanNvbigpO1xuICAgICAgICBzZXRQYXJlbnRJZHMoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgICBzZXRBdXhRdWVzdGlvbnMocmVzcG9uc2UpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZmV0Y2hBdXgoKTtcbiAgfSwgW3F1ZXN0aW9uXSk7XG5cbiAgLy8gY29uc29sZS5sb2cocmVjb3JkLnBhcmFtcyk7XG5cbiAgcmV0dXJuIChcbiAgICA8Qm94PlxuICAgICAgPExhYmVsIGh0bWxGb3I9e3F1ZXN0aW9uLmlkfT5cbiAgICAgICAge3F1ZXN0aW9uLm5hbWV9XG4gICAgICAgIDxUb2dnbGVTd2l0Y2hcbiAgICAgICAgICBpZD17cXVlc3Rpb24uaWR9XG4gICAgICAgICAgbmFtZT17cXVlc3Rpb24uaWR9XG4gICAgICAgICAgY2hlY2tlZD17cmVzcG9uc2V9XG4gICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgIDwvTGFiZWw+XG4gICAgICB7YXV4Q29tcH1cbiAgICA8L0JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBRdWVzdGlvbkNvbXBvbmVudCBmcm9tICcuL1F1ZXN0aW9uQ29tcG9uZW50JztcblxuaW1wb3J0IHsgQ2hlY2tib3hHcmlkIH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9DaGVja0JveEdyaWQubWpzJztcblxuY29uc3QgSW50ZXJ2ZW50aW9uc1F1ZXN0aW9uc0NvbXBvbmVudCA9ICh7IG9uQ2hhbmdlLCByZWNvcmQgfSkgPT4ge1xuICBjb25zdCBbcXVlc3Rpb25zLCBzZXRRdWVzdGlvbnNdID0gdXNlU3RhdGUoW10pO1xuXG4gIGNvbnN0IFtxdWVzdGlvblZhbHVlcywgc2V0UXVlc3Rpb25WYWx1ZXNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbY2hpbGRRdWVzdGlvbklkcywgc2V0Q2hpbGRRdWVzdGlvbklkc10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtpbnRlcnZlbnRpb25UeXBlLCBzZXRJbnRlcnZlbnRpb25UeXBlXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW50ZXJ2ZW50aW9uVHlwZShyZWNvcmQucGFyYW1zLmludGVydmVudGlvbl90eXBlX2lkKTtcbiAgfSwgW3JlY29yZC5wYXJhbXMuaW50ZXJ2ZW50aW9uX3R5cGVfaWRdKTtcblxuICAvLyAgU2V0IHF1ZXN0aW9ucyBpbnRvIHRoZSBKU09OIG9iamV0IHBvdXIgYmFja2VuZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG9uQ2hhbmdlKCdxdWVzdGlvbnMnLCBKU09OLnN0cmluZ2lmeShxdWVzdGlvblZhbHVlcykpO1xuICB9LCBbcXVlc3Rpb25WYWx1ZXNdKTtcblxuICAvLyBjaGVjayBmb3IgdGhlIGR1cGxpY2F0ZWQgdmFsdWVzXG5cbiAgY29uc3QgcXVlc3Rpb25zVmFsdWVzSGFuZGxlciA9IChuZXdRdWVzdGlvbikgPT4ge1xuICAgIHNldFF1ZXN0aW9uVmFsdWVzKChwcmV2U3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gWy4uLnByZXZTdGF0ZV07XG4gICAgICBjb25zdCBleGlzdGluZ0luZGV4ID0gcHJldlN0YXRlLmZpbmRJbmRleCgocSkgPT4gcS5pZCA9PT0gbmV3UXVlc3Rpb24uaWQpO1xuICAgICAgaWYgKGV4aXN0aW5nSW5kZXggPiAtMSkge1xuICAgICAgICAvLyBSZXBsYWNlIHRoZSBleGlzdGluZyBvYmplY3Qgd2l0aCB0aGUgbmV3IG9uZVxuICAgICAgICBuZXdTdGF0ZVtleGlzdGluZ0luZGV4XSA9IG5ld1F1ZXN0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkIHRoZSBuZXcgcXVlc3Rpb24gdG8gdGhlIGFycmF5XG4gICAgICAgIG5ld1N0YXRlLnB1c2gobmV3UXVlc3Rpb24pO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIHF1ZXN0aW9uIGlzIGEgcGFyZW50IGFuZCB0aGUgcmVzcG9uc2UgaXMgZmFsc2UsXG4gICAgICAvLyB0aGVuIHJlbW92ZSBhbGwgY2hpbGQgcXVlc3Rpb25zIHJlc3BvbnNlc1xuICAgICAgaWYgKG5ld1F1ZXN0aW9uLnJlc3BvbnNlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbmV3U3RhdGUuZmlsdGVyKChxKSA9PiAhY2hpbGRRdWVzdGlvbklkcy5pbmNsdWRlcyhxLmlkKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBjb25zb2xlLmxvZyhxdWVzdGlvblZhbHVlcyk7XG4gIC8vIGNvbnNvbGUubG9nKHJlY29yZC5wYXJhbXMucXVlc3Rpb25zKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRRdWVzdGlvblZhbHVlcyhbXSk7XG4gICAgZmV0Y2goXG4gICAgICBgL2FwaS9yZXNvdXJjZXMvaW50ZXJ2ZW50aW9uc19xdWVzdGlvbnNfZXF1aXBtZW50L2FjdGlvbnMvZ2V0SW50ZXJ2ZW50aW9uUXVlc3Rpb25zP2ludGVydmVudGlvbl90eXBlX2lkPSR7cmVjb3JkLnBhcmFtcy5pbnRlcnZlbnRpb25fdHlwZV9pZH0mZXF1aXBtZW50X3R5cGVfaWQ9JHtyZWNvcmQucGFyYW1zLmVxdWlwbWVudF90eXBlX2lkfWBcbiAgICApXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgLy8gY29uc3QgcXVlc3Rpb25zID0gcXVlc3Rpb25zU3RhdGVNYXBwZXIoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgICBzZXRRdWVzdGlvbnMoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgfSk7XG4gIH0sIFtcbiAgICByZWNvcmQucGFyYW1zLmVxdWlwbWVudF90eXBlX2lkLFxuICAgIC8vIHJlY29yZC5wYXJhbXMuaW50ZXJ2ZW50aW9uX3R5cGVfaWQsXG4gICAgaW50ZXJ2ZW50aW9uVHlwZSxcbiAgICByZWNvcmQucGFyYW1zLnByb2R1aXRfaWQsXG4gICAgcmVjb3JkLnBhcmFtcy5lbmRyb2l0X2lkLFxuICBdKTtcblxuICByZXR1cm4gKFxuICAgIDxDaGVja2JveEdyaWQ+XG4gICAgICB7cXVlc3Rpb25zLmxlbmd0aCA+IDAgPyAoXG4gICAgICAgIHF1ZXN0aW9ucy5tYXAoKHF1ZXN0aW9uKSA9PiAoXG4gICAgICAgICAgPFF1ZXN0aW9uQ29tcG9uZW50XG4gICAgICAgICAgICBrZXk9e3F1ZXN0aW9uLmlkfVxuICAgICAgICAgICAgcXVlc3Rpb249e3F1ZXN0aW9ufVxuICAgICAgICAgICAgcmVjb3JkPXtyZWNvcmR9XG4gICAgICAgICAgICBxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyPXtxdWVzdGlvbnNWYWx1ZXNIYW5kbGVyfVxuICAgICAgICAgICAgY2hpbGRRdWVzdGlvbnNIYW5kbGVyPXtzZXRDaGlsZFF1ZXN0aW9uSWRzfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpXG4gICAgICApIDogKFxuICAgICAgICA8ZGl2PkNob2lzc2lzZXogVHlwZSBkJ2ludGVydmVudGlvbiBldCAvIG91IGVxdWlwbWVudDwvZGl2PlxuICAgICAgKX1cbiAgICA8L0NoZWNrYm94R3JpZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEludGVydmVudGlvbnNRdWVzdGlvbnNDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL0NoZWNrQm94R3JpZC5tanMnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5pbXBvcnQgVG9nZ2xlU3dpdGNoIGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvVG9nZ2xlU3dpdGNoJztcblxuY29uc3QgY29udmVydE9wdGlvbnMgPSAoc3RyKSA9PiB7XG4gIHJldHVybiBzdHIuc3BsaXQoJywnKS5tYXAoKG9wdGlvbikgPT4gKHsgdmFsdWU6IG9wdGlvbiwgbGFiZWw6IG9wdGlvbiB9KSk7XG59O1xuXG5jb25zdCBjb252ZXJ0UXVlc3Rpb25zID0gKGFycikgPT4ge1xuICBjb25zdCBvYmogPSB7IC4uLmFyclswXSB9O1xuICBkZWxldGUgb2JqLnBhcmVudEluZGV4O1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhvYmopO1xufTtcblxuY29uc3QgQWRkaXRpb25hbFF1ZXN0aW9uc0NvbXBvbmVudCA9ICh7XG4gIHF1ZXN0aW9ucyxcbiAgb25DaGFuZ2UsXG4gIHByb3BlcnR5LFxuICByZWNvcmQsXG59KSA9PiB7XG4gIGNvbnN0IHF1ZXN0aW9uSXRlbXMgPSBjb252ZXJ0UXVlc3Rpb25zKHF1ZXN0aW9ucyk7XG4gIC8vIGNvbnNvbGUubG9nKHF1ZXN0aW9uSXRlbXMpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7cXVlc3Rpb25JdGVtcy5tYXAoKHF1ZXN0aW9uLCBpKSA9PlxuICAgICAgICBxdWVzdGlvbi5vcHRpb25zID8gKFxuICAgICAgICAgIDxkaXYga2V5PXtpfT5cbiAgICAgICAgICAgIDxMYWJlbCBodG1sRm9yPXtpfT5Nb2RlPC9MYWJlbD5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgICBpZD17aX1cbiAgICAgICAgICAgICAgb3B0aW9ucz17Y29udmVydE9wdGlvbnMocXVlc3Rpb24ub3B0aW9ucyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxMYWJlbFxuICAgICAgICAgICAga2V5PXtpfVxuICAgICAgICAgICAgaHRtbEZvcj17cXVlc3Rpb24uaWR9PlxuICAgICAgICAgICAge3F1ZXN0aW9uLm5hbWV9XG4gICAgICAgICAgICA8VG9nZ2xlU3dpdGNoIGlkPXtxdWVzdGlvbi5pZH0gLz5cbiAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICApXG4gICAgICApfVxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWRkaXRpb25hbFF1ZXN0aW9uc0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2hlY2tib3hHcmlkLCBCb3ggfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL0NoZWNrQm94R3JpZC5tanMnO1xuXG5jb25zdCB0cnVlRmFsc2VDb252ZXJ0ZXIgPSAocSkgPT4ge1xuICBpZiAocS50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHEucmVzcG9uc2UsIDEwKSA/ICdPdWknIDogJ05vbic7XG4gIH1cbiAgcmV0dXJuIHEucmVzcG9uc2U7XG59O1xuY29uc3QgSW50ZXJ2ZW50aW9uUXVlc3Rpb25zU2hvdyA9ICh7IHJlY29yZCB9KSA9PiB7XG4gIGNvbnN0IFtxdWVzdGlvbnMsIHNldFF1ZXN0aW9uc10gPSB1c2VTdGF0ZShbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmZXRjaFF1ZXN0aW9ucyA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgICAgYC9hcGkvcmVzb3VyY2VzL2ludGVydmVudGlvbnNfcXVlc3Rpb25zL2FjdGlvbnMvZ2V0UXVlc3Rpb25zP2ludGVydmVudGlvbl9pZD0ke3JlY29yZC5wYXJhbXMuaWR9YFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIFN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICBzZXRRdWVzdGlvbnMoZGF0YS5xdWVzdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmZXRjaFF1ZXN0aW9ucygpO1xuICB9LCBbcmVjb3JkLnBhcmFtcy5pZF0pO1xuXG4gIHJldHVybiAoXG4gICAgPENoZWNrYm94R3JpZCBjb2x1bW5zPXs0fT5cbiAgICAgIHtxdWVzdGlvbnMgJiZcbiAgICAgICAgcXVlc3Rpb25zLm1hcCgocSkgPT4gKFxuICAgICAgICAgIDxCb3gga2V5PXtxLmlkfT5cbiAgICAgICAgICAgIDxzcGFuPntxLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+e3RydWVGYWxzZUNvbnZlcnRlcihxKX08L3NwYW4+XG4gICAgICAgICAgPC9Cb3g+XG4gICAgICAgICkpfVxuICAgIDwvQ2hlY2tib3hHcmlkPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJ2ZW50aW9uUXVlc3Rpb25zU2hvdztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSb3csIENlbGwsIFBhcmFncmFwaCwgQUhyZWYgfSBmcm9tICcuLi9zdHlsZWQtY29tcG9uZW5zL0F0b21zLm1qcyc7XG5cbmNvbnN0IFByb2R1Y3RTaG93ID0gKHsgcHJvZHVpdCwgZW5kcm9pdCwgZXF1aXBtZW50IH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um93PlxuICAgICAgPENlbGw+XG4gICAgICAgIDxQYXJhZ3JhcGggbWI9ezJ9PlN1ciBxdWVsIHByb2R1aXQgZXN0IGluc3RhbGzDqSBsYSBwdWNlIDwvUGFyYWdyYXBoPnsnICd9XG4gICAgICAgIDxBSHJlZiBocmVmPXtgL3Jlc291cmNlcy9lcXVpcG1lbnRfcHJvZHVpdC9yZWNvcmRzLyR7cHJvZHVpdC5pZH0vc2hvd2B9PlxuICAgICAgICAgIHtwcm9kdWl0Lm5hbWUgfHwgJ0xpbmsgdG8gcHJvZHVpdCd9XG4gICAgICAgIDwvQUhyZWY+XG4gICAgICA8L0NlbGw+XG4gICAgICA8Q2VsbD5cbiAgICAgICAgPFBhcmFncmFwaCBtYj17Mn0+QSBxdWVsIGVuZHJvaXQ8L1BhcmFncmFwaD57JyAnfVxuICAgICAgICA8QUhyZWYgaHJlZj17YC9yZXNvdXJjZXMvZXF1aXBtZW50X2VuZHJvaXQvcmVjb3Jkcy8ke2VuZHJvaXQuaWR9L3Nob3dgfT5cbiAgICAgICAgICB7ZW5kcm9pdC5uYW1lIHx8ICdMaW5rIHRvIGVuZHJvaXQnfVxuICAgICAgICA8L0FIcmVmPlxuICAgICAgPC9DZWxsPlxuICAgICAgPENlbGw+XG4gICAgICAgIDxQYXJhZ3JhcGggbWI9ezJ9PlR5cGUgZOKAmXVuaXTDqTwvUGFyYWdyYXBoPnsnICd9XG4gICAgICAgIDxBSHJlZiBocmVmPXtgL3Jlc291cmNlcy9lcXVpcG1lbnRfdHlwZXMvcmVjb3Jkcy8ke2VxdWlwbWVudC5pZH0vc2hvd2B9PlxuICAgICAgICAgIHtlcXVpcG1lbnQubmFtZSB8fCAnTGluayB0byB1bml0w6knfVxuICAgICAgICA8L0FIcmVmPlxuICAgICAgPC9DZWxsPlxuICAgIDwvUm93PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdFNob3c7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgUHJvZHVjdFNob3cgZnJvbSAnLi4vYXRvbXMvUHJvZHVjdFNob3cnO1xuXG5jb25zdCBQYXJhbWV0cmFnZVNob3dDb21wb25lbnQgPSAoeyByZWNvcmQgfSkgPT4ge1xuICBjb25zdCBwcm9kdWl0ID0ge1xuICAgIGlkOiByZWNvcmQucG9wdWxhdGVkLnByb2R1aXRfaWQuaWQsXG4gICAgbmFtZTogcmVjb3JkLnBvcHVsYXRlZC5wcm9kdWl0X2lkLnRpdGxlLFxuICB9O1xuICBjb25zdCBlbmRyb2l0ID0ge1xuICAgIGlkOiByZWNvcmQucG9wdWxhdGVkLmVuZHJvaXRfaWQuaWQsXG4gICAgbmFtZTogcmVjb3JkLnBvcHVsYXRlZC5lbmRyb2l0X2lkLnRpdGxlLFxuICB9O1xuICBjb25zdCBlcXVpcG1lbnQgPSB7XG4gICAgaWQ6IHJlY29yZC5wb3B1bGF0ZWQuZXF1aXBtZW50X3R5cGVfaWQuaWQsXG4gICAgbmFtZTogcmVjb3JkLnBvcHVsYXRlZC5lcXVpcG1lbnRfdHlwZV9pZC50aXRsZSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxQcm9kdWN0U2hvd1xuICAgICAgcHJvZHVpdD17cHJvZHVpdH1cbiAgICAgIGVuZHJvaXQ9e2VuZHJvaXR9XG4gICAgICBlcXVpcG1lbnQ9e2VxdWlwbWVudH1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFyYW1ldHJhZ2VTaG93Q29tcG9uZW50O1xuIiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoT3B0aW9ucyhcbiAgdGFibGVOYW1lLFxuICBwYXJlbnRGaWVsZCA9IG51bGwsXG4gIHBhcmVudFZhbHVlID0gbnVsbFxuKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gYC9hcGkvcmVzb3VyY2VzLyR7dGFibGVOYW1lfS9hY3Rpb25zL2xpc3Qke1xuICAgICAgcGFyZW50RmllbGQgJiYgcGFyZW50VmFsdWUgPyBgP2ZpbHRlcnMuJHtwYXJlbnRGaWVsZH09JHtwYXJlbnRWYWx1ZX1gIDogJydcbiAgICB9YDtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSFRUUCBlcnJvciEgU3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGNvbnN0IGZvcm1hdHRlZE9wdGlvbnMgPSBkYXRhLnJlY29yZHMubWFwKChpdGVtKSA9PiAoe1xuICAgICAgdmFsdWU6IGl0ZW0uaWQsXG4gICAgICBsYWJlbDogaXRlbS50aXRsZSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZvcm1hdHRlZE9wdGlvbnM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG9wdGlvbnM6JywgZXJyb3IpO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQm94LCBMYWJlbCB9IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQ2hlY2tCb3hHcmlkLm1qcyc7XG5cbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuXG5pbXBvcnQgeyBmZXRjaE9wdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2ZldGNoT3B0aW9ucy5tanMnO1xuXG5jb25zdCBQUk9EVUNUX0ZJRUxEX05BTUUgPSAncHJvZHVpdF9pZCc7XG5jb25zdCBQUk9EVUNUX1RBQkxFX05BTUUgPSAnZXF1aXBtZW50X3Byb2R1aXQnO1xuXG5jb25zdCBFTkRST0lUX0ZJRUxEX05BTUUgPSAnZW5kcm9pdF9pZCc7XG5jb25zdCBFTkRST0lUX1RBQkxFX05BTUUgPSAnZXF1aXBtZW50X2VuZHJvaXQnO1xuXG5jb25zdCBFUVVJUE1FTlRfVFlQRV9GSUVMRF9OQU1FID0gJ2VxdWlwbWVudF90eXBlX2lkJztcbmNvbnN0IEVRVUlQTUVOVF9UWVBFX1RBQkxFX05BTUUgPSAnZXF1aXBtZW50X3R5cGVzJztcblxuY29uc3QgUHJvZHVjdFNlbGVjdCA9ICh7IHJlY29yZCwgb25DaGFuZ2UgfSkgPT4ge1xuICBjb25zdCBbcHJvZHVjdE9wdGlvbnMsIHNldFByb2R1Y3RPcHRpb25zXSA9IHVzZVN0YXRlKFtcbiAgICB7IHZhbHVlOiAnJywgbGFiZWw6ICdDaG9pc3Npc2V6IHByb2R1aXQnIH0sXG4gIF0pO1xuICBjb25zdCBbcHJvZHVjdF9pZCwgc2V0UHJvZHVjdElEXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbcHJvZHVjdFNlbGVjdGVkLCBzZXRQcm9kdWN0U2VsZWN0ZWRdID0gdXNlU3RhdGUoW1xuICAgIHsgdmFsdWU6ICcnLCBsYWJlbDogJ0Nob2lzc2lzZXogcHJvZHVpdCcgfSxcbiAgXSk7XG5cbiAgY29uc3QgW2VuZHJvaXRPcHRpb25zLCBzZXRFbmRyb2l0T3B0aW9uc10gPSB1c2VTdGF0ZShbXG4gICAgeyB2YWx1ZTogJycsIGxhYmVsOiAnQ2hvaXNzaXNleiBwcm9kdWl0JyB9LFxuICBdKTtcbiAgY29uc3QgW2VuZHJvaXRfaWQsIHNldEVuZHJvaXRJRF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2VuZHJvaXRTZWxlY3RlZCwgc2V0RW5kcm9pdFNlbGVjdGVkXSA9IHVzZVN0YXRlKFtcbiAgICB7IHZhbHVlOiAnJywgbGFiZWw6ICdDaG9pc3Npc2V6IHByb2R1aXQnIH0sXG4gIF0pO1xuXG4gIGNvbnN0IFtlcXVpcG1lbnRUeXBlT3B0aW9ucywgc2V0RXF1aXBtZW50VHlwZU9wdGlvbnNdID0gdXNlU3RhdGUoW1xuICAgIHsgdmFsdWU6ICcnLCBsYWJlbDogJ0Nob2lzc2lzZXogZW5kcm9pdCcgfSxcbiAgXSk7XG4gIGNvbnN0IFtlcXVpcG1lbnRfdHlwZV9pZCwgc2V0RXF1aXBtZW50VHlwZUlkXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZXF1aXBtZW50U2VsZWN0ZWQsIHNldEVxdWlwbWVudFNlbGVjdGVkXSA9IHVzZVN0YXRlKFtcbiAgICB7IHZhbHVlOiAnJywgbGFiZWw6ICdDaG9pc3Npc2V6IGVuZHJvaXQnIH0sXG4gIF0pO1xuXG4gIC8vIGluaXRpYWwgc2V0dXBcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoUHJvZHVjdE9wdGlvbnMoKSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaE9wdGlvbnMoUFJPRFVDVF9UQUJMRV9OQU1FKTtcbiAgICAgIHNldFByb2R1Y3RPcHRpb25zKHJlcyk7XG4gICAgfVxuXG4gICAgZmV0Y2hQcm9kdWN0T3B0aW9ucygpO1xuICB9LCBbcmVjb3JkLnBhcmFtcy5QUk9EVUNUX0ZJRUxEX05BTUVdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldEVuZHJvaXRTZWxlY3RlZChbeyB2YWx1ZTogJycsIGxhYmVsOiAnQ2hvaXNzaXNleiBwcm9kdWl0JyB9XSk7XG4gICAgc2V0RW5kcm9pdElEKG51bGwpO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoRW5kcm9pdE9wdGlvbnMoKSB7XG4gICAgICBpZiAoIXByb2R1Y3RfaWQpIHJldHVybjtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoT3B0aW9ucyhcbiAgICAgICAgRU5EUk9JVF9UQUJMRV9OQU1FLFxuICAgICAgICBQUk9EVUNUX0ZJRUxEX05BTUUsXG4gICAgICAgIHByb2R1Y3RfaWRcbiAgICAgICk7XG4gICAgICBzZXRFbmRyb2l0T3B0aW9ucyhyZXMpO1xuICAgIH1cblxuICAgIGZldGNoRW5kcm9pdE9wdGlvbnMoKTtcbiAgfSwgW3Byb2R1Y3RfaWQsIHJlY29yZC5wYXJhbXMuUFJPRFVDVF9GSUVMRF9OQU1FXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRFcXVpcG1lbnRTZWxlY3RlZChbeyB2YWx1ZTogJycsIGxhYmVsOiAnQ2hvaXNzaXNleiBlbmRyb2l0JyB9XSk7XG4gICAgc2V0RXF1aXBtZW50VHlwZUlkKG51bGwpO1xuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoRXF1aXBtZW50T3B0aW9ucygpIHtcbiAgICAgIGlmICghcHJvZHVjdF9pZCB8fCAhZW5kcm9pdF9pZCkgcmV0dXJuO1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2hPcHRpb25zKFxuICAgICAgICBFUVVJUE1FTlRfVFlQRV9UQUJMRV9OQU1FLFxuICAgICAgICBFTkRST0lUX0ZJRUxEX05BTUUsXG4gICAgICAgIGVuZHJvaXRfaWRcbiAgICAgICk7XG5cbiAgICAgIHNldEVxdWlwbWVudFR5cGVPcHRpb25zKHJlcyk7XG4gICAgfVxuXG4gICAgZmV0Y2hFcXVpcG1lbnRPcHRpb25zKCk7XG4gIH0sIFtcbiAgICBwcm9kdWN0X2lkLFxuICAgIGVuZHJvaXRfaWQsXG4gICAgcmVjb3JkLnBhcmFtcy5FTkRST0lUX0ZJRUxEX05BTUUsXG4gICAgcmVjb3JkLnBhcmFtcy5QUk9EVUNUX0ZJRUxEX05BTUUsXG4gIF0pO1xuXG4gIC8vIGhhbmRsZXJzXG4gIGNvbnN0IGhhbmRsZVByb2R1Y3RTZWxlY3QgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRQcm9kdWN0U2VsZWN0ZWQoc2VsZWN0ZWRPcHRpb24pO1xuICAgIHNldFByb2R1Y3RJRChzZWxlY3RlZE9wdGlvbi52YWx1ZSk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUVuZHJvaXRTZWxlY3QgPSAoc2VsZWN0ZWRPcHRpb24pID0+IHtcbiAgICBzZXRFbmRyb2l0U2VsZWN0ZWQoc2VsZWN0ZWRPcHRpb24pO1xuICAgIHNldEVuZHJvaXRJRChzZWxlY3RlZE9wdGlvbi52YWx1ZSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRXF1aXBtZW50U2VsZWN0ID0gKHNlbGVjdGVkT3B0aW9uKSA9PiB7XG4gICAgc2V0RXF1aXBtZW50U2VsZWN0ZWQoc2VsZWN0ZWRPcHRpb24pO1xuICAgIHNldEVxdWlwbWVudFR5cGVJZChzZWxlY3RlZE9wdGlvbi52YWx1ZSk7XG4gIH07XG5cbiAgLy8gb24gY2hhbmdlIHVzZUVmZmVjdFxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgb25DaGFuZ2UoUFJPRFVDVF9GSUVMRF9OQU1FLCBwcm9kdWN0X2lkKTtcbiAgICBvbkNoYW5nZShFTkRST0lUX0ZJRUxEX05BTUUsIGVuZHJvaXRfaWQpO1xuICAgIG9uQ2hhbmdlKEVRVUlQTUVOVF9UWVBFX0ZJRUxEX05BTUUsIGVxdWlwbWVudF90eXBlX2lkKTtcbiAgfSwgW3Byb2R1Y3RfaWQsIGVuZHJvaXRfaWQsIGVxdWlwbWVudF90eXBlX2lkXSk7XG5cbiAgLy8gc2V0T3B0aW9ucyhmb3JtYXR0ZWRPcHRpb25zKTtcbiAgLy8gLy8gRk9SIEVESVQgQUNUSU9OIFNldCBpbml0aWFsIHZhbHVlIGFmdGVyIG9wdGlvbnMgaGF2ZSBsb2FkZWRcbiAgLy8gaWYgKHJlY29yZCAmJiByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdKSB7XG4gIC8vICAgY29uc3QgaW5pdGlhbFZhbHVlID0gZm9ybWF0dGVkT3B0aW9ucy5maW5kKFxuICAvLyAgICAgKG9wdCkgPT4gb3B0LnZhbHVlID09PSByZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdXG4gIC8vICAgKTtcbiAgLy8gICBjb25zb2xlLmxvZyhpbml0aWFsVmFsdWUpO1xuICAvLyAgIHNldFNlbGVjdGVkT3B0aW9uVmFsdWUoaW5pdGlhbFZhbHVlKTtcbiAgLy8gfVxuICByZXR1cm4gKFxuICAgIDxCb3ggZGlyZWN0aW9uPSdyb3cnPlxuICAgICAgPEJveD5cbiAgICAgICAgPExhYmVsXG4gICAgICAgICAgaHRtbEZvcj17UFJPRFVDVF9GSUVMRF9OQU1FfVxuICAgICAgICAgIG1iPXsxfT5cbiAgICAgICAgICBTdXIgcXVlbCBwcm9kdWl0IGVzdCBpbnN0YWxsw6kgbGUgcHVjZT9cbiAgICAgICAgPC9MYWJlbD5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGlkPXtQUk9EVUNUX0ZJRUxEX05BTUV9XG4gICAgICAgICAgb3B0aW9ucz17cHJvZHVjdE9wdGlvbnN9XG4gICAgICAgICAgb25DaGFuZ2U9eyhzZWxlY3RlZE9wdGlvbikgPT4gaGFuZGxlUHJvZHVjdFNlbGVjdChzZWxlY3RlZE9wdGlvbil9XG4gICAgICAgICAgbmFtZT17UFJPRFVDVF9GSUVMRF9OQU1FfVxuICAgICAgICAgIHZhbHVlPXtwcm9kdWN0U2VsZWN0ZWR9XG4gICAgICAgIC8+XG4gICAgICA8L0JveD5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxMYWJlbFxuICAgICAgICAgIGh0bWxGb3I9e0VORFJPSVRfRklFTERfTkFNRX1cbiAgICAgICAgICBteT17MX0+XG4gICAgICAgICAgQSBxdWVsIGVuZHJvaXQ/XG4gICAgICAgIDwvTGFiZWw+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBpZD17RU5EUk9JVF9GSUVMRF9OQU1FfVxuICAgICAgICAgIG9wdGlvbnM9e2VuZHJvaXRPcHRpb25zfVxuICAgICAgICAgIG9uQ2hhbmdlPXsoc2VsZWN0ZWRPcHRpb24pID0+IGhhbmRsZUVuZHJvaXRTZWxlY3Qoc2VsZWN0ZWRPcHRpb24pfVxuICAgICAgICAgIG5hbWU9e0VORFJPSVRfRklFTERfTkFNRX1cbiAgICAgICAgICB2YWx1ZT17ZW5kcm9pdFNlbGVjdGVkfVxuICAgICAgICAvPlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94PlxuICAgICAgICA8TGFiZWxcbiAgICAgICAgICBodG1sRm9yPXtFUVVJUE1FTlRfVFlQRV9GSUVMRF9OQU1FfVxuICAgICAgICAgIG15PXsxfT5cbiAgICAgICAgICBUeXBlIGQndW5pdMOpP1xuICAgICAgICA8L0xhYmVsPlxuICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgaWQ9e0VRVUlQTUVOVF9UWVBFX0ZJRUxEX05BTUV9XG4gICAgICAgICAgb3B0aW9ucz17ZXF1aXBtZW50VHlwZU9wdGlvbnN9XG4gICAgICAgICAgb25DaGFuZ2U9eyhzZWxlY3RlZE9wdGlvbikgPT4gaGFuZGxlRXF1aXBtZW50U2VsZWN0KHNlbGVjdGVkT3B0aW9uKX1cbiAgICAgICAgICBuYW1lPXtFUVVJUE1FTlRfVFlQRV9GSUVMRF9OQU1FfVxuICAgICAgICAgIHZhbHVlPXtlcXVpcG1lbnRTZWxlY3RlZH1cbiAgICAgICAgLz5cbiAgICAgIDwvQm94PlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdFNlbGVjdDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEZyZW5jaERhdGUgPSAoeyBkYXRlIH0pID0+IHtcbiAgLy8gQ3JlYXRlIGEgbmV3IGRhdGUgb2JqZWN0IGlmIHRoZSBkYXRlIGlzIGEgc3RyaW5nIG9yIHVzZSB0aGUgZGF0ZSBvYmplY3QgZGlyZWN0bHlcbiAgY29uc3QgZGF0ZU9iaiA9IHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGRhdGUpIDogZGF0ZTtcblxuICAvLyBGb3JtYXQgdGhlIGRhdGUgdXNpbmcgdGhlIEZyZW5jaCBsb2NhbGVcbiAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdmci1GUicsIHtcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgICBtb250aDogJ2xvbmcnLFxuICAgIHllYXI6ICdudW1lcmljJyxcbiAgfSkuZm9ybWF0KGRhdGVPYmopO1xuXG4gIC8vIE91dHB1dCB0aGUgZm9ybWF0dGVkIGRhdGUgaW4gdGhlIGRlc2lyZWQgc3RydWN0dXJlIFwiam91ciAtIG1vaXMgLSBhbm7DqWVcIlxuICBjb25zdCBbZGF5LCBtb250aCwgeWVhcl0gPSBmb3JtYXR0ZWREYXRlLnNwbGl0KCcgJyk7XG4gIGNvbnN0IGRpc3BsYXlEYXRlID0gYCR7ZGF5fSAtICR7bW9udGh9IC0gJHt5ZWFyfWA7XG5cbiAgcmV0dXJuIDxzcGFuPntkaXNwbGF5RGF0ZX08L3NwYW4+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRnJlbmNoRGF0ZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIFNlY3Rpb24sXG4gIEhlYWRpbmcsXG4gIFJvdyxcbiAgQ2VsbCxcbiAgUGFyYWdyYXBoLFxuICBBSHJlZixcbiAgQ29sb3JlZFNwYW4sXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcblxuaW1wb3J0IFByb2R1Y3RTaG93IGZyb20gJy4vUHJvZHVjdFNob3cnO1xuXG5pbXBvcnQgRnJlbmNoRGF0ZSBmcm9tICcuL0ZyZW5jaERhdGUnO1xuXG5leHBvcnQgY29uc3QgZ2V0QWxsUHJvcGVydGllcyA9IChyZWNvcmQpID0+IHtcbiAgY29uc3QgYWxsRW50cmllcyA9IHt9O1xuXG4gIGZvciAoY29uc3QgZW50cnkgb2YgT2JqZWN0LmVudHJpZXMocmVjb3JkLnBhcmFtcykpIHtcbiAgICBhbGxFbnRyaWVzW2VudHJ5WzBdXSA9IGVudHJ5WzFdO1xuICB9XG5cbiAgZm9yIChjb25zdCBlbnRyeSBvZiBPYmplY3QuZW50cmllcyhyZWNvcmQucG9wdWxhdGVkKSkge1xuICAgIGNvbnN0IGtleSA9IGVudHJ5WzBdO1xuICAgIGNvbnN0IHZhbCA9IGVudHJ5WzFdLnBhcmFtcztcbiAgICBhbGxFbnRyaWVzW2tleV0gPSB2YWw7XG4gIH1cblxuICByZXR1cm4gYWxsRW50cmllcztcbn07XG5jb25zdCBFcXVpcG1lbnRTaG93Q29tcG9uZW50ID0gKHsgcmVjb3JkIH0pID0+IHtcbiAgY29uc3QgYWxsRW50cmllcyA9IGdldEFsbFByb3BlcnRpZXMocmVjb3JkKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8U2VjdGlvbiBteD0nYXV0byc+XG4gICAgICAgIDxIZWFkaW5nPlBhcmFtZXRyYWdlPC9IZWFkaW5nPlxuXG4gICAgICAgIDxSb3cgbWI9ezN9PlxuICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgPFBhcmFncmFwaCBtYj17MX0+U2l0ZTo8L1BhcmFncmFwaD57JyAnfVxuICAgICAgICAgICAgPEFIcmVmXG4gICAgICAgICAgICAgIGhyZWY9e2AvcmVzb3VyY2VzL3NpdGVzL3JlY29yZHMvJHthbGxFbnRyaWVzLnNpdGVfaWQuaWR9L3Nob3dgfT5cbiAgICAgICAgICAgICAge2FsbEVudHJpZXMuc2l0ZV9pZC5uYW1lIHx8ICdMaW5rIHRvIFNpdGUnfVxuICAgICAgICAgICAgPC9BSHJlZj5cbiAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICA8UGFyYWdyYXBoIG1iPXsxfT5QdWNlIGlkOiA8L1BhcmFncmFwaD57JyAnfVxuICAgICAgICAgICAgPEFIcmVmXG4gICAgICAgICAgICAgIGhyZWY9e2AvcmVzb3VyY2VzL25mY190YWdzL3JlY29yZHMvJHthbGxFbnRyaWVzLm5mY190YWdfaWQuaWR9L3Nob3dgfT5cbiAgICAgICAgICAgICAge2FsbEVudHJpZXMubmZjX3RhZ19pZC5pZCB8fCAnTGluayB0byBQdWNlJ31cbiAgICAgICAgICAgIDwvQUhyZWY+XG4gICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgIHthbGxFbnRyaWVzLnBhcmVudF9lcXVpcG1lbnRfaWQgJiYgKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGggbWI9ezF9PlBpw6hjZSBjb3VwbMOpZTogPC9QYXJhZ3JhcGg+eycgJ31cbiAgICAgICAgICAgICAgPEFIcmVmXG4gICAgICAgICAgICAgICAgaHJlZj17YC9yZXNvdXJjZXMvZXF1aXBtZW50cy9yZWNvcmRzLyR7YWxsRW50cmllcy5wYXJlbnRfZXF1aXBtZW50X2lkLmlkfS9zaG93YH0+XG4gICAgICAgICAgICAgICAge2FsbEVudHJpZXMucGFyZW50X2VxdWlwbWVudF9pZC5pZCB8fCAnTGluayB0byBQdWNlJ31cbiAgICAgICAgICAgICAgPC9BSHJlZj5cbiAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgPFBhcmFncmFwaCBtYj17MX0+RGF0ZSBkJ2luc3RhbGxhdGlvbjogPC9QYXJhZ3JhcGg+XG4gICAgICAgICAgICA8RnJlbmNoRGF0ZSBkYXRlPXthbGxFbnRyaWVzLmluc3RhbGxhdGlvbl9kYXRlfSAvPlxuICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgPC9Sb3c+XG4gICAgICAgIDxQcm9kdWN0U2hvd1xuICAgICAgICAgIHByb2R1aXQ9e3tcbiAgICAgICAgICAgIGlkOiBhbGxFbnRyaWVzLnByb2R1aXRfaWQuaWQsXG4gICAgICAgICAgICBuYW1lOiBhbGxFbnRyaWVzLnByb2R1aXRfaWQubmFtZSxcbiAgICAgICAgICB9fVxuICAgICAgICAgIGVuZHJvaXQ9e3tcbiAgICAgICAgICAgIGlkOiBhbGxFbnRyaWVzLmVuZHJvaXRfaWQuaWQsXG4gICAgICAgICAgICBuYW1lOiBhbGxFbnRyaWVzLmVuZHJvaXRfaWQubmFtZSxcbiAgICAgICAgICB9fVxuICAgICAgICAgIGVxdWlwbWVudD17e1xuICAgICAgICAgICAgaWQ6IGFsbEVudHJpZXMuZXF1aXBtZW50X3R5cGVfaWQuaWQsXG4gICAgICAgICAgICBuYW1lOiBhbGxFbnRyaWVzLmVxdWlwbWVudF90eXBlX2lkLm5hbWUsXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvU2VjdGlvbj5cbiAgICAgIDxTZWN0aW9uPlxuICAgICAgICA8SGVhZGluZz5JbmZvcm1hdGlvbnM8L0hlYWRpbmc+XG4gICAgICAgIDxSb3cgbWI9ezJ9PlxuICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgPFBhcmFncmFwaD5NYXJxdWU8L1BhcmFncmFwaD5cbiAgICAgICAgICAgIDxQYXJhZ3JhcGg+e2FsbEVudHJpZXMuZXF1aXBtZW50X2JyYW5kX2lkLm5hbWV9PC9QYXJhZ3JhcGg+XG4gICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgPFBhcmFncmFwaD5Nb2RlbDwvUGFyYWdyYXBoPlxuICAgICAgICAgICAgPFBhcmFncmFwaD57YWxsRW50cmllcy5lcXVpcG1lbnRfbW9kZWx9PC9QYXJhZ3JhcGg+XG4gICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgIHthbGxFbnRyaWVzLnNlcmlhbF9udW1iZXIgJiYgKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGg+TiBkZSBzZXJpZTwvUGFyYWdyYXBoPlxuICAgICAgICAgICAgICA8UGFyYWdyYXBoPnthbGxFbnRyaWVzLnNlcmlhbF9udW1iZXJ9PC9QYXJhZ3JhcGg+XG4gICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7YWxsRW50cmllcy5yZW1vdGVfY29udHJvbF9udW1iZXIgJiYgKFxuICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGg+VGVsZWNvbW1hbmRlPC9QYXJhZ3JhcGg+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGg+e2FsbEVudHJpZXMucmVtb3RlX2NvbnRyb2xfbnVtYmVyfTwvUGFyYWdyYXBoPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2FsbEVudHJpZXMuZXF1aXBtZW50X3R5cGVfaWQuaXNfaW50ICYmIChcbiAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICA8UGFyYWdyYXBoPlR5cGU8L1BhcmFncmFwaD5cbiAgICAgICAgICAgICAgPFBhcmFncmFwaD5cbiAgICAgICAgICAgICAgICB7YWxsRW50cmllcy51bml0ZV9pbnRlcmlldXJfdHlwZV9pZFxuICAgICAgICAgICAgICAgICAgPyBhbGxFbnRyaWVzLnVuaXRlX2ludGVyaWV1cl90eXBlX2lkLm5hbWVcbiAgICAgICAgICAgICAgICAgIDogJ25vbiBzcMOpY2lmacOpICd9XG4gICAgICAgICAgICAgIDwvUGFyYWdyYXBoPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2FsbEVudHJpZXMuZXF1aXBtZW50X3R5cGVfaWQuaXNfZXh0ICYmIChcbiAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICA8UGFyYWdyYXBoPlR5cGU8L1BhcmFncmFwaD5cbiAgICAgICAgICAgICAgPFBhcmFncmFwaD5cbiAgICAgICAgICAgICAgICB7YWxsRW50cmllcy51bml0ZV9leHRlcmlldXJfdHlwZV9pZFxuICAgICAgICAgICAgICAgICAgPyBhbGxFbnRyaWVzLnVuaXRlX2V4dGVyaWV1cl90eXBlX2lkLm5hbWVcbiAgICAgICAgICAgICAgICAgIDogJ25vbiBzcMOpY2lmacOpICd9XG4gICAgICAgICAgICAgIDwvUGFyYWdyYXBoPlxuICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvUm93PlxuXG4gICAgICAgIHsvKiA6IHRydWUgZmluYWxpdGVzLmlzX3BsYW5jaGVyX3JhZmZyYWljaHNzYW50IDogdHJ1ZVxuICAgICAgICAgIGZpbmFsaXRlcy5pc19yYWRpYXRldXJzIDogdHJ1ZSBmaW5hbGl0ZXMudmVudGlsb19jb252ZWN0ZXVycyA6IHRydWUgKi99XG4gICAgICAgIHthbGxFbnRyaWVzLmVxdWlwbWVudF90eXBlX2lkLmlzX2ZpbmFsaXRlICYmIChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFJvdyBtYj17Mn0+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICBmb250U3R5bGU9J2l0YWxpYydcbiAgICAgICAgICAgICAgICBmb250Q29sb3I9JyMzOUZGMTQnXG4gICAgICAgICAgICAgICAgbWI9ezF9PlxuICAgICAgICAgICAgICAgIEZpbmFsaXTDqXNcbiAgICAgICAgICAgICAgPC9QYXJhZ3JhcGg+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICAgIDxSb3c+XG4gICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3Bhbj5QbGFuY2hlciBjaGF1ZmZhbnQgOjwvQ29sb3JlZFNwYW4+XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuXG4gICAgICAgICAgICAgICAgICBmb250Q29sb3I9e1xuICAgICAgICAgICAgICAgICAgICBhbGxFbnRyaWVzLmlzX3BsYW5jaGVyX2NoYXVmZmFudCA/ICdhcHByb3ZhbCcgOiAnZGFuZ2VyJ1xuICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIHthbGxFbnRyaWVzLmlzX3BsYW5jaGVyX2NoYXVmZmFudCA/ICcgT3VpJyA6ICcgTm9uJ31cbiAgICAgICAgICAgICAgICA8L0NvbG9yZWRTcGFuPlxuICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3Bhbj5QbGFuY2hlciByYWZmcmFpY2hpc3NhbnQgOjwvQ29sb3JlZFNwYW4+XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuXG4gICAgICAgICAgICAgICAgICBmb250Q29sb3I9e1xuICAgICAgICAgICAgICAgICAgICBhbGxFbnRyaWVzLmlzX3BsYW5jaGVyX3JhZmZyYWljaHNzYW50XG4gICAgICAgICAgICAgICAgICAgICAgPyAnYXBwcm92YWwnXG4gICAgICAgICAgICAgICAgICAgICAgOiAnZGFuZ2VyJ1xuICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIHthbGxFbnRyaWVzLmlzX3BsYW5jaGVyX3JhZmZyYWljaHNzYW50ID8gJyBPdWknIDogJyBOb24nfVxuICAgICAgICAgICAgICAgIDwvQ29sb3JlZFNwYW4+XG4gICAgICAgICAgICAgIDwvQ2VsbD5cbiAgICAgICAgICAgICAgPENlbGw+XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuPlJhZGlhdGV1cnMgOiA8L0NvbG9yZWRTcGFuPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3BhblxuICAgICAgICAgICAgICAgICAgZm9udENvbG9yPXthbGxFbnRyaWVzLmlzX3JhZGlhdGV1cnMgPyAnYXBwcm92YWwnIDogJ2Rhbmdlcid9PlxuICAgICAgICAgICAgICAgICAge2FsbEVudHJpZXMuaXNfcmFkaWF0ZXVycyA/ICcgT3VpJyA6ICcgTm9uJ31cbiAgICAgICAgICAgICAgICA8L0NvbG9yZWRTcGFuPlxuICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3Bhbj5WZW50aWxvLW9udmVjdGV1cihzKSA6PC9Db2xvcmVkU3Bhbj5cbiAgICAgICAgICAgICAgICA8Q29sb3JlZFNwYW5cbiAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcj17XG4gICAgICAgICAgICAgICAgICAgIGFsbEVudHJpZXMudmVudGlsb19jb252ZWN0ZXVycyA/ICdhcHByb3ZhbCcgOiAnZGFuZ2VyJ1xuICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIHtgICR7YWxsRW50cmllcy52ZW50aWxvX2NvbnZlY3RldXJzID8gJyBPdWknIDogJyBOb24nfWB9XG4gICAgICAgICAgICAgICAgPC9Db2xvcmVkU3Bhbj5cbiAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG5cbiAgICAgICAge2FsbEVudHJpZXMuZXF1aXBtZW50X3R5cGVfaWQuaXNfZ2FzICYmIChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPFJvdyBtYj17Mn0+XG4gICAgICAgICAgICAgIDxQYXJhZ3JhcGhcbiAgICAgICAgICAgICAgICBmb250U3R5bGU9J2l0YWxpYydcbiAgICAgICAgICAgICAgICBmb250Q29sb3I9JyMzOUZGMTQnXG4gICAgICAgICAgICAgICAgbWI9ezF9PlxuICAgICAgICAgICAgICAgIEdhcyBJbmZvcm1hdGlvbnNcbiAgICAgICAgICAgICAgPC9QYXJhZ3JhcGg+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgICAgIDxSb3cgbWI9ezJ9PlxuICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8Q29sb3JlZFNwYW4+VHlwZSBkZSBnYXo8L0NvbG9yZWRTcGFuPnsnICd9XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuIGZvbnRDb2xvcj0nYXBwcm92YWwnPlxuICAgICAgICAgICAgICAgICAge2FsbEVudHJpZXMuZ2FzX3R5cGVfaWQubmFtZX1cbiAgICAgICAgICAgICAgICA8L0NvbG9yZWRTcGFuPlxuICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3Bhbj5Qb2lkcyBkZSBnYXo8L0NvbG9yZWRTcGFuPnsnICd9XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuIGZvbnRDb2xvcj0nYXBwcm92YWwnPlxuICAgICAgICAgICAgICAgICAge2FsbEVudHJpZXMuZ2FzX3dlaWdodH1cbiAgICAgICAgICAgICAgICA8L0NvbG9yZWRTcGFuPlxuICAgICAgICAgICAgICA8L0NlbGw+XG4gICAgICAgICAgICAgIDxDZWxsPlxuICAgICAgICAgICAgICAgIDxDb2xvcmVkU3Bhbj5Ew6l0ZWN0ZXVyIGRlIGZ1aXRlOiA8L0NvbG9yZWRTcGFuPnsnICd9XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuXG4gICAgICAgICAgICAgICAgICBmb250Q29sb3I9e1xuICAgICAgICAgICAgICAgICAgICBhbGxFbnRyaWVzLmhhc19sZWFrX2RldGVjdGlvbiA/ICdhcHByb3ZhbCcgOiAnZGFuZ2VyJ1xuICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgIHthbGxFbnRyaWVzLmhhc19sZWFrX2RldGVjdGlvbiA/ICdPdWknIDogJ05vbid9XG4gICAgICAgICAgICAgICAgPC9Db2xvcmVkU3Bhbj5cbiAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgICA8Q2VsbD5cbiAgICAgICAgICAgICAgICA8Q29sb3JlZFNwYW4+Q29udHLDtGxlIGTigJnDqXRhbmNow6lpdMOpIG9ibGlnYXRvaXJlOiA8L0NvbG9yZWRTcGFuPnsnICd9XG4gICAgICAgICAgICAgICAgPENvbG9yZWRTcGFuIGZvbnRDb2xvcj0nYXBwcm92YWwnPlxuICAgICAgICAgICAgICAgICAge2FsbEVudHJpZXMubGVha19kZXRlY3Rpb25fcGVyaW9kaWNpdHl9XG4gICAgICAgICAgICAgICAgPC9Db2xvcmVkU3Bhbj5cbiAgICAgICAgICAgICAgPC9DZWxsPlxuICAgICAgICAgICAgPC9Sb3c+XG4gICAgICAgICAgPC8+XG4gICAgICAgICl9XG4gICAgICA8L1NlY3Rpb24+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcXVpcG1lbnRTaG93Q29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIFNlY3Rpb24sXG4gIEhlYWRpbmcsXG4gIFJvdyxcbiAgQ2VsbCxcbiAgUGFyYWdyYXBoLFxuICBBSHJlZixcbiAgQ29sb3JlZFNwYW4sXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcblxuaW1wb3J0IEZyZW5jaERhdGUgZnJvbSAnLi9GcmVuY2hEYXRlJztcblxuaW1wb3J0IHsgZ2V0QWxsUHJvcGVydGllcyB9IGZyb20gJy4vRXF1aXBtZW50U2hvd0NvbXBvbmVudCc7XG5cbmNvbnN0IEludGVydmVudGlvblNob3dDb21wb25lbnQgPSAoeyByZWNvcmQgfSkgPT4ge1xuICBjb25zdCBhbGxFbnRyaWVzID0gZ2V0QWxsUHJvcGVydGllcyhyZWNvcmQpO1xuXG4gIGNvbnNvbGUubG9nKGFsbEVudHJpZXMpO1xuICByZXR1cm4gPGRpdj5JbnRlcnZlbnRpb25TaG93Q29tcG9uZW50PC9kaXY+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJ2ZW50aW9uU2hvd0NvbXBvbmVudDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuY29uc3QgW2lzUmVhZGFibGVTdHJlYW0sIGlzUmVxdWVzdCwgaXNSZXNwb25zZSwgaXNIZWFkZXJzXSA9IFsnUmVhZGFibGVTdHJlYW0nLCAnUmVxdWVzdCcsICdSZXNwb25zZScsICdIZWFkZXJzJ10ubWFwKGtpbmRPZlRlc3QpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUgPSArdmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbmNvbnN0IEFMUEhBID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59XG5cbmNvbnN0IGdlbmVyYXRlU3RyaW5nID0gKHNpemUgPSAxNiwgYWxwaGFiZXQgPSBBTFBIQUJFVC5BTFBIQV9ESUdJVCkgPT4ge1xuICBsZXQgc3RyID0gJyc7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYWxwaGFiZXQ7XG4gIHdoaWxlIChzaXplLS0pIHtcbiAgICBzdHIgKz0gYWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIGxlbmd0aHwwXVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICByZXR1cm4gdmlzaXQob2JqLCAwKTtcbn1cblxuY29uc3QgaXNBc3luY0ZuID0ga2luZE9mVGVzdCgnQXN5bmNGdW5jdGlvbicpO1xuXG5jb25zdCBpc1RoZW5hYmxlID0gKHRoaW5nKSA9PlxuICB0aGluZyAmJiAoaXNPYmplY3QodGhpbmcpIHx8IGlzRnVuY3Rpb24odGhpbmcpKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRoZW4pICYmIGlzRnVuY3Rpb24odGhpbmcuY2F0Y2gpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1JlYWRhYmxlU3RyZWFtLFxuICBpc1JlcXVlc3QsXG4gIGlzUmVzcG9uc2UsXG4gIGlzSGVhZGVycyxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwiaW1wb3J0IFVSTFNlYXJjaFBhcmFtcyBmcm9tICcuL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzJ1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJy4vY2xhc3Nlcy9Gb3JtRGF0YS5qcydcbmltcG9ydCBCbG9iIGZyb20gJy4vY2xhc3Nlcy9CbG9iLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmNvbnN0IG9yaWdpbiA9IGhhc0Jyb3dzZXJFbnYgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgb3JpZ2luXG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nIGxpa2UgYGZvb1t4XVt5XVt6XWAgYW5kIHJldHVybnMgYW4gYXJyYXkgbGlrZSBgWydmb28nLCAneCcsICd5JywgJ3onXVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBzdHJpbmdzLlxuICovXG5mdW5jdGlvbiBwYXJzZVByb3BQYXRoKG5hbWUpIHtcbiAgLy8gZm9vW3hdW3ldW3pdXG4gIC8vIGZvby54LnkuelxuICAvLyBmb28teC15LXpcbiAgLy8gZm9vIHggeSB6XG4gIHJldHVybiB1dGlscy5tYXRjaEFsbCgvXFx3K3xcXFsoXFx3KildL2csIG5hbWUpLm1hcChtYXRjaCA9PiB7XG4gICAgcmV0dXJuIG1hdGNoWzBdID09PSAnW10nID8gJycgOiBtYXRjaFsxXSB8fCBtYXRjaFswXTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ29udmVydCBhbiBhcnJheSB0byBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY29udmVydCB0byBhbiBvYmplY3QuXG4gKlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhbmQgdmFsdWVzIGFzIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb09iamVjdChhcnIpIHtcbiAgY29uc3Qgb2JqID0ge307XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhcnIpO1xuICBsZXQgaTtcbiAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGxldCBrZXk7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgb2JqW2tleV0gPSBhcnJba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgRm9ybURhdGEgb2JqZWN0IGFuZCByZXR1cm5zIGEgSmF2YVNjcmlwdCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgVGhlIEZvcm1EYXRhIG9iamVjdCB0byBjb252ZXJ0IHRvIEpTT04uXG4gKlxuICogQHJldHVybnMge09iamVjdDxzdHJpbmcsIGFueT4gfCBudWxsfSBUaGUgY29udmVydGVkIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZm9ybURhdGFUb0pTT04oZm9ybURhdGEpIHtcbiAgZnVuY3Rpb24gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXQsIGluZGV4KSB7XG4gICAgbGV0IG5hbWUgPSBwYXRoW2luZGV4KytdO1xuXG4gICAgaWYgKG5hbWUgPT09ICdfX3Byb3RvX18nKSByZXR1cm4gdHJ1ZTtcblxuICAgIGNvbnN0IGlzTnVtZXJpY0tleSA9IE51bWJlci5pc0Zpbml0ZSgrbmFtZSk7XG4gICAgY29uc3QgaXNMYXN0ID0gaW5kZXggPj0gcGF0aC5sZW5ndGg7XG4gICAgbmFtZSA9ICFuYW1lICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzLmhhc093blByb3AodGFyZ2V0LCBuYW1lKSkge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSBbdGFyZ2V0W25hbWVdLCB2YWx1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gICAgfVxuXG4gICAgaWYgKCF0YXJnZXRbbmFtZV0gfHwgIXV0aWxzLmlzT2JqZWN0KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0W25hbWVdLCBpbmRleCk7XG5cbiAgICBpZiAocmVzdWx0ICYmIHV0aWxzLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZm9ybURhdGEpICYmIHV0aWxzLmlzRnVuY3Rpb24oZm9ybURhdGEuZW50cmllcykpIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1EYXRhVG9KU09OO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0hlYWRlcnMoaGVhZGVyKSkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVyLmVudHJpZXMoKSkge1xuICAgICAgICBzZXRIZWFkZXIodmFsdWUsIGtleSwgcmV3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRocm90dGxlIGRlY29yYXRvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmcmVxXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGZyZXEpIHtcbiAgbGV0IHRpbWVzdGFtcCA9IDA7XG4gIGNvbnN0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgdGltZXIgPSBudWxsO1xuICByZXR1cm4gZnVuY3Rpb24gdGhyb3R0bGVkKCkge1xuICAgIGNvbnN0IGZvcmNlID0gdGhpcyA9PT0gdHJ1ZTtcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgaWYgKGZvcmNlIHx8IG5vdyAtIHRpbWVzdGFtcCA+IHRocmVzaG9sZCkge1xuICAgICAgaWYgKHRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAoIXRpbWVyKSB7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgfSwgdGhyZXNob2xkIC0gKG5vdyAtIHRpbWVzdGFtcCkpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGhyb3R0bGU7XG4iLCJpbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSBcIi4vc3BlZWRvbWV0ZXIuanNcIjtcbmltcG9ydCB0aHJvdHRsZSBmcm9tIFwiLi90aHJvdHRsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0sIGZyZXEgPSAzKSA9PiB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIHRocm90dGxlKGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGUsXG4gICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbCAhPSBudWxsXG4gICAgfTtcblxuICAgIGRhdGFbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ10gPSB0cnVlO1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH0sIGZyZXEpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgY2FzZWxlc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMoYSwgYiwgcHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbWVyZ2VNYXAgPSB7XG4gICAgdXJsOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIG1ldGhvZDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBkYXRhOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGJhc2VVUkw6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBwYXJhbXNTZXJpYWxpemVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dE1lc3NhZ2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aENyZWRlbnRpYWxzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhYU1JGVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwpLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG5cbiAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICBpZiAoYXV0aCkge1xuICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgK1xuICAgICAgYnRvYSgoYXV0aC51c2VybmFtZSB8fCAnJykgKyAnOicgKyAoYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChhdXRoLnBhc3N3b3JkKSkgOiAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb250ZW50VHlwZTtcblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSkge1xuICAgIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52KSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKHVuZGVmaW5lZCk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgY29uc3QgW3R5cGUsIC4uLnRva2Vuc10gPSBjb250ZW50VHlwZSA/IGNvbnRlbnRUeXBlLnNwbGl0KCc7JykubWFwKHRva2VuID0+IHRva2VuLnRyaW0oKSkuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKFt0eXBlIHx8ICdtdWx0aXBhcnQvZm9ybS1kYXRhJywgLi4udG9rZW5zXS5qb2luKCc7ICcpKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG5cbiAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgIHdpdGhYU1JGVG9rZW4gJiYgdXRpbHMuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4obmV3Q29uZmlnKSk7XG5cbiAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKG5ld0NvbmZpZy51cmwpKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSB4c3JmSGVhZGVyTmFtZSAmJiB4c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoeHNyZkNvb2tpZU5hbWUpO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0KHhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdDb25maWc7XG59XG5cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgcGFyc2VQcm90b2NvbCBmcm9tICcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IHByb2dyZXNzRXZlbnRSZWR1Y2VyIGZyb20gJy4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMnO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IF9jb25maWcgPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gX2NvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZX0gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxdWVzdC5vcGVuKF9jb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIF9jb25maWcudXJsLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gX2NvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICBjb25zdCByZXNwb25zZUhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShcbiAgICAgICAgJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCAmJiByZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIF9jb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBfY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBfY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChfY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFfY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBfY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBfY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKF9jb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIF9jb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihfY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tIFwiLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3QgY29tcG9zZVNpZ25hbHMgPSAoc2lnbmFscywgdGltZW91dCkgPT4ge1xuICBsZXQgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICBsZXQgYWJvcnRlZDtcblxuICBjb25zdCBvbmFib3J0ID0gZnVuY3Rpb24gKGNhbmNlbCkge1xuICAgIGlmICghYWJvcnRlZCkge1xuICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgY29uc3QgZXJyID0gY2FuY2VsIGluc3RhbmNlb2YgRXJyb3IgPyBjYW5jZWwgOiB0aGlzLnJlYXNvbjtcbiAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICB9XG4gIH1cblxuICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG9uYWJvcnQobmV3IEF4aW9zRXJyb3IoYHRpbWVvdXQgJHt0aW1lb3V0fSBvZiBtcyBleGNlZWRlZGAsIEF4aW9zRXJyb3IuRVRJTUVET1VUKSlcbiAgfSwgdGltZW91dClcblxuICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICBpZiAoc2lnbmFscykge1xuICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIHNpZ25hbHMuZm9yRWFjaChzaWduYWwgPT4ge1xuICAgICAgICBzaWduYWwgJiZcbiAgICAgICAgKHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyID8gc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkgOiBzaWduYWwudW5zdWJzY3JpYmUob25hYm9ydCkpO1xuICAgICAgfSk7XG4gICAgICBzaWduYWxzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsICYmIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyICYmIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpKTtcblxuICBjb25zdCB7c2lnbmFsfSA9IGNvbnRyb2xsZXI7XG5cbiAgc2lnbmFsLnVuc3Vic2NyaWJlID0gdW5zdWJzY3JpYmU7XG5cbiAgcmV0dXJuIFtzaWduYWwsICgpID0+IHtcbiAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRpbWVyID0gbnVsbDtcbiAgfV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VTaWduYWxzO1xuIiwiXG5cbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSwgZW5jb2RlKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcmFibGUpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSA/IGNodW5rIDogKGF3YWl0IGVuY29kZShTdHJpbmcoY2h1bmspKSksIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCwgZW5jb2RlKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplLCBlbmNvZGUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgdHlwZTogJ2J5dGVzJyxcblxuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICBvbkZpbmlzaCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgb25Qcm9ncmVzcyAmJiBvblByb2dyZXNzKGJ5dGVzICs9IGxlbik7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIG9uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IGNvbXBvc2VTaWduYWxzIGZyb20gXCIuLi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzXCI7XG5pbXBvcnQge3RyYWNrU3RyZWFtfSBmcm9tIFwiLi4vaGVscGVycy90cmFja1N0cmVhbS5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBwcm9ncmVzc0V2ZW50UmVkdWNlciBmcm9tIFwiLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qc1wiO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHNldHRsZSBmcm9tIFwiLi4vY29yZS9zZXR0bGUuanNcIjtcblxuY29uc3QgZmV0Y2hQcm9ncmVzc0RlY29yYXRvciA9ICh0b3RhbCwgZm4pID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG4gIHJldHVybiAobG9hZGVkKSA9PiBzZXRUaW1lb3V0KCgpID0+IGZuKHtcbiAgICBsZW5ndGhDb21wdXRhYmxlLFxuICAgIHRvdGFsLFxuICAgIGxvYWRlZFxuICB9KSk7XG59XG5cbmNvbnN0IGlzRmV0Y2hTdXBwb3J0ZWQgPSB0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlcXVlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlc3BvbnNlID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAnZnVuY3Rpb24nO1xuXG4vLyB1c2VkIG9ubHkgaW5zaWRlIHRoZSBmZXRjaCBhZGFwdGVyXG5jb25zdCBlbmNvZGVUZXh0ID0gaXNGZXRjaFN1cHBvcnRlZCAmJiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nID9cbiAgICAoKGVuY29kZXIpID0+IChzdHIpID0+IGVuY29kZXIuZW5jb2RlKHN0cikpKG5ldyBUZXh0RW5jb2RlcigpKSA6XG4gICAgYXN5bmMgKHN0cikgPT4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgbmV3IFJlc3BvbnNlKHN0cikuYXJyYXlCdWZmZXIoKSlcbik7XG5cbmNvbnN0IHN1cHBvcnRzUmVxdWVzdFN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiYgKCgpID0+IHtcbiAgbGV0IGR1cGxleEFjY2Vzc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgaGFzQ29udGVudFR5cGUgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICBib2R5OiBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBnZXQgZHVwbGV4KCkge1xuICAgICAgZHVwbGV4QWNjZXNzZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICdoYWxmJztcbiAgICB9LFxuICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG5cbiAgcmV0dXJuIGR1cGxleEFjY2Vzc2VkICYmICFoYXNDb250ZW50VHlwZTtcbn0pKCk7XG5cbmNvbnN0IERFRkFVTFRfQ0hVTktfU0laRSA9IDY0ICogMTAyNDtcblxuY29uc3Qgc3VwcG9ydHNSZXNwb25zZVN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiYgISEoKCk9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0obmV3IFJlc3BvbnNlKCcnKS5ib2R5KTtcbiAgfSBjYXRjaChlcnIpIHtcbiAgICAvLyByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn0pKCk7XG5cbmNvbnN0IHJlc29sdmVycyA9IHtcbiAgc3RyZWFtOiBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmICgocmVzKSA9PiByZXMuYm9keSlcbn07XG5cbmlzRmV0Y2hTdXBwb3J0ZWQgJiYgKCgocmVzKSA9PiB7XG4gIFsndGV4dCcsICdhcnJheUJ1ZmZlcicsICdibG9iJywgJ2Zvcm1EYXRhJywgJ3N0cmVhbSddLmZvckVhY2godHlwZSA9PiB7XG4gICAgIXJlc29sdmVyc1t0eXBlXSAmJiAocmVzb2x2ZXJzW3R5cGVdID0gdXRpbHMuaXNGdW5jdGlvbihyZXNbdHlwZV0pID8gKHJlcykgPT4gcmVzW3R5cGVdKCkgOlxuICAgICAgKF8sIGNvbmZpZykgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgUmVzcG9uc2UgdHlwZSAnJHt0eXBlfScgaXMgbm90IHN1cHBvcnRlZGAsIEF4aW9zRXJyb3IuRVJSX05PVF9TVVBQT1JULCBjb25maWcpO1xuICAgICAgfSlcbiAgfSk7XG59KShuZXcgUmVzcG9uc2UpKTtcblxuY29uc3QgZ2V0Qm9keUxlbmd0aCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGlmIChib2R5ID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQmxvYihib2R5KSkge1xuICAgIHJldHVybiBib2R5LnNpemU7XG4gIH1cblxuICBpZih1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGJvZHkpKSB7XG4gICAgcmV0dXJuIChhd2FpdCBuZXcgUmVxdWVzdChib2R5KS5hcnJheUJ1ZmZlcigpKS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoYm9keSkpIHtcbiAgICBib2R5ID0gYm9keSArICcnO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTdHJpbmcoYm9keSkpIHtcbiAgICByZXR1cm4gKGF3YWl0IGVuY29kZVRleHQoYm9keSkpLmJ5dGVMZW5ndGg7XG4gIH1cbn1cblxuY29uc3QgcmVzb2x2ZUJvZHlMZW5ndGggPSBhc3luYyAoaGVhZGVycywgYm9keSkgPT4ge1xuICBjb25zdCBsZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihoZWFkZXJzLmdldENvbnRlbnRMZW5ndGgoKSk7XG5cbiAgcmV0dXJuIGxlbmd0aCA9PSBudWxsID8gZ2V0Qm9keUxlbmd0aChib2R5KSA6IGxlbmd0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGZXRjaFN1cHBvcnRlZCAmJiAoYXN5bmMgKGNvbmZpZykgPT4ge1xuICBsZXQge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZGF0YSxcbiAgICBzaWduYWwsXG4gICAgY2FuY2VsVG9rZW4sXG4gICAgdGltZW91dCxcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3MsXG4gICAgb25VcGxvYWRQcm9ncmVzcyxcbiAgICByZXNwb25zZVR5cGUsXG4gICAgaGVhZGVycyxcbiAgICB3aXRoQ3JlZGVudGlhbHMgPSAnc2FtZS1vcmlnaW4nLFxuICAgIGZldGNoT3B0aW9uc1xuICB9ID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuXG4gIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSA/IChyZXNwb25zZVR5cGUgKyAnJykudG9Mb3dlckNhc2UoKSA6ICd0ZXh0JztcblxuICBsZXQgW2NvbXBvc2VkU2lnbmFsLCBzdG9wVGltZW91dF0gPSAoc2lnbmFsIHx8IGNhbmNlbFRva2VuIHx8IHRpbWVvdXQpID9cbiAgICBjb21wb3NlU2lnbmFscyhbc2lnbmFsLCBjYW5jZWxUb2tlbl0sIHRpbWVvdXQpIDogW107XG5cbiAgbGV0IGZpbmlzaGVkLCByZXF1ZXN0O1xuXG4gIGNvbnN0IG9uRmluaXNoID0gKCkgPT4ge1xuICAgICFmaW5pc2hlZCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsICYmIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gICAgfSk7XG5cbiAgICBmaW5pc2hlZCA9IHRydWU7XG4gIH1cblxuICBsZXQgcmVxdWVzdENvbnRlbnRMZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICBvblVwbG9hZFByb2dyZXNzICYmIHN1cHBvcnRzUmVxdWVzdFN0cmVhbSAmJiBtZXRob2QgIT09ICdnZXQnICYmIG1ldGhvZCAhPT0gJ2hlYWQnICYmXG4gICAgICAocmVxdWVzdENvbnRlbnRMZW5ndGggPSBhd2FpdCByZXNvbHZlQm9keUxlbmd0aChoZWFkZXJzLCBkYXRhKSkgIT09IDBcbiAgICApIHtcbiAgICAgIGxldCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgZHVwbGV4OiBcImhhbGZcIlxuICAgICAgfSk7XG5cbiAgICAgIGxldCBjb250ZW50VHlwZUhlYWRlcjtcblxuICAgICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgJiYgKGNvbnRlbnRUeXBlSGVhZGVyID0gX3JlcXVlc3QuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKVxuICAgICAgfVxuXG4gICAgICBpZiAoX3JlcXVlc3QuYm9keSkge1xuICAgICAgICBkYXRhID0gdHJhY2tTdHJlYW0oX3JlcXVlc3QuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBmZXRjaFByb2dyZXNzRGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uVXBsb2FkUHJvZ3Jlc3MpXG4gICAgICAgICksIG51bGwsIGVuY29kZVRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNTdHJpbmcod2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgd2l0aENyZWRlbnRpYWxzID0gd2l0aENyZWRlbnRpYWxzID8gJ2NvcnMnIDogJ29taXQnO1xuICAgIH1cblxuICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdCh1cmwsIHtcbiAgICAgIC4uLmZldGNoT3B0aW9ucyxcbiAgICAgIHNpZ25hbDogY29tcG9zZWRTaWduYWwsXG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczogaGVhZGVycy5ub3JtYWxpemUoKS50b0pTT04oKSxcbiAgICAgIGJvZHk6IGRhdGEsXG4gICAgICBkdXBsZXg6IFwiaGFsZlwiLFxuICAgICAgd2l0aENyZWRlbnRpYWxzXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IGlzU3RyZWFtUmVzcG9uc2UpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgICAgIFsnc3RhdHVzJywgJ3N0YXR1c1RleHQnLCAnaGVhZGVycyddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIG9wdGlvbnNbcHJvcF0gPSByZXNwb25zZVtwcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZUNvbnRlbnRMZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihyZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC1sZW5ndGgnKSk7XG5cbiAgICAgIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKFxuICAgICAgICB0cmFja1N0cmVhbShyZXNwb25zZS5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uRG93bmxvYWRQcm9ncmVzcyAmJiBmZXRjaFByb2dyZXNzRGVjb3JhdG9yKFxuICAgICAgICAgIHJlc3BvbnNlQ29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihvbkRvd25sb2FkUHJvZ3Jlc3MsIHRydWUpXG4gICAgICAgICksIGlzU3RyZWFtUmVzcG9uc2UgJiYgb25GaW5pc2gsIGVuY29kZVRleHQpLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSB8fCAndGV4dCc7XG5cbiAgICBsZXQgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzb2x2ZXJzW3V0aWxzLmZpbmRLZXkocmVzb2x2ZXJzLCByZXNwb25zZVR5cGUpIHx8ICd0ZXh0J10ocmVzcG9uc2UsIGNvbmZpZyk7XG5cbiAgICAhaXNTdHJlYW1SZXNwb25zZSAmJiBvbkZpbmlzaCgpO1xuXG4gICAgc3RvcFRpbWVvdXQgJiYgc3RvcFRpbWVvdXQoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgb25GaW5pc2goKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9mZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgZmV0Y2hBZGFwdGVyIGZyb20gJy4vZmV0Y2guanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyLFxuICBmZXRjaDogZmV0Y2hBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjJcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiY29uc3QgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIENvbnRpbnVlOiAxMDAsXG4gIFN3aXRjaGluZ1Byb3RvY29sczogMTAxLFxuICBQcm9jZXNzaW5nOiAxMDIsXG4gIEVhcmx5SGludHM6IDEwMyxcbiAgT2s6IDIwMCxcbiAgQ3JlYXRlZDogMjAxLFxuICBBY2NlcHRlZDogMjAyLFxuICBOb25BdXRob3JpdGF0aXZlSW5mb3JtYXRpb246IDIwMyxcbiAgTm9Db250ZW50OiAyMDQsXG4gIFJlc2V0Q29udGVudDogMjA1LFxuICBQYXJ0aWFsQ29udGVudDogMjA2LFxuICBNdWx0aVN0YXR1czogMjA3LFxuICBBbHJlYWR5UmVwb3J0ZWQ6IDIwOCxcbiAgSW1Vc2VkOiAyMjYsXG4gIE11bHRpcGxlQ2hvaWNlczogMzAwLFxuICBNb3ZlZFBlcm1hbmVudGx5OiAzMDEsXG4gIEZvdW5kOiAzMDIsXG4gIFNlZU90aGVyOiAzMDMsXG4gIE5vdE1vZGlmaWVkOiAzMDQsXG4gIFVzZVByb3h5OiAzMDUsXG4gIFVudXNlZDogMzA2LFxuICBUZW1wb3JhcnlSZWRpcmVjdDogMzA3LFxuICBQZXJtYW5lbnRSZWRpcmVjdDogMzA4LFxuICBCYWRSZXF1ZXN0OiA0MDAsXG4gIFVuYXV0aG9yaXplZDogNDAxLFxuICBQYXltZW50UmVxdWlyZWQ6IDQwMixcbiAgRm9yYmlkZGVuOiA0MDMsXG4gIE5vdEZvdW5kOiA0MDQsXG4gIE1ldGhvZE5vdEFsbG93ZWQ6IDQwNSxcbiAgTm90QWNjZXB0YWJsZTogNDA2LFxuICBQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDQwNyxcbiAgUmVxdWVzdFRpbWVvdXQ6IDQwOCxcbiAgQ29uZmxpY3Q6IDQwOSxcbiAgR29uZTogNDEwLFxuICBMZW5ndGhSZXF1aXJlZDogNDExLFxuICBQcmVjb25kaXRpb25GYWlsZWQ6IDQxMixcbiAgUGF5bG9hZFRvb0xhcmdlOiA0MTMsXG4gIFVyaVRvb0xvbmc6IDQxNCxcbiAgVW5zdXBwb3J0ZWRNZWRpYVR5cGU6IDQxNSxcbiAgUmFuZ2VOb3RTYXRpc2ZpYWJsZTogNDE2LFxuICBFeHBlY3RhdGlvbkZhaWxlZDogNDE3LFxuICBJbUFUZWFwb3Q6IDQxOCxcbiAgTWlzZGlyZWN0ZWRSZXF1ZXN0OiA0MjEsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHk6IDQyMixcbiAgTG9ja2VkOiA0MjMsXG4gIEZhaWxlZERlcGVuZGVuY3k6IDQyNCxcbiAgVG9vRWFybHk6IDQyNSxcbiAgVXBncmFkZVJlcXVpcmVkOiA0MjYsXG4gIFByZWNvbmRpdGlvblJlcXVpcmVkOiA0MjgsXG4gIFRvb01hbnlSZXF1ZXN0czogNDI5LFxuICBSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2U6IDQzMSxcbiAgVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IDQ1MSxcbiAgSW50ZXJuYWxTZXJ2ZXJFcnJvcjogNTAwLFxuICBOb3RJbXBsZW1lbnRlZDogNTAxLFxuICBCYWRHYXRld2F5OiA1MDIsXG4gIFNlcnZpY2VVbmF2YWlsYWJsZTogNTAzLFxuICBHYXRld2F5VGltZW91dDogNTA0LFxuICBIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZDogNTA1LFxuICBWYXJpYW50QWxzb05lZ290aWF0ZXM6IDUwNixcbiAgSW5zdWZmaWNpZW50U3RvcmFnZTogNTA3LFxuICBMb29wRGV0ZWN0ZWQ6IDUwOCxcbiAgTm90RXh0ZW5kZWQ6IDUxMCxcbiAgTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IDUxMSxcbn07XG5cbk9iamVjdC5lbnRyaWVzKEh0dHBTdGF0dXNDb2RlKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgSHR0cFN0YXR1c0NvZGVbdmFsdWVdID0ga2V5O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEh0dHBTdGF0dXNDb2RlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMvYWRhcHRlcnMuanMnO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuZ2V0QWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXI7XG5cbmF4aW9zLkh0dHBTdGF0dXNDb2RlID0gSHR0cFN0YXR1c0NvZGU7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxuLy8gdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwiLy8gRmlsZVVwbG9hZGVyLmpzXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHtcbiAgSW5wdXRBdG9tLFxuICBDb2xvcmVkU3BhbixcbiAgUGFyYWdyYXBoLFxuICBCb3gsXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcblxuZnVuY3Rpb24gRmlsZVVwbG9hZGVyKHsgcHJvcGVydHksIHJlY29yZCwgcmVzb3VyY2UsIG9uQ2hhbmdlIH0pIHtcbiAgY29uc3QgW2ZpbGVQYXRoLCBzZXRGaWxlUGF0aF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW3N1Y2Nlc3NNc2csIHNldFN1Y2Nlc3NNc2ddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtlcnJNc2csIHNldEVyck1zZ10gPSB1c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSBhc3luYyAoZSkgPT4ge1xuICAgIGNvbnN0IGZpbGUgPSBlLnRhcmdldC5maWxlc1swXTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnbXlmaWxlJywgZmlsZSk7XG4gICAgdHJ5IHtcbiAgICAgIHNldEVyck1zZyhudWxsKTtcbiAgICAgIHNldFN1Y2Nlc3NNc2cobnVsbCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLnBvc3QoXG4gICAgICAgIGAvdXBsb2FkP3Jlc291cmNlSWQ9JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgcmVzb3VyY2UuaWRcbiAgICAgICAgKX0mcHJvcGVydHlOYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHByb3BlcnR5Lm5hbWUpfWAsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICB7XG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSByZXNwb25zZTtcblxuICAgICAgc2V0RmlsZVBhdGgoZGF0YS5wYXRoKTtcbiAgICAgIHNldFN1Y2Nlc3NNc2coJ0ZpY2hpZXIgdMOpbMOpY2hhcmfDqSBhdmVjIHN1Y2PDqHMnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBsb2FkaW5nIGZpbGU6JywgZXJyb3IucmVzcG9uc2UpO1xuICAgICAgc2V0RXJyTXNnKFxuICAgICAgICBgRXJyZXVyIGxvcnMgZHUgdMOpbMOpY2hhcmdlbWVudCBkdSBmaWNoaWVyOiAke2Vycm9yLnJlc3BvbnNlLnN0YXR1c1RleHR9YFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIGZpbGVQYXRoKTtcbiAgICB9XG4gIH0sIFtmaWxlUGF0aF0pO1xuXG4gIHJldHVybiAoXG4gICAgPEJveD5cbiAgICAgIDxMYWJlbCBodG1sRm9yPXtwcm9wZXJ0eS5uYW1lfT57cHJvcGVydHkucHJvcHMubGFiZWx9PC9MYWJlbD5cbiAgICAgIDxJbnB1dEF0b21cbiAgICAgICAgaWY9e3Byb3BlcnR5Lm5hbWV9XG4gICAgICAgIHR5cGU9J2ZpbGUnXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAvPlxuXG4gICAgICB7c3VjY2Vzc01zZyAmJiAoXG4gICAgICAgIDxQYXJhZ3JhcGg+XG4gICAgICAgICAgPENvbG9yZWRTcGFuIGZvbnRDb2xvcj0nYXBwcm92YWwnPntzdWNjZXNzTXNnfTwvQ29sb3JlZFNwYW4+XG4gICAgICAgIDwvUGFyYWdyYXBoPlxuICAgICAgKX1cbiAgICAgIHtlcnJNc2cgJiYgKFxuICAgICAgICA8UGFyYWdyYXBoPlxuICAgICAgICAgIDxDb2xvcmVkU3BhbiBmb250Q29sb3I9J2Rhbmdlcic+e2Vyck1zZ308L0NvbG9yZWRTcGFuPlxuICAgICAgICA8L1BhcmFncmFwaD5cbiAgICAgICl9XG4gICAgPC9Cb3g+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVVcGxvYWRlcjtcbiIsIi8qIVxuICogU2lnbmF0dXJlIFBhZCB2Mi4zLjJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvc2lnbmF0dXJlX3BhZFxuICpcbiAqIENvcHlyaWdodCAyMDE3IFN6eW1vbiBOb3dha1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKlxuICogVGhlIG1haW4gaWRlYSBhbmQgc29tZSBwYXJ0cyBvZiB0aGUgY29kZSAoZS5nLiBkcmF3aW5nIHZhcmlhYmxlIHdpZHRoIELDqXppZXIgY3VydmUpIGFyZSB0YWtlbiBmcm9tOlxuICogaHR0cDovL2Nvcm5lci5zcXVhcmV1cC5jb20vMjAxMi8wNy9zbW9vdGhlci1zaWduYXR1cmVzLmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBpbnRlcnBvbGF0aW9uIHVzaW5nIGN1YmljIELDqXppZXIgY3VydmVzIGlzIHRha2VuIGZyb206XG4gKiBodHRwOi8vYmVua25vd3Njb2RlLndvcmRwcmVzcy5jb20vMjAxMi8wOS8xNC9wYXRoLWludGVycG9sYXRpb24tdXNpbmctY3ViaWMtYmV6aWVyLWFuZC1jb250cm9sLXBvaW50LWVzdGltYXRpb24taW4tamF2YXNjcmlwdFxuICpcbiAqIEFsZ29yaXRobSBmb3IgYXBwcm94aW1hdGVkIGxlbmd0aCBvZiBhIELDqXppZXIgY3VydmUgaXMgdGFrZW4gZnJvbTpcbiAqIGh0dHA6Ly93d3cubGVtb2RhLm5ldC9tYXRocy9iZXppZXItbGVuZ3RoL2luZGV4Lmh0bWxcbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLlNpZ25hdHVyZVBhZCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gUG9pbnQoeCwgeSwgdGltZSkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLnRpbWUgPSB0aW1lIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufVxuXG5Qb2ludC5wcm90b3R5cGUudmVsb2NpdHlGcm9tID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHJldHVybiB0aGlzLnRpbWUgIT09IHN0YXJ0LnRpbWUgPyB0aGlzLmRpc3RhbmNlVG8oc3RhcnQpIC8gKHRoaXMudGltZSAtIHN0YXJ0LnRpbWUpIDogMTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kaXN0YW5jZVRvID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54IC0gc3RhcnQueCwgMikgKyBNYXRoLnBvdyh0aGlzLnkgLSBzdGFydC55LCAyKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLnggPT09IG90aGVyLnggJiYgdGhpcy55ID09PSBvdGhlci55ICYmIHRoaXMudGltZSA9PT0gb3RoZXIudGltZTtcbn07XG5cbmZ1bmN0aW9uIEJlemllcihzdGFydFBvaW50LCBjb250cm9sMSwgY29udHJvbDIsIGVuZFBvaW50KSB7XG4gIHRoaXMuc3RhcnRQb2ludCA9IHN0YXJ0UG9pbnQ7XG4gIHRoaXMuY29udHJvbDEgPSBjb250cm9sMTtcbiAgdGhpcy5jb250cm9sMiA9IGNvbnRyb2wyO1xuICB0aGlzLmVuZFBvaW50ID0gZW5kUG9pbnQ7XG59XG5cbi8vIFJldHVybnMgYXBwcm94aW1hdGVkIGxlbmd0aC5cbkJlemllci5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RlcHMgPSAxMDtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBweCA9IHZvaWQgMDtcbiAgdmFyIHB5ID0gdm9pZCAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHN0ZXBzOyBpICs9IDEpIHtcbiAgICB2YXIgdCA9IGkgLyBzdGVwcztcbiAgICB2YXIgY3ggPSB0aGlzLl9wb2ludCh0LCB0aGlzLnN0YXJ0UG9pbnQueCwgdGhpcy5jb250cm9sMS54LCB0aGlzLmNvbnRyb2wyLngsIHRoaXMuZW5kUG9pbnQueCk7XG4gICAgdmFyIGN5ID0gdGhpcy5fcG9pbnQodCwgdGhpcy5zdGFydFBvaW50LnksIHRoaXMuY29udHJvbDEueSwgdGhpcy5jb250cm9sMi55LCB0aGlzLmVuZFBvaW50LnkpO1xuICAgIGlmIChpID4gMCkge1xuICAgICAgdmFyIHhkaWZmID0gY3ggLSBweDtcbiAgICAgIHZhciB5ZGlmZiA9IGN5IC0gcHk7XG4gICAgICBsZW5ndGggKz0gTWF0aC5zcXJ0KHhkaWZmICogeGRpZmYgKyB5ZGlmZiAqIHlkaWZmKTtcbiAgICB9XG4gICAgcHggPSBjeDtcbiAgICBweSA9IGN5O1xuICB9XG5cbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLXNwYWNlcywgc3BhY2UtaW4tcGFyZW5zICovXG5CZXppZXIucHJvdG90eXBlLl9wb2ludCA9IGZ1bmN0aW9uICh0LCBzdGFydCwgYzEsIGMyLCBlbmQpIHtcbiAgcmV0dXJuIHN0YXJ0ICogKDEuMCAtIHQpICogKDEuMCAtIHQpICogKDEuMCAtIHQpICsgMy4wICogYzEgKiAoMS4wIC0gdCkgKiAoMS4wIC0gdCkgKiB0ICsgMy4wICogYzIgKiAoMS4wIC0gdCkgKiB0ICogdCArIGVuZCAqIHQgKiB0ICogdDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI3MDc4NDAxLzgxNTUwN1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICB2YXIgdGltZW91dCA9IG51bGw7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogRGF0ZS5ub3coKTtcbiAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgIGNvbnRleHQgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gU2lnbmF0dXJlUGFkKGNhbnZhcywgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0ID0gb3B0cy52ZWxvY2l0eUZpbHRlcldlaWdodCB8fCAwLjc7XG4gIHRoaXMubWluV2lkdGggPSBvcHRzLm1pbldpZHRoIHx8IDAuNTtcbiAgdGhpcy5tYXhXaWR0aCA9IG9wdHMubWF4V2lkdGggfHwgMi41O1xuICB0aGlzLnRocm90dGxlID0gJ3Rocm90dGxlJyBpbiBvcHRzID8gb3B0cy50aHJvdHRsZSA6IDE2OyAvLyBpbiBtaWxpc2Vjb25kc1xuICB0aGlzLm1pbkRpc3RhbmNlID0gJ21pbkRpc3RhbmNlJyBpbiBvcHRzID8gb3B0cy5taW5EaXN0YW5jZSA6IDU7XG5cbiAgaWYgKHRoaXMudGhyb3R0bGUpIHtcbiAgICB0aGlzLl9zdHJva2VNb3ZlVXBkYXRlID0gdGhyb3R0bGUoU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlLCB0aGlzLnRocm90dGxlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zdHJva2VNb3ZlVXBkYXRlID0gU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlO1xuICB9XG5cbiAgdGhpcy5kb3RTaXplID0gb3B0cy5kb3RTaXplIHx8IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMubWluV2lkdGggKyB0aGlzLm1heFdpZHRoKSAvIDI7XG4gIH07XG4gIHRoaXMucGVuQ29sb3IgPSBvcHRzLnBlbkNvbG9yIHx8ICdibGFjayc7XG4gIHRoaXMuYmFja2dyb3VuZENvbG9yID0gb3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgJ3JnYmEoMCwwLDAsMCknO1xuICB0aGlzLm9uQmVnaW4gPSBvcHRzLm9uQmVnaW47XG4gIHRoaXMub25FbmQgPSBvcHRzLm9uRW5kO1xuXG4gIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgdGhpcy5fY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIHRoaXMuY2xlYXIoKTtcblxuICAvLyBXZSBuZWVkIGFkZCB0aGVzZSBpbmxpbmUgc28gdGhleSBhcmUgYXZhaWxhYmxlIHRvIHVuYmluZCB3aGlsZSBzdGlsbCBoYXZpbmdcbiAgLy8gYWNjZXNzIHRvICdzZWxmJyB3ZSBjb3VsZCB1c2UgXy5iaW5kIGJ1dCBpdCdzIG5vdCB3b3J0aCBhZGRpbmcgYSBkZXBlbmRlbmN5LlxuICB0aGlzLl9oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEpIHtcbiAgICAgIHNlbGYuX21vdXNlQnV0dG9uRG93biA9IHRydWU7XG4gICAgICBzZWxmLl9zdHJva2VCZWdpbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuX2hhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChzZWxmLl9tb3VzZUJ1dHRvbkRvd24pIHtcbiAgICAgIHNlbGYuX3N0cm9rZU1vdmVVcGRhdGUoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxICYmIHNlbGYuX21vdXNlQnV0dG9uRG93bikge1xuICAgICAgc2VsZi5fbW91c2VCdXR0b25Eb3duID0gZmFsc2U7XG4gICAgICBzZWxmLl9zdHJva2VFbmQoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIHNlbGYuX3N0cm9rZUJlZ2luKHRvdWNoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5faGFuZGxlVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gUHJldmVudCBzY3JvbGxpbmcuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciB0b3VjaCA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF07XG4gICAgc2VsZi5fc3Ryb2tlTW92ZVVwZGF0ZSh0b3VjaCk7XG4gIH07XG5cbiAgdGhpcy5faGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgd2FzQ2FudmFzVG91Y2hlZCA9IGV2ZW50LnRhcmdldCA9PT0gc2VsZi5fY2FudmFzO1xuICAgIGlmICh3YXNDYW52YXNUb3VjaGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2VsZi5fc3Ryb2tlRW5kKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5hYmxlIG1vdXNlIGFuZCB0b3VjaCBldmVudCBoYW5kbGVyc1xuICB0aGlzLm9uKCk7XG59XG5cbi8vIFB1YmxpYyBtZXRob2RzXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICB2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuXG4gIGN0eC5maWxsU3R5bGUgPSB0aGlzLmJhY2tncm91bmRDb2xvcjtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICB0aGlzLl9kYXRhID0gW107XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuX2lzRW1wdHkgPSB0cnVlO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5mcm9tRGF0YVVSTCA9IGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICB2YXIgcmF0aW8gPSBvcHRpb25zLnJhdGlvIHx8IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdGhpcy5fY2FudmFzLndpZHRoIC8gcmF0aW87XG4gIHZhciBoZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gcmF0aW87XG5cbiAgdGhpcy5fcmVzZXQoKTtcbiAgaW1hZ2Uuc3JjID0gZGF0YVVybDtcbiAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLl9jdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcbiAgdGhpcy5faXNFbXB0eSA9IGZhbHNlO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS50b0RhdGFVUkwgPSBmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgX2NhbnZhcztcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbWFnZS9zdmcreG1sJzpcbiAgICAgIHJldHVybiB0aGlzLl90b1NWRygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgb3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgb3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoX2NhbnZhcyA9IHRoaXMuX2NhbnZhcykudG9EYXRhVVJMLmFwcGx5KF9jYW52YXMsIFt0eXBlXS5jb25jYXQob3B0aW9ucykpO1xuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9oYW5kbGVNb3VzZUV2ZW50cygpO1xuICB0aGlzLl9oYW5kbGVUb3VjaEV2ZW50cygpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xuICB0aGlzLl9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlTW91c2VNb3ZlKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xuXG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVUb3VjaE1vdmUpO1xuICB0aGlzLl9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9oYW5kbGVUb3VjaEVuZCk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pc0VtcHR5O1xufTtcblxuLy8gUHJpdmF0ZSBtZXRob2RzXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VCZWdpbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICB0aGlzLl9kYXRhLnB1c2goW10pO1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLl9zdHJva2VVcGRhdGUoZXZlbnQpO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5vbkJlZ2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5vbkJlZ2luKGV2ZW50KTtcbiAgfVxufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciB4ID0gZXZlbnQuY2xpZW50WDtcbiAgdmFyIHkgPSBldmVudC5jbGllbnRZO1xuXG4gIHZhciBwb2ludCA9IHRoaXMuX2NyZWF0ZVBvaW50KHgsIHkpO1xuICB2YXIgbGFzdFBvaW50R3JvdXAgPSB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV07XG4gIHZhciBsYXN0UG9pbnQgPSBsYXN0UG9pbnRHcm91cCAmJiBsYXN0UG9pbnRHcm91cFtsYXN0UG9pbnRHcm91cC5sZW5ndGggLSAxXTtcbiAgdmFyIGlzTGFzdFBvaW50VG9vQ2xvc2UgPSBsYXN0UG9pbnQgJiYgcG9pbnQuZGlzdGFuY2VUbyhsYXN0UG9pbnQpIDwgdGhpcy5taW5EaXN0YW5jZTtcblxuICAvLyBTa2lwIHRoaXMgcG9pbnQgaWYgaXQncyB0b28gY2xvc2UgdG8gdGhlIHByZXZpb3VzIG9uZVxuICBpZiAoIShsYXN0UG9pbnQgJiYgaXNMYXN0UG9pbnRUb29DbG9zZSkpIHtcbiAgICB2YXIgX2FkZFBvaW50ID0gdGhpcy5fYWRkUG9pbnQocG9pbnQpLFxuICAgICAgICBjdXJ2ZSA9IF9hZGRQb2ludC5jdXJ2ZSxcbiAgICAgICAgd2lkdGhzID0gX2FkZFBvaW50LndpZHRocztcblxuICAgIGlmIChjdXJ2ZSAmJiB3aWR0aHMpIHtcbiAgICAgIHRoaXMuX2RyYXdDdXJ2ZShjdXJ2ZSwgd2lkdGhzLnN0YXJ0LCB3aWR0aHMuZW5kKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICB4OiBwb2ludC54LFxuICAgICAgeTogcG9pbnQueSxcbiAgICAgIHRpbWU6IHBvaW50LnRpbWUsXG4gICAgICBjb2xvcjogdGhpcy5wZW5Db2xvclxuICAgIH0pO1xuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgdmFyIGNhbkRyYXdDdXJ2ZSA9IHRoaXMucG9pbnRzLmxlbmd0aCA+IDI7XG4gIHZhciBwb2ludCA9IHRoaXMucG9pbnRzWzBdOyAvLyBQb2ludCBpbnN0YW5jZVxuXG4gIGlmICghY2FuRHJhd0N1cnZlICYmIHBvaW50KSB7XG4gICAgdGhpcy5fZHJhd0RvdChwb2ludCk7XG4gIH1cblxuICBpZiAocG9pbnQpIHtcbiAgICB2YXIgbGFzdFBvaW50R3JvdXAgPSB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV07XG4gICAgdmFyIGxhc3RQb2ludCA9IGxhc3RQb2ludEdyb3VwW2xhc3RQb2ludEdyb3VwLmxlbmd0aCAtIDFdOyAvLyBwbGFpbiBvYmplY3RcblxuICAgIC8vIFdoZW4gZHJhd2luZyBhIGRvdCwgdGhlcmUncyBvbmx5IG9uZSBwb2ludCBpbiBhIGdyb3VwLCBzbyB3aXRob3V0IHRoaXMgY2hlY2tcbiAgICAvLyBzdWNoIGdyb3VwIHdvdWxkIGVuZCB1cCB3aXRoIGV4YWN0bHkgdGhlIHNhbWUgMiBwb2ludHMuXG4gICAgaWYgKCFwb2ludC5lcXVhbHMobGFzdFBvaW50KSkge1xuICAgICAgbGFzdFBvaW50R3JvdXAucHVzaCh7XG4gICAgICAgIHg6IHBvaW50LngsXG4gICAgICAgIHk6IHBvaW50LnksXG4gICAgICAgIHRpbWU6IHBvaW50LnRpbWUsXG4gICAgICAgIGNvbG9yOiB0aGlzLnBlbkNvbG9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHRoaXMub25FbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLm9uRW5kKGV2ZW50KTtcbiAgfVxufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5faGFuZGxlTW91c2VFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX21vdXNlQnV0dG9uRG93biA9IGZhbHNlO1xuXG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xuICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlTW91c2VNb3ZlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5faGFuZGxlVG91Y2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFBhc3MgdG91Y2ggZXZlbnRzIHRvIGNhbnZhcyBlbGVtZW50IG9uIG1vYmlsZSBJRTExIGFuZCBFZGdlLlxuICB0aGlzLl9jYW52YXMuc3R5bGUubXNUb3VjaEFjdGlvbiA9ICdub25lJztcbiAgdGhpcy5fY2FudmFzLnN0eWxlLnRvdWNoQWN0aW9uID0gJ25vbmUnO1xuXG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVUb3VjaE1vdmUpO1xuICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9oYW5kbGVUb3VjaEVuZCk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wb2ludHMgPSBbXTtcbiAgdGhpcy5fbGFzdFZlbG9jaXR5ID0gMDtcbiAgdGhpcy5fbGFzdFdpZHRoID0gKHRoaXMubWluV2lkdGggKyB0aGlzLm1heFdpZHRoKSAvIDI7XG4gIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLnBlbkNvbG9yO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fY3JlYXRlUG9pbnQgPSBmdW5jdGlvbiAoeCwgeSwgdGltZSkge1xuICB2YXIgcmVjdCA9IHRoaXMuX2NhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4gbmV3IFBvaW50KHggLSByZWN0LmxlZnQsIHkgLSByZWN0LnRvcCwgdGltZSB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9hZGRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICB2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gIHZhciB0bXAgPSB2b2lkIDA7XG5cbiAgcG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gIGlmIChwb2ludHMubGVuZ3RoID4gMikge1xuICAgIC8vIFRvIHJlZHVjZSB0aGUgaW5pdGlhbCBsYWcgbWFrZSBpdCB3b3JrIHdpdGggMyBwb2ludHNcbiAgICAvLyBieSBjb3B5aW5nIHRoZSBmaXJzdCBwb2ludCB0byB0aGUgYmVnaW5uaW5nLlxuICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAzKSBwb2ludHMudW5zaGlmdChwb2ludHNbMF0pO1xuXG4gICAgdG1wID0gdGhpcy5fY2FsY3VsYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0pO1xuICAgIHZhciBjMiA9IHRtcC5jMjtcbiAgICB0bXAgPSB0aGlzLl9jYWxjdWxhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSk7XG4gICAgdmFyIGMzID0gdG1wLmMxO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBCZXppZXIocG9pbnRzWzFdLCBjMiwgYzMsIHBvaW50c1syXSk7XG4gICAgdmFyIHdpZHRocyA9IHRoaXMuX2NhbGN1bGF0ZUN1cnZlV2lkdGhzKGN1cnZlKTtcblxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBsaXN0LFxuICAgIC8vIHNvIHRoYXQgd2UgYWx3YXlzIGhhdmUgbm8gbW9yZSB0aGFuIDQgcG9pbnRzIGluIHBvaW50cyBhcnJheS5cbiAgICBwb2ludHMuc2hpZnQoKTtcblxuICAgIHJldHVybiB7IGN1cnZlOiBjdXJ2ZSwgd2lkdGhzOiB3aWR0aHMgfTtcbiAgfVxuXG4gIHJldHVybiB7fTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2NhbGN1bGF0ZUN1cnZlQ29udHJvbFBvaW50cyA9IGZ1bmN0aW9uIChzMSwgczIsIHMzKSB7XG4gIHZhciBkeDEgPSBzMS54IC0gczIueDtcbiAgdmFyIGR5MSA9IHMxLnkgLSBzMi55O1xuICB2YXIgZHgyID0gczIueCAtIHMzLng7XG4gIHZhciBkeTIgPSBzMi55IC0gczMueTtcblxuICB2YXIgbTEgPSB7IHg6IChzMS54ICsgczIueCkgLyAyLjAsIHk6IChzMS55ICsgczIueSkgLyAyLjAgfTtcbiAgdmFyIG0yID0geyB4OiAoczIueCArIHMzLngpIC8gMi4wLCB5OiAoczIueSArIHMzLnkpIC8gMi4wIH07XG5cbiAgdmFyIGwxID0gTWF0aC5zcXJ0KGR4MSAqIGR4MSArIGR5MSAqIGR5MSk7XG4gIHZhciBsMiA9IE1hdGguc3FydChkeDIgKiBkeDIgKyBkeTIgKiBkeTIpO1xuXG4gIHZhciBkeG0gPSBtMS54IC0gbTIueDtcbiAgdmFyIGR5bSA9IG0xLnkgLSBtMi55O1xuXG4gIHZhciBrID0gbDIgLyAobDEgKyBsMik7XG4gIHZhciBjbSA9IHsgeDogbTIueCArIGR4bSAqIGssIHk6IG0yLnkgKyBkeW0gKiBrIH07XG5cbiAgdmFyIHR4ID0gczIueCAtIGNtLng7XG4gIHZhciB0eSA9IHMyLnkgLSBjbS55O1xuXG4gIHJldHVybiB7XG4gICAgYzE6IG5ldyBQb2ludChtMS54ICsgdHgsIG0xLnkgKyB0eSksXG4gICAgYzI6IG5ldyBQb2ludChtMi54ICsgdHgsIG0yLnkgKyB0eSlcbiAgfTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2NhbGN1bGF0ZUN1cnZlV2lkdGhzID0gZnVuY3Rpb24gKGN1cnZlKSB7XG4gIHZhciBzdGFydFBvaW50ID0gY3VydmUuc3RhcnRQb2ludDtcbiAgdmFyIGVuZFBvaW50ID0gY3VydmUuZW5kUG9pbnQ7XG4gIHZhciB3aWR0aHMgPSB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTtcblxuICB2YXIgdmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0ICogZW5kUG9pbnQudmVsb2NpdHlGcm9tKHN0YXJ0UG9pbnQpICsgKDEgLSB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0KSAqIHRoaXMuX2xhc3RWZWxvY2l0eTtcblxuICB2YXIgbmV3V2lkdGggPSB0aGlzLl9zdHJva2VXaWR0aCh2ZWxvY2l0eSk7XG5cbiAgd2lkdGhzLnN0YXJ0ID0gdGhpcy5fbGFzdFdpZHRoO1xuICB3aWR0aHMuZW5kID0gbmV3V2lkdGg7XG5cbiAgdGhpcy5fbGFzdFZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gIHRoaXMuX2xhc3RXaWR0aCA9IG5ld1dpZHRoO1xuXG4gIHJldHVybiB3aWR0aHM7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VXaWR0aCA9IGZ1bmN0aW9uICh2ZWxvY2l0eSkge1xuICByZXR1cm4gTWF0aC5tYXgodGhpcy5tYXhXaWR0aCAvICh2ZWxvY2l0eSArIDEpLCB0aGlzLm1pbldpZHRoKTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2RyYXdQb2ludCA9IGZ1bmN0aW9uICh4LCB5LCBzaXplKSB7XG4gIHZhciBjdHggPSB0aGlzLl9jdHg7XG5cbiAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgY3R4LmFyYyh4LCB5LCBzaXplLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICB0aGlzLl9pc0VtcHR5ID0gZmFsc2U7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9kcmF3Q3VydmUgPSBmdW5jdGlvbiAoY3VydmUsIHN0YXJ0V2lkdGgsIGVuZFdpZHRoKSB7XG4gIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gIHZhciB3aWR0aERlbHRhID0gZW5kV2lkdGggLSBzdGFydFdpZHRoO1xuICB2YXIgZHJhd1N0ZXBzID0gTWF0aC5mbG9vcihjdXJ2ZS5sZW5ndGgoKSk7XG5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZHJhd1N0ZXBzOyBpICs9IDEpIHtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIEJlemllciAoeCwgeSkgY29vcmRpbmF0ZSBmb3IgdGhpcyBzdGVwLlxuICAgIHZhciB0ID0gaSAvIGRyYXdTdGVwcztcbiAgICB2YXIgdHQgPSB0ICogdDtcbiAgICB2YXIgdHR0ID0gdHQgKiB0O1xuICAgIHZhciB1ID0gMSAtIHQ7XG4gICAgdmFyIHV1ID0gdSAqIHU7XG4gICAgdmFyIHV1dSA9IHV1ICogdTtcblxuICAgIHZhciB4ID0gdXV1ICogY3VydmUuc3RhcnRQb2ludC54O1xuICAgIHggKz0gMyAqIHV1ICogdCAqIGN1cnZlLmNvbnRyb2wxLng7XG4gICAgeCArPSAzICogdSAqIHR0ICogY3VydmUuY29udHJvbDIueDtcbiAgICB4ICs9IHR0dCAqIGN1cnZlLmVuZFBvaW50Lng7XG5cbiAgICB2YXIgeSA9IHV1dSAqIGN1cnZlLnN0YXJ0UG9pbnQueTtcbiAgICB5ICs9IDMgKiB1dSAqIHQgKiBjdXJ2ZS5jb250cm9sMS55O1xuICAgIHkgKz0gMyAqIHUgKiB0dCAqIGN1cnZlLmNvbnRyb2wyLnk7XG4gICAgeSArPSB0dHQgKiBjdXJ2ZS5lbmRQb2ludC55O1xuXG4gICAgdmFyIHdpZHRoID0gc3RhcnRXaWR0aCArIHR0dCAqIHdpZHRoRGVsdGE7XG4gICAgdGhpcy5fZHJhd1BvaW50KHgsIHksIHdpZHRoKTtcbiAgfVxuXG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmZpbGwoKTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2RyYXdEb3QgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcbiAgdmFyIHdpZHRoID0gdHlwZW9mIHRoaXMuZG90U2l6ZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuZG90U2l6ZSgpIDogdGhpcy5kb3RTaXplO1xuXG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgdGhpcy5fZHJhd1BvaW50KHBvaW50LngsIHBvaW50LnksIHdpZHRoKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguZmlsbCgpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fZnJvbURhdGEgPSBmdW5jdGlvbiAocG9pbnRHcm91cHMsIGRyYXdDdXJ2ZSwgZHJhd0RvdCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50R3JvdXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGdyb3VwID0gcG9pbnRHcm91cHNbaV07XG5cbiAgICBpZiAoZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBncm91cC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgcmF3UG9pbnQgPSBncm91cFtqXTtcbiAgICAgICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KHJhd1BvaW50LngsIHJhd1BvaW50LnksIHJhd1BvaW50LnRpbWUpO1xuICAgICAgICB2YXIgY29sb3IgPSByYXdQb2ludC5jb2xvcjtcblxuICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgIC8vIEZpcnN0IHBvaW50IGluIGEgZ3JvdXAuIE5vdGhpbmcgdG8gZHJhdyB5ZXQuXG5cbiAgICAgICAgICAvLyBBbGwgcG9pbnRzIGluIHRoZSBncm91cCBoYXZlIHRoZSBzYW1lIGNvbG9yLCBzbyBpdCdzIGVub3VnaCB0byBzZXRcbiAgICAgICAgICAvLyBwZW5Db2xvciBqdXN0IGF0IHRoZSBiZWdpbm5pbmcuXG4gICAgICAgICAgdGhpcy5wZW5Db2xvciA9IGNvbG9yO1xuICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICAgICAgICB0aGlzLl9hZGRQb2ludChwb2ludCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiAhPT0gZ3JvdXAubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIC8vIE1pZGRsZSBwb2ludCBpbiBhIGdyb3VwLlxuICAgICAgICAgIHZhciBfYWRkUG9pbnQyID0gdGhpcy5fYWRkUG9pbnQocG9pbnQpLFxuICAgICAgICAgICAgICBjdXJ2ZSA9IF9hZGRQb2ludDIuY3VydmUsXG4gICAgICAgICAgICAgIHdpZHRocyA9IF9hZGRQb2ludDIud2lkdGhzO1xuXG4gICAgICAgICAgaWYgKGN1cnZlICYmIHdpZHRocykge1xuICAgICAgICAgICAgZHJhd0N1cnZlKGN1cnZlLCB3aWR0aHMsIGNvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTGFzdCBwb2ludCBpbiBhIGdyb3VwLiBEbyBub3RoaW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICB2YXIgX3Jhd1BvaW50ID0gZ3JvdXBbMF07XG4gICAgICBkcmF3RG90KF9yYXdQb2ludCk7XG4gICAgfVxuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl90b1NWRyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdmFyIHBvaW50R3JvdXBzID0gdGhpcy5fZGF0YTtcbiAgdmFyIGNhbnZhcyA9IHRoaXMuX2NhbnZhcztcbiAgdmFyIHJhdGlvID0gTWF0aC5tYXgod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSwgMSk7XG4gIHZhciBtaW5YID0gMDtcbiAgdmFyIG1pblkgPSAwO1xuICB2YXIgbWF4WCA9IGNhbnZhcy53aWR0aCAvIHJhdGlvO1xuICB2YXIgbWF4WSA9IGNhbnZhcy5oZWlnaHQgLyByYXRpbztcbiAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG5cbiAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsIGNhbnZhcy53aWR0aCk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0JywgY2FudmFzLmhlaWdodCk7XG5cbiAgdGhpcy5fZnJvbURhdGEocG9pbnRHcm91cHMsIGZ1bmN0aW9uIChjdXJ2ZSwgd2lkdGhzLCBjb2xvcikge1xuICAgIHZhciBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGF0aCcpO1xuXG4gICAgLy8gTmVlZCB0byBjaGVjayBjdXJ2ZSBmb3IgTmFOIHZhbHVlcywgdGhlc2UgcG9wIHVwIHdoZW4gZHJhd2luZ1xuICAgIC8vIGxpbmVzIG9uIHRoZSBjYW52YXMgdGhhdCBhcmUgbm90IGNvbnRpbnVvdXMuIEUuZy4gU2hhcnAgY29ybmVyc1xuICAgIC8vIG9yIHN0b3BwaW5nIG1pZC1zdHJva2UgYW5kIHRoYW4gY29udGludWluZyB3aXRob3V0IGxpZnRpbmcgbW91c2UuXG4gICAgaWYgKCFpc05hTihjdXJ2ZS5jb250cm9sMS54KSAmJiAhaXNOYU4oY3VydmUuY29udHJvbDEueSkgJiYgIWlzTmFOKGN1cnZlLmNvbnRyb2wyLngpICYmICFpc05hTihjdXJ2ZS5jb250cm9sMi55KSkge1xuICAgICAgdmFyIGF0dHIgPSAnTSAnICsgY3VydmUuc3RhcnRQb2ludC54LnRvRml4ZWQoMykgKyAnLCcgKyBjdXJ2ZS5zdGFydFBvaW50LnkudG9GaXhlZCgzKSArICcgJyArICgnQyAnICsgY3VydmUuY29udHJvbDEueC50b0ZpeGVkKDMpICsgJywnICsgY3VydmUuY29udHJvbDEueS50b0ZpeGVkKDMpICsgJyAnKSArIChjdXJ2ZS5jb250cm9sMi54LnRvRml4ZWQoMykgKyAnLCcgKyBjdXJ2ZS5jb250cm9sMi55LnRvRml4ZWQoMykgKyAnICcpICsgKGN1cnZlLmVuZFBvaW50LngudG9GaXhlZCgzKSArICcsJyArIGN1cnZlLmVuZFBvaW50LnkudG9GaXhlZCgzKSk7XG5cbiAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgYXR0cik7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgKHdpZHRocy5lbmQgKiAyLjI1KS50b0ZpeGVkKDMpKTtcbiAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCBjb2xvcik7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdub25lJyk7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCAncm91bmQnKTtcblxuICAgICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKHJhd1BvaW50KSB7XG4gICAgdmFyIGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScpO1xuICAgIHZhciBkb3RTaXplID0gdHlwZW9mIF90aGlzMi5kb3RTaXplID09PSAnZnVuY3Rpb24nID8gX3RoaXMyLmRvdFNpemUoKSA6IF90aGlzMi5kb3RTaXplO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ3InLCBkb3RTaXplKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCdjeCcsIHJhd1BvaW50LngpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ2N5JywgcmF3UG9pbnQueSk7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHJhd1BvaW50LmNvbG9yKTtcblxuICAgIHN2Zy5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICB9KTtcblxuICB2YXIgcHJlZml4ID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJztcbiAgdmFyIGhlYWRlciA9ICc8c3ZnJyArICcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiJyArICcgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCInICsgKCcgdmlld0JveD1cIicgKyBtaW5YICsgJyAnICsgbWluWSArICcgJyArIG1heFggKyAnICcgKyBtYXhZICsgJ1wiJykgKyAoJyB3aWR0aD1cIicgKyBtYXhYICsgJ1wiJykgKyAoJyBoZWlnaHQ9XCInICsgbWF4WSArICdcIicpICsgJz4nO1xuICB2YXIgYm9keSA9IHN2Zy5pbm5lckhUTUw7XG5cbiAgLy8gSUUgaGFjayBmb3IgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHkgb24gU1ZHRWxlbWVudFxuICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZHVtbXknKTtcbiAgICB2YXIgbm9kZXMgPSBzdmcuY2hpbGROb2RlcztcbiAgICBkdW1teS5pbm5lckhUTUwgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGR1bW15LmFwcGVuZENoaWxkKG5vZGVzW2ldLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfVxuXG4gICAgYm9keSA9IGR1bW15LmlubmVySFRNTDtcbiAgfVxuXG4gIHZhciBmb290ZXIgPSAnPC9zdmc+JztcbiAgdmFyIGRhdGEgPSBoZWFkZXIgKyBib2R5ICsgZm9vdGVyO1xuXG4gIHJldHVybiBwcmVmaXggKyBidG9hKGRhdGEpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5mcm9tRGF0YSA9IGZ1bmN0aW9uIChwb2ludEdyb3Vwcykge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLmNsZWFyKCk7XG5cbiAgdGhpcy5fZnJvbURhdGEocG9pbnRHcm91cHMsIGZ1bmN0aW9uIChjdXJ2ZSwgd2lkdGhzKSB7XG4gICAgcmV0dXJuIF90aGlzMy5fZHJhd0N1cnZlKGN1cnZlLCB3aWR0aHMuc3RhcnQsIHdpZHRocy5lbmQpO1xuICB9LCBmdW5jdGlvbiAocmF3UG9pbnQpIHtcbiAgICByZXR1cm4gX3RoaXMzLl9kcmF3RG90KHJhd1BvaW50KTtcbiAgfSk7XG5cbiAgdGhpcy5fZGF0YSA9IHBvaW50R3JvdXBzO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS50b0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9kYXRhO1xufTtcblxucmV0dXJuIFNpZ25hdHVyZVBhZDtcblxufSkpKTtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMudHJpbUNhbnZhcz10KCk6ZS50cmltQ2FudmFzPXQoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KG4pe2lmKHJbbl0pcmV0dXJuIHJbbl0uZXhwb3J0czt2YXIgbz1yW25dPXtleHBvcnRzOnt9LGlkOm4sbG9hZGVkOiExfTtyZXR1cm4gZVtuXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyx0KSxvLmxvYWRlZD0hMCxvLmV4cG9ydHN9dmFyIHI9e307cmV0dXJuIHQubT1lLHQuYz1yLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7dmFyIHQ9ZS5nZXRDb250ZXh0KFwiMmRcIikscj1lLndpZHRoLG49ZS5oZWlnaHQsbz10LmdldEltYWdlRGF0YSgwLDAscixuKS5kYXRhLGY9YSghMCxyLG4sbyksaT1hKCExLHIsbixvKSxjPXUoITAscixuLG8pLGQ9dSghMSxyLG4sbykscD1kLWMrMSxsPWktZisxLHM9dC5nZXRJbWFnZURhdGEoYyxmLHAsbCk7cmV0dXJuIGUud2lkdGg9cCxlLmhlaWdodD1sLHQuY2xlYXJSZWN0KDAsMCxwLGwpLHQucHV0SW1hZ2VEYXRhKHMsMCwwKSxlfWZ1bmN0aW9uIG4oZSx0LHIsbil7cmV0dXJue3JlZDpuWzQqKHIqdCtlKV0sZ3JlZW46bls0KihyKnQrZSkrMV0sYmx1ZTpuWzQqKHIqdCtlKSsyXSxhbHBoYTpuWzQqKHIqdCtlKSszXX19ZnVuY3Rpb24gbyhlLHQscixvKXtyZXR1cm4gbihlLHQscixvKS5hbHBoYX1mdW5jdGlvbiBhKGUsdCxyLG4pe2Zvcih2YXIgYT1lPzE6LTEsdT1lPzA6ci0xLGY9dTtlP2Y8cjpmPi0xO2YrPWEpZm9yKHZhciBpPTA7aTx0O2krKylpZihvKGksZix0LG4pKXJldHVybiBmO3JldHVybiBudWxsfWZ1bmN0aW9uIHUoZSx0LHIsbil7Zm9yKHZhciBhPWU/MTotMSx1PWU/MDp0LTEsZj11O2U/Zjx0OmY+LTE7Zis9YSlmb3IodmFyIGk9MDtpPHI7aSsrKWlmKG8oZixpLHQsbikpcmV0dXJuIGY7cmV0dXJuIG51bGx9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXJ9XSl9KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwic2lnbmF0dXJlX3BhZFwiKSxyZXF1aXJlKFwidHJpbS1jYW52YXNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wicHJvcC10eXBlc1wiLFwicmVhY3RcIixcInNpZ25hdHVyZV9wYWRcIixcInRyaW0tY2FudmFzXCJdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuU2lnbmF0dXJlQ2FudmFzPXQocmVxdWlyZShcInByb3AtdHlwZXNcIikscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJzaWduYXR1cmVfcGFkXCIpLHJlcXVpcmUoXCJ0cmltLWNhbnZhc1wiKSk6ZS5TaWduYXR1cmVDYW52YXM9dChlW1wicHJvcC10eXBlc1wiXSxlLnJlYWN0LGUuc2lnbmF0dXJlX3BhZCxlW1widHJpbS1jYW52YXNcIl0pfSh0aGlzLGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgYT1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gZVtyXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyx0KSxhLmxvYWRlZD0hMCxhLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gYShlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKXQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJihuW3JdPWVbcl0pO3JldHVybiBufWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkoZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiB1KGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYoZVtyXT1uW3JdKX1yZXR1cm4gZX0sYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLGY9bigxKSxwPXIoZiksbD1uKDIpLGQ9cihsKSx2PW4oMyksaD1yKHYpLF89big0KSxnPXIoXyksbT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIGUsbixyLHU7byh0aGlzLHQpO2Zvcih2YXIgcz1hcmd1bWVudHMubGVuZ3RoLGM9QXJyYXkocyksZj0wO2Y8cztmKyspY1tmXT1hcmd1bWVudHNbZl07cmV0dXJuIG49cj1pKHRoaXMsKGU9dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQoYykpKSxyLl9zaWdQYWQ9bnVsbCxyLl9leGNsdWRlT3VyUHJvcHM9ZnVuY3Rpb24oKXt2YXIgZT1yLnByb3BzLHQ9KGUuY2FudmFzUHJvcHMsZS5jbGVhck9uUmVzaXplLGEoZSxbXCJjYW52YXNQcm9wc1wiLFwiY2xlYXJPblJlc2l6ZVwiXSkpO3JldHVybiB0fSxyLmdldENhbnZhcz1mdW5jdGlvbigpe3JldHVybiByLl9jYW52YXN9LHIuZ2V0VHJpbW1lZENhbnZhcz1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuIGUud2lkdGg9ci5fY2FudmFzLndpZHRoLGUuaGVpZ2h0PXIuX2NhbnZhcy5oZWlnaHQsZS5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKHIuX2NhbnZhcywwLDApLCgwLGcuZGVmYXVsdCkoZSl9LHIuZ2V0U2lnbmF0dXJlUGFkPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZH0sci5fY2hlY2tDbGVhck9uUmVzaXplPWZ1bmN0aW9uKCl7ci5wcm9wcy5jbGVhck9uUmVzaXplJiZyLl9yZXNpemVDYW52YXMoKX0sci5fcmVzaXplQ2FudmFzPWZ1bmN0aW9uKCl7dmFyIGU9ci5wcm9wcy5jYW52YXNQcm9wc3x8e30sdD1lLndpZHRoLG49ZS5oZWlnaHQ7aWYoIXR8fCFuKXt2YXIgYT1yLl9jYW52YXMsbz1NYXRoLm1heCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSwxKTt0fHwoYS53aWR0aD1hLm9mZnNldFdpZHRoKm8pLG58fChhLmhlaWdodD1hLm9mZnNldEhlaWdodCpvKSxhLmdldENvbnRleHQoXCIyZFwiKS5zY2FsZShvLG8pLHIuY2xlYXIoKX19LHIub249ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyLl9jaGVja0NsZWFyT25SZXNpemUpLHIuX3NpZ1BhZC5vbigpfSxyLm9mZj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHIuX2NoZWNrQ2xlYXJPblJlc2l6ZSksci5fc2lnUGFkLm9mZigpfSxyLmNsZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC5jbGVhcigpfSxyLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gci5fc2lnUGFkLmlzRW1wdHkoKX0sci5mcm9tRGF0YVVSTD1mdW5jdGlvbihlLHQpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGFVUkwoZSx0KX0sci50b0RhdGFVUkw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5fc2lnUGFkLnRvRGF0YVVSTChlLHQpfSxyLmZyb21EYXRhPWZ1bmN0aW9uKGUpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGEoZSl9LHIudG9EYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC50b0RhdGEoKX0sdT1uLGkocix1KX1yZXR1cm4gdSh0LGUpLGModCxbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9zaWdQYWQ9bmV3IGguZGVmYXVsdCh0aGlzLl9jYW52YXMsdGhpcy5fZXhjbHVkZU91clByb3BzKCkpLHRoaXMuX3Jlc2l6ZUNhbnZhcygpLHRoaXMub24oKX19LHtrZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vZmYoKX19LHtrZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe09iamVjdC5hc3NpZ24odGhpcy5fc2lnUGFkLHRoaXMuX2V4Y2x1ZGVPdXJQcm9wcygpKX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnByb3BzLmNhbnZhc1Byb3BzO3JldHVybiBkLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLHMoe3JlZjpmdW5jdGlvbih0KXtlLl9jYW52YXM9dH19LHQpKX19XSksdH0obC5Db21wb25lbnQpO20ucHJvcFR5cGVzPXt2ZWxvY2l0eUZpbHRlcldlaWdodDpwLmRlZmF1bHQubnVtYmVyLG1pbldpZHRoOnAuZGVmYXVsdC5udW1iZXIsbWF4V2lkdGg6cC5kZWZhdWx0Lm51bWJlcixtaW5EaXN0YW5jZTpwLmRlZmF1bHQubnVtYmVyLGRvdFNpemU6cC5kZWZhdWx0Lm9uZU9mVHlwZShbcC5kZWZhdWx0Lm51bWJlcixwLmRlZmF1bHQuZnVuY10pLHBlbkNvbG9yOnAuZGVmYXVsdC5zdHJpbmcsdGhyb3R0bGU6cC5kZWZhdWx0Lm51bWJlcixvbkVuZDpwLmRlZmF1bHQuZnVuYyxvbkJlZ2luOnAuZGVmYXVsdC5mdW5jLGNhbnZhc1Byb3BzOnAuZGVmYXVsdC5vYmplY3QsY2xlYXJPblJlc2l6ZTpwLmRlZmF1bHQuYm9vbH0sbS5kZWZhdWx0UHJvcHM9e2NsZWFyT25SZXNpemU6ITB9LHQuZGVmYXVsdD1tfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLG4pe2UuZXhwb3J0cz10fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yfV0pfSk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgU2lnbmF0dXJlQ2FudmFzIGZyb20gJ3JlYWN0LXNpZ25hdHVyZS1jYW52YXMnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7XG4gIENvbG9yZWRTcGFuLFxuICBQYXJhZ3JhcGgsXG4gIEJveCxcbiAgQ2FudmFzQ29udGFpbmVyLFxuICBCdXR0b24sXG59IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcblxuY29uc3QgU2lnbmF0dXJlQ29tcCA9ICh7IHByb3BlcnR5LCByZWNvcmQsIG9uQ2hhbmdlLCByZXNvdXJjZSB9KSA9PiB7XG4gIGNvbnN0IFtmaWxlUGF0aCwgc2V0RmlsZVBhdGhdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtzdWNjZXNzTXNnLCBzZXRTdWNjZXNzTXNnXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZXJyTXNnLCBzZXRFcnJNc2ddID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IHNpZ0NhbnZhcyA9IHVzZVJlZihudWxsKTtcblxuICBjb25zdCBjbGVhciA9ICgpID0+IHtcbiAgICBzaWdDYW52YXMuY3VycmVudD8uY2xlYXIoKTtcbiAgfTtcblxuICBjb25zdCBkYXRhVVJMVG9CbG9iID0gKGRhdGFVUkwpID0+IHtcbiAgICBjb25zdCBbaGVhZGVyLCBiYXNlNjRdID0gZGF0YVVSTC5zcGxpdCgnLCcpO1xuICAgIGNvbnN0IG1pbWUgPSBoZWFkZXIubWF0Y2goLzooLio/KTsvKVsxXTtcbiAgICBjb25zdCBic3RyID0gYXRvYihiYXNlNjQpO1xuICAgIGxldCBuID0gYnN0ci5sZW5ndGg7XG4gICAgY29uc3QgdThhcnIgPSBuZXcgVWludDhBcnJheShuKTtcblxuICAgIHdoaWxlIChuLS0pIHtcbiAgICAgIHU4YXJyW25dID0gYnN0ci5jaGFyQ29kZUF0KG4pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQmxvYihbdThhcnJdLCB7IHR5cGU6IG1pbWUgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2VuZFRvU2VydmVyID0gYXN5bmMgKGRhdGFVUkwpID0+IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGJsb2IgPSBkYXRhVVJMVG9CbG9iKGRhdGFVUkwpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnbXlmaWxlJywgYmxvYiwgJ3NpZ25hdHVyZS5wbmcnKTtcblxuICAgIHRyeSB7XG4gICAgICBzZXRFcnJNc2cobnVsbCk7XG4gICAgICBzZXRTdWNjZXNzTXNnKG51bGwpO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5wb3N0KFxuICAgICAgICBgL3VwbG9hZD9yZXNvdXJjZUlkPSR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIHJlc291cmNlLmlkXG4gICAgICAgICl9JnByb3BlcnR5TmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudChwcm9wZXJ0eS5uYW1lKX1gLFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgICAge1xuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgZGF0YSB9ID0gcmVzcG9uc2U7XG5cbiAgICAgIHNldEZpbGVQYXRoKGRhdGEucGF0aCk7XG4gICAgICBzZXRTdWNjZXNzTXNnKCdMYSBzaWduYXR1cmUgYSDDqXTDqSBham91dMOpZSBhdmVjIHN1Y2PDqHMnKTtcbiAgICAgIGNsZWFyKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwbG9hZGluZyBmaWxlOicsIGVycm9yKTtcbiAgICAgIHNldEVyck1zZyhgRXJyZXVyIGxvcnMgZHUgdMOpbMOpY2hhcmdlbWVudCBkZSBsYSBzaWduYXR1cmVgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNhdmUgPSAoKSA9PiB7XG4gICAgaWYgKHNpZ0NhbnZhcy5jdXJyZW50KSB7XG4gICAgICBjb25zdCBpbWFnZURhdGFVUkwgPSBzaWdDYW52YXMuY3VycmVudC50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuXG4gICAgICBzZW5kVG9TZXJ2ZXIoaW1hZ2VEYXRhVVJMKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZmlsZVBhdGgpIHtcbiAgICAgIG9uQ2hhbmdlKHByb3BlcnR5Lm5hbWUsIGZpbGVQYXRoKTtcbiAgICB9XG4gIH0sIFtmaWxlUGF0aF0pO1xuXG4gIGNvbnNvbGUubG9nKHJlY29yZC5wYXJhbXMpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCb3g+XG4gICAgICAgIDxMYWJlbCBodG1sRm9yPXtwcm9wZXJ0eS5uYW1lfT57cHJvcGVydHkucHJvcHMubGFiZWx9PC9MYWJlbD5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGhvdmVyQ29sb3I9J2RhbmdlcidcbiAgICAgICAgICB0eXBlPSdidXR0b24nXG4gICAgICAgICAgb25DbGljaz17Y2xlYXJ9XG4gICAgICAgICAgaWQ9e2BjbGVhckJ1dHRvbi0ke3Byb3BlcnR5Lm5hbWV9YH0+XG4gICAgICAgICAgRWZmYWNlclxuICAgICAgICA8L0J1dHRvbj5cbiAgICAgIDwvQm94PlxuXG4gICAgICA8Q2FudmFzQ29udGFpbmVyPlxuICAgICAgICA8U2lnbmF0dXJlQ2FudmFzXG4gICAgICAgICAgcmVmPXtzaWdDYW52YXN9XG4gICAgICAgICAgcGVuQ29sb3I9J2JsYWNrJ1xuICAgICAgICAgIGNhbnZhc1Byb3BzPXt7XG4gICAgICAgICAgICBpZDogcHJvcGVydHkubmFtZSxcbiAgICAgICAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIC8vIGNsYXNzTmFtZTogJ3NpZ0NhbnZhcyB3LWZ1bGwgaC1mdWxsIHJvdW5kZWQnLFxuICAgICAgICAgIH19XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yPSdyZ2JhKDI0MCwgMjQwLCAyNDAsMSknXG4gICAgICAgIC8+XG4gICAgICA8L0NhbnZhc0NvbnRhaW5lcj5cblxuICAgICAgPEJveD5cbiAgICAgICAgPEJ1dHRvblxuICAgICAgICAgIGhvdmVyQ29sb3I9J3ByaW1hcnknXG4gICAgICAgICAgdHlwZT0nYnV0dG9uJ1xuICAgICAgICAgIG9uQ2xpY2s9e3NhdmV9XG4gICAgICAgICAgaWQ9e2BjbGVhckJ1dHRvbi0ke3Byb3BlcnR5Lm5hbWV9YH0+XG4gICAgICAgICAgQ29uZmlybWVyXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9Cb3g+XG4gICAgICA8Qm94IG15PXsxfT5cbiAgICAgICAge3N1Y2Nlc3NNc2cgJiYgKFxuICAgICAgICAgIDxQYXJhZ3JhcGg+XG4gICAgICAgICAgICA8Q29sb3JlZFNwYW4gZm9udENvbG9yPSdhcHByb3ZhbCc+e3N1Y2Nlc3NNc2d9PC9Db2xvcmVkU3Bhbj5cbiAgICAgICAgICA8L1BhcmFncmFwaD5cbiAgICAgICAgKX1cbiAgICAgICAge2Vyck1zZyAmJiAoXG4gICAgICAgICAgPFBhcmFncmFwaD5cbiAgICAgICAgICAgIDxDb2xvcmVkU3BhbiBmb250Q29sb3I9J2Rhbmdlcic+e2Vyck1zZ308L0NvbG9yZWRTcGFuPlxuICAgICAgICAgIDwvUGFyYWdyYXBoPlxuICAgICAgICApfVxuICAgICAgPC9Cb3g+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaWduYXR1cmVDb21wO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJveCwgSW1hZ2UsIFBhcmFncmFwaCB9IGZyb20gJy4uL3N0eWxlZC1jb21wb25lbnMvQXRvbXMubWpzJztcblxuY29uc3QgU2hvd1NpZ25hdHVyZSA9ICh7IHJlY29yZCwgcHJvcGVydHkgfSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxCb3g+XG4gICAgICA8UGFyYWdyYXBoPntwcm9wZXJ0eS5wcm9wcy5sYWJlbH08L1BhcmFncmFwaD5cbiAgICAgIDxJbWFnZSBzcmM9e2AvJHtyZWNvcmQucGFyYW1zW3Byb3BlcnR5Lm5hbWVdfWB9IC8+XG4gICAgPC9Cb3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaG93U2lnbmF0dXJlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQm94IH0gZnJvbSAnLi4vc3R5bGVkLWNvbXBvbmVucy9BdG9tcy5tanMnO1xuaW1wb3J0IHsgTGFiZWwsIERhdGVQaWNrZXIgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcblxuY29uc3QgRGF0ZUNvbXAgPSAoKSA9PiB7XG4gIGNvbnN0IFtzdGFydERhdGUsIHNldFN0YXJ0RGF0ZV0gPSB1c2VTdGF0ZShuZXcgRGF0ZSgpKTtcbiAgY29uc3QgaGFuZGxlRGF0ZUNoYW5nZSA9IChlKSA9PiB7XG4gICAgc2V0U3RhcnREYXRlKGUpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEJveD5cbiAgICAgIDxMYWJlbD5EYXRlPC9MYWJlbD5cbiAgICAgIDxEYXRlUGlja2VyXG4gICAgICAgIHZhbHVlPXtzdGFydERhdGV9XG4gICAgICAgIHByb3BlcnR5VHlwZT0nZGF0ZSdcbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZURhdGVDaGFuZ2V9XG4gICAgICAgIGRhdGVGb3JtYXQ9J3l5eXkvTU0vZGQnXG4gICAgICAvPlxuICAgIDwvQm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUNvbXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBFbXB0eUJyZWFrID0gKCkgPT4ge1xuICByZXR1cm4gPGRpdj48L2Rpdj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBFbXB0eUJyZWFrO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXBpQ2xpZW50LCB1c2VOb3RpY2UgfSBmcm9tICdhZG1pbmpzJztcbmltcG9ydCB7IERyb3Bab25lSXRlbSwgTG9hZGVyLCBCb3gsIEJ1dHRvbiwgRHJvcFpvbmUsIH0gZnJvbSAnQGFkbWluanMvZGVzaWduLXN5c3RlbSc7XG5jb25zdCBJbXBvcnRDb21wb25lbnQgPSAoeyByZXNvdXJjZSB9KSA9PiB7XG4gICAgY29uc3QgW2ZpbGUsIHNldEZpbGVdID0gdXNlU3RhdGUobnVsbCk7XG4gICAgY29uc3Qgc2VuZE5vdGljZSA9IHVzZU5vdGljZSgpO1xuICAgIGNvbnN0IFtpc0ZldGNoaW5nLCBzZXRGZXRjaGluZ10gPSB1c2VTdGF0ZSgpO1xuICAgIGNvbnN0IG9uVXBsb2FkID0gKHVwbG9hZGVkRmlsZSkgPT4ge1xuICAgICAgICBzZXRGaWxlKHVwbG9hZGVkRmlsZT8uWzBdID8/IG51bGwpO1xuICAgIH07XG4gICAgY29uc3Qgb25TdWJtaXQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldEZldGNoaW5nKHRydWUpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW1wb3J0RGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgaW1wb3J0RGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBmaWxlPy5uYW1lKTtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBBcGlDbGllbnQoKS5yZXNvdXJjZUFjdGlvbih7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VJZDogcmVzb3VyY2UuaWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uTmFtZTogJ2ltcG9ydCcsXG4gICAgICAgICAgICAgICAgZGF0YTogaW1wb3J0RGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VuZE5vdGljZSh7IG1lc3NhZ2U6ICdJbXBvcnRlZCBzdWNjZXNzZnVsbHknLCB0eXBlOiAnc3VjY2VzcycgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNlbmROb3RpY2UoeyBtZXNzYWdlOiBlLm1lc3NhZ2UsIHR5cGU6ICdlcnJvcicgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0RmV0Y2hpbmcoZmFsc2UpO1xuICAgIH07XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHtcbiAgICAgICAgcmV0dXJuIDxMb2FkZXIgLz47XG4gICAgfVxuICAgIHJldHVybiAoPEJveCBtYXJnaW49XCJhdXRvXCIgbWF4V2lkdGg9ezYwMH0gZGlzcGxheT1cImZsZXhcIiBqdXN0aWZ5Q29udGVudD1cImNlbnRlclwiIGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cbiAgICAgIDxEcm9wWm9uZSBmaWxlcz17W119IG9uQ2hhbmdlPXtvblVwbG9hZH0gbXVsdGlwbGU9e2ZhbHNlfS8+XG4gICAgICB7ZmlsZSAmJiAoPERyb3Bab25lSXRlbSBmaWxlPXtmaWxlfSBmaWxlbmFtZT17ZmlsZS5uYW1lfSBvblJlbW92ZT17KCkgPT4gc2V0RmlsZShudWxsKX0vPil9XG4gICAgICA8Qm94IGRpc3BsYXk9XCJmbGV4XCIganVzdGlmeUNvbnRlbnQ9XCJjZW50ZXJcIiBtPXsxMH0+XG4gICAgICAgIDxCdXR0b24gb25DbGljaz17b25TdWJtaXR9IGRpc2FibGVkPXshZmlsZSB8fCBpc0ZldGNoaW5nfT5cbiAgICAgICAgICBVcGxvYWRcbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0JveD5cbiAgICA8L0JveD4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IEltcG9ydENvbXBvbmVudDtcbiIsIihmdW5jdGlvbihhLGIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sYik7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZXhwb3J0cyliKCk7ZWxzZXtiKCksYS5GaWxlU2F2ZXI9e2V4cG9ydHM6e319LmV4cG9ydHN9fSkodGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYSxiKXtyZXR1cm5cInVuZGVmaW5lZFwiPT10eXBlb2YgYj9iPXthdXRvQm9tOiExfTpcIm9iamVjdFwiIT10eXBlb2YgYiYmKGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQ6IEV4cGVjdGVkIHRoaXJkIGFyZ3VtZW50IHRvIGJlIGEgb2JqZWN0XCIpLGI9e2F1dG9Cb206IWJ9KSxiLmF1dG9Cb20mJi9eXFxzKig/OnRleHRcXC9cXFMqfGFwcGxpY2F0aW9uXFwveG1sfFxcUypcXC9cXFMqXFwreG1sKVxccyo7LipjaGFyc2V0XFxzKj1cXHMqdXRmLTgvaS50ZXN0KGEudHlwZSk/bmV3IEJsb2IoW1wiXFx1RkVGRlwiLGFdLHt0eXBlOmEudHlwZX0pOmF9ZnVuY3Rpb24gYyhhLGIsYyl7dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbihcIkdFVFwiLGEpLGQucmVzcG9uc2VUeXBlPVwiYmxvYlwiLGQub25sb2FkPWZ1bmN0aW9uKCl7ZyhkLnJlc3BvbnNlLGIsYyl9LGQub25lcnJvcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJjb3VsZCBub3QgZG93bmxvYWQgZmlsZVwiKX0sZC5zZW5kKCl9ZnVuY3Rpb24gZChhKXt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiSEVBRFwiLGEsITEpO3RyeXtiLnNlbmQoKX1jYXRjaChhKXt9cmV0dXJuIDIwMDw9Yi5zdGF0dXMmJjI5OT49Yi5zdGF0dXN9ZnVuY3Rpb24gZShhKXt0cnl7YS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfWNhdGNoKGMpe3ZhciBiPWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7Yi5pbml0TW91c2VFdmVudChcImNsaWNrXCIsITAsITAsd2luZG93LDAsMCwwLDgwLDIwLCExLCExLCExLCExLDAsbnVsbCksYS5kaXNwYXRjaEV2ZW50KGIpfX12YXIgZj1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cud2luZG93PT09d2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZiYmc2VsZi5zZWxmPT09c2VsZj9zZWxmOlwib2JqZWN0XCI9PXR5cGVvZiBnbG9iYWwmJmdsb2JhbC5nbG9iYWw9PT1nbG9iYWw/Z2xvYmFsOnZvaWQgMCxhPWYubmF2aWdhdG9yJiYvTWFjaW50b3NoLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvQXBwbGVXZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJiEvU2FmYXJpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGc9Zi5zYXZlQXN8fChcIm9iamVjdFwiIT10eXBlb2Ygd2luZG93fHx3aW5kb3chPT1mP2Z1bmN0aW9uKCl7fTpcImRvd25sb2FkXCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGUmJiFhP2Z1bmN0aW9uKGIsZyxoKXt2YXIgaT1mLlVSTHx8Zi53ZWJraXRVUkwsaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtnPWd8fGIubmFtZXx8XCJkb3dubG9hZFwiLGouZG93bmxvYWQ9ZyxqLnJlbD1cIm5vb3BlbmVyXCIsXCJzdHJpbmdcIj09dHlwZW9mIGI/KGouaHJlZj1iLGoub3JpZ2luPT09bG9jYXRpb24ub3JpZ2luP2Uoaik6ZChqLmhyZWYpP2MoYixnLGgpOmUoaixqLnRhcmdldD1cIl9ibGFua1wiKSk6KGouaHJlZj1pLmNyZWF0ZU9iamVjdFVSTChiKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoai5ocmVmKX0sNEU0KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShqKX0sMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihmLGcsaCl7aWYoZz1nfHxmLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiIT10eXBlb2YgZiluYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihiKGYsaCksZyk7ZWxzZSBpZihkKGYpKWMoZixnLGgpO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWYsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZShpKX0pfX06ZnVuY3Rpb24oYixkLGUsZyl7aWYoZz1nfHxvcGVuKFwiXCIsXCJfYmxhbmtcIiksZyYmKGcuZG9jdW1lbnQudGl0bGU9Zy5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBiKXJldHVybiBjKGIsZCxlKTt2YXIgaD1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09Yi50eXBlLGk9L2NvbnN0cnVjdG9yL2kudGVzdChmLkhUTUxFbGVtZW50KXx8Zi5zYWZhcmksaj0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKGp8fGgmJml8fGEpJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgRmlsZVJlYWRlcil7dmFyIGs9bmV3IEZpbGVSZWFkZXI7ay5vbmxvYWRlbmQ9ZnVuY3Rpb24oKXt2YXIgYT1rLnJlc3VsdDthPWo/YTphLnJlcGxhY2UoL15kYXRhOlteO10qOy8sXCJkYXRhOmF0dGFjaG1lbnQvZmlsZTtcIiksZz9nLmxvY2F0aW9uLmhyZWY9YTpsb2NhdGlvbj1hLGc9bnVsbH0say5yZWFkQXNEYXRhVVJMKGIpfWVsc2V7dmFyIGw9Zi5VUkx8fGYud2Via2l0VVJMLG09bC5jcmVhdGVPYmplY3RVUkwoYik7Zz9nLmxvY2F0aW9uPW06bG9jYXRpb24uaHJlZj1tLGc9bnVsbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bC5yZXZva2VPYmplY3RVUkwobSl9LDRFNCl9fSk7Zi5zYXZlQXM9Zy5zYXZlQXM9ZyxcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlJiYobW9kdWxlLmV4cG9ydHM9Zyl9KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RmlsZVNhdmVyLm1pbi5qcy5tYXAiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZXhwb3J0IHsgX3R5cGVvZiBhcyBkZWZhdWx0IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpO1xuXG4gIC8vIENsb25lIHRoZSBkYXRlXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJ2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcblxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJ2YXIgZGF0ZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn07XG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcblxuLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuXG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmNSA9IChfcmVmNiA9IChfcmVmNyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTMub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUzJG9wdGkud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNyAhPT0gdm9pZCAwID8gX3JlZjcgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY2ICE9PSB2b2lkIDAgPyBfcmVmNiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsNC53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY1ICE9PSB2b2lkIDAgPyBfcmVmNSA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMpICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZWRbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImV4cG9ydCBjb25zdCBFeHBvcnRlcnMgPSBbJ2NzdicsICdqc29uJywgJ3htbCddO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQXBpQ2xpZW50LCB1c2VOb3RpY2UgfSBmcm9tICdhZG1pbmpzJztcbmltcG9ydCB7IEJveCwgQnV0dG9uLCBMb2FkZXIsIFRleHQgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IGZvcm1hdCBmcm9tICdkYXRlLWZucy9mb3JtYXQnO1xuaW1wb3J0IHsgRXhwb3J0ZXJzIH0gZnJvbSAnLi4vZXhwb3J0ZXIudHlwZS5qcyc7XG5leHBvcnQgY29uc3QgbWltZVR5cGVzID0ge1xuICAgIGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICBjc3Y6ICd0ZXh0L2NzdicsXG4gICAgeG1sOiAndGV4dC94bWwnLFxufTtcbmV4cG9ydCBjb25zdCBnZXRFeHBvcnRlZEZpbGVOYW1lID0gKGV4dGVuc2lvbikgPT4gYGV4cG9ydC0ke2Zvcm1hdChEYXRlLm5vdygpLCAneXl5eS1NTS1kZF9ISC1tbScpfS4ke2V4dGVuc2lvbn1gO1xuY29uc3QgRXhwb3J0Q29tcG9uZW50ID0gKHsgcmVzb3VyY2UgfSkgPT4ge1xuICAgIGNvbnN0IFtpc0ZldGNoaW5nLCBzZXRGZXRjaGluZ10gPSB1c2VTdGF0ZSgpO1xuICAgIGNvbnN0IHNlbmROb3RpY2UgPSB1c2VOb3RpY2UoKTtcbiAgICBjb25zdCBleHBvcnREYXRhID0gYXN5bmMgKHR5cGUpID0+IHtcbiAgICAgICAgc2V0RmV0Y2hpbmcodHJ1ZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGE6IHsgZXhwb3J0ZWREYXRhIH0sIH0gPSBhd2FpdCBuZXcgQXBpQ2xpZW50KCkucmVzb3VyY2VBY3Rpb24oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIHJlc291cmNlSWQ6IHJlc291cmNlLmlkLFxuICAgICAgICAgICAgICAgIGFjdGlvbk5hbWU6ICdleHBvcnQnLFxuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZXhwb3J0ZWREYXRhXSwgeyB0eXBlOiBtaW1lVHlwZXNbdHlwZV0gfSk7XG4gICAgICAgICAgICBzYXZlQXMoYmxvYiwgZ2V0RXhwb3J0ZWRGaWxlTmFtZSh0eXBlKSk7XG4gICAgICAgICAgICBzZW5kTm90aWNlKHsgbWVzc2FnZTogJ0V4cG9ydGVkIHN1Y2Nlc3NmdWxseScsIHR5cGU6ICdzdWNjZXNzJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc2VuZE5vdGljZSh7IG1lc3NhZ2U6IGUubWVzc2FnZSwgdHlwZTogJ2Vycm9yJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBzZXRGZXRjaGluZyhmYWxzZSk7XG4gICAgfTtcbiAgICBpZiAoaXNGZXRjaGluZykge1xuICAgICAgICByZXR1cm4gPExvYWRlciAvPjtcbiAgICB9XG4gICAgcmV0dXJuICg8Qm94PlxuICAgICAgPEJveCBkaXNwbGF5PVwiZmxleFwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgIDxUZXh0IHZhcmlhbnQ9XCJsZ1wiPkNob29zZSBleHBvcnQgZm9ybWF0OjwvVGV4dD5cbiAgICAgIDwvQm94PlxuICAgICAgPEJveCBkaXNwbGF5PVwiZmxleFwiIGp1c3RpZnlDb250ZW50PVwiY2VudGVyXCI+XG4gICAgICAgIHtFeHBvcnRlcnMubWFwKHBhcnNlclR5cGUgPT4gKDxCb3gga2V5PXtwYXJzZXJUeXBlfSBtPXsyfT5cbiAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gZXhwb3J0RGF0YShwYXJzZXJUeXBlKX0gZGlzYWJsZWQ9e2lzRmV0Y2hpbmd9PlxuICAgICAgICAgICAgICB7cGFyc2VyVHlwZS50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9Cb3g+KSl9XG4gICAgICA8L0JveD5cbiAgICA8L0JveD4pO1xufTtcbmV4cG9ydCBkZWZhdWx0IEV4cG9ydENvbXBvbmVudDtcbiIsImltcG9ydCB7IERyb3Bab25lLCBEcm9wWm9uZUl0ZW0sIEZvcm1Hcm91cCwgTGFiZWwgfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGZsYXQsIHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAnYWRtaW5qcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmNvbnN0IEVkaXQgPSAoeyBwcm9wZXJ0eSwgcmVjb3JkLCBvbkNoYW5nZSB9KSA9PiB7XG4gICAgY29uc3QgeyB0cmFuc2xhdGVQcm9wZXJ0eSB9ID0gdXNlVHJhbnNsYXRpb24oKTtcbiAgICBjb25zdCB7IHBhcmFtcyB9ID0gcmVjb3JkO1xuICAgIGNvbnN0IHsgY3VzdG9tIH0gPSBwcm9wZXJ0eTtcbiAgICBjb25zdCBwYXRoID0gZmxhdC5nZXQocGFyYW1zLCBjdXN0b20uZmlsZVBhdGhQcm9wZXJ0eSk7XG4gICAgY29uc3Qga2V5ID0gZmxhdC5nZXQocGFyYW1zLCBjdXN0b20ua2V5UHJvcGVydHkpO1xuICAgIGNvbnN0IGZpbGUgPSBmbGF0LmdldChwYXJhbXMsIGN1c3RvbS5maWxlUHJvcGVydHkpO1xuICAgIGNvbnN0IFtvcmlnaW5hbEtleSwgc2V0T3JpZ2luYWxLZXldID0gdXNlU3RhdGUoa2V5KTtcbiAgICBjb25zdCBbZmlsZXNUb1VwbG9hZCwgc2V0RmlsZXNUb1VwbG9hZF0gPSB1c2VTdGF0ZShbXSk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgLy8gaXQgbWVhbnMgbWVhbnMgdGhhdCBzb21lb25lIGhpdCBzYXZlIGFuZCBuZXcgZmlsZSBoYXMgYmVlbiB1cGxvYWRlZFxuICAgICAgICAvLyBpbiB0aGlzIGNhc2UgZmxpZXNUb1VwbG9hZCBzaG91bGQgYmUgY2xlYXJlZC5cbiAgICAgICAgLy8gVGhpcyBoYXBwZW5zIHdoZW4gdXNlciB0dXJucyBvZmYgcmVkaXJlY3QgYWZ0ZXIgbmV3L2VkaXRcbiAgICAgICAgaWYgKCh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkgIT09IG9yaWdpbmFsS2V5KVxuICAgICAgICAgICAgfHwgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnICYmICFvcmlnaW5hbEtleSlcbiAgICAgICAgICAgIHx8ICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGtleSkgJiYga2V5Lmxlbmd0aCAhPT0gb3JpZ2luYWxLZXkubGVuZ3RoKSkge1xuICAgICAgICAgICAgc2V0T3JpZ2luYWxLZXkoa2V5KTtcbiAgICAgICAgICAgIHNldEZpbGVzVG9VcGxvYWQoW10pO1xuICAgICAgICB9XG4gICAgfSwgW2tleSwgb3JpZ2luYWxLZXldKTtcbiAgICBjb25zdCBvblVwbG9hZCA9IChmaWxlcykgPT4ge1xuICAgICAgICBzZXRGaWxlc1RvVXBsb2FkKGZpbGVzKTtcbiAgICAgICAgb25DaGFuZ2UoY3VzdG9tLmZpbGVQcm9wZXJ0eSwgZmlsZXMpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgICBvbkNoYW5nZShjdXN0b20uZmlsZVByb3BlcnR5LCBudWxsKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU11bHRpUmVtb3ZlID0gKHNpbmdsZUtleSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IChmbGF0LmdldChyZWNvcmQucGFyYW1zLCBjdXN0b20ua2V5UHJvcGVydHkpIHx8IFtdKS5pbmRleE9mKHNpbmdsZUtleSk7XG4gICAgICAgIGNvbnN0IGZpbGVzVG9EZWxldGUgPSBmbGF0LmdldChyZWNvcmQucGFyYW1zLCBjdXN0b20uZmlsZXNUb0RlbGV0ZVByb3BlcnR5KSB8fCBbXTtcbiAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdQYXRoID0gcGF0aC5tYXAoKGN1cnJlbnRQYXRoLCBpKSA9PiAoaSAhPT0gaW5kZXggPyBjdXJyZW50UGF0aCA6IG51bGwpKTtcbiAgICAgICAgICAgIGxldCBuZXdQYXJhbXMgPSBmbGF0LnNldChyZWNvcmQucGFyYW1zLCBjdXN0b20uZmlsZXNUb0RlbGV0ZVByb3BlcnR5LCBbLi4uZmlsZXNUb0RlbGV0ZSwgaW5kZXhdKTtcbiAgICAgICAgICAgIG5ld1BhcmFtcyA9IGZsYXQuc2V0KG5ld1BhcmFtcywgY3VzdG9tLmZpbGVQYXRoUHJvcGVydHksIG5ld1BhdGgpO1xuICAgICAgICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICAgICAgICAgIC4uLnJlY29yZCxcbiAgICAgICAgICAgICAgICBwYXJhbXM6IG5ld1BhcmFtcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdZb3UgY2Fubm90IHJlbW92ZSBmaWxlIHdoZW4gdGhlcmUgYXJlIG5vIHVwbG9hZGVkIGZpbGVzIHlldCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUdyb3VwLCBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KExhYmVsLCBudWxsLCB0cmFuc2xhdGVQcm9wZXJ0eShwcm9wZXJ0eS5sYWJlbCwgcHJvcGVydHkucmVzb3VyY2VJZCkpLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bab25lLCB7IG9uQ2hhbmdlOiBvblVwbG9hZCwgbXVsdGlwbGU6IGN1c3RvbS5tdWx0aXBsZSwgdmFsaWRhdGU6IHtcbiAgICAgICAgICAgICAgICBtaW1lVHlwZXM6IGN1c3RvbS5taW1lVHlwZXMsXG4gICAgICAgICAgICAgICAgbWF4U2l6ZTogY3VzdG9tLm1heFNpemUsXG4gICAgICAgICAgICB9LCBmaWxlczogZmlsZXNUb1VwbG9hZCB9KSxcbiAgICAgICAgIWN1c3RvbS5tdWx0aXBsZSAmJiBrZXkgJiYgcGF0aCAmJiAhZmlsZXNUb1VwbG9hZC5sZW5ndGggJiYgZmlsZSAhPT0gbnVsbCAmJiAoUmVhY3QuY3JlYXRlRWxlbWVudChEcm9wWm9uZUl0ZW0sIHsgZmlsZW5hbWU6IGtleSwgc3JjOiBwYXRoLCBvblJlbW92ZTogaGFuZGxlUmVtb3ZlIH0pKSxcbiAgICAgICAgY3VzdG9tLm11bHRpcGxlICYmIGtleSAmJiBrZXkubGVuZ3RoICYmIHBhdGggPyAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwga2V5Lm1hcCgoc2luZ2xlS2V5LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgLy8gd2hlbiB3ZSByZW1vdmUgaXRlbXMgd2Ugc2V0IG9ubHkgcGF0aCBpbmRleCB0byBudWxscy5cbiAgICAgICAgICAgIC8vIGtleSBpcyBzdGlsbCB0aGVyZS4gVGhpcyBpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIG1haW50YWluIGFsbCB0aGUgaW5kZXhlcy4gU28gaGVyZSB3ZSBzaW1wbHkgZmlsdGVyIG91dCBlbGVtZW50cyB3aGljaFxuICAgICAgICAgICAgLy8gd2VyZSByZW1vdmVkIGFuZCBkaXNwbGF5IG9ubHkgd2hhdCB3YXMgbGVmdFxuICAgICAgICAgICAgY29uc3QgY3VycmVudFBhdGggPSBwYXRoW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UGF0aCA/IChSZWFjdC5jcmVhdGVFbGVtZW50KERyb3Bab25lSXRlbSwgeyBrZXk6IHNpbmdsZUtleSwgZmlsZW5hbWU6IHNpbmdsZUtleSwgc3JjOiBwYXRoW2luZGV4XSwgb25SZW1vdmU6ICgpID0+IGhhbmRsZU11bHRpUmVtb3ZlKHNpbmdsZUtleSkgfSkpIDogJyc7XG4gICAgICAgIH0pKSkgOiAnJykpO1xufTtcbmV4cG9ydCBkZWZhdWx0IEVkaXQ7XG4iLCJleHBvcnQgY29uc3QgQXVkaW9NaW1lVHlwZXMgPSBbXG4gICAgJ2F1ZGlvL2FhYycsXG4gICAgJ2F1ZGlvL21pZGknLFxuICAgICdhdWRpby94LW1pZGknLFxuICAgICdhdWRpby9tcGVnJyxcbiAgICAnYXVkaW8vb2dnJyxcbiAgICAnYXBwbGljYXRpb24vb2dnJyxcbiAgICAnYXVkaW8vb3B1cycsXG4gICAgJ2F1ZGlvL3dhdicsXG4gICAgJ2F1ZGlvL3dlYm0nLFxuICAgICdhdWRpby8zZ3BwMicsXG5dO1xuZXhwb3J0IGNvbnN0IFZpZGVvTWltZVR5cGVzID0gW1xuICAgICd2aWRlby94LW1zdmlkZW8nLFxuICAgICd2aWRlby9tcGVnJyxcbiAgICAndmlkZW8vb2dnJyxcbiAgICAndmlkZW8vbXAydCcsXG4gICAgJ3ZpZGVvL3dlYm0nLFxuICAgICd2aWRlby8zZ3BwJyxcbiAgICAndmlkZW8vM2dwcDInLFxuXTtcbmV4cG9ydCBjb25zdCBJbWFnZU1pbWVUeXBlcyA9IFtcbiAgICAnaW1hZ2UvYm1wJyxcbiAgICAnaW1hZ2UvZ2lmJyxcbiAgICAnaW1hZ2UvanBlZycsXG4gICAgJ2ltYWdlL3BuZycsXG4gICAgJ2ltYWdlL3N2Zyt4bWwnLFxuICAgICdpbWFnZS92bmQubWljcm9zb2Z0Lmljb24nLFxuICAgICdpbWFnZS90aWZmJyxcbiAgICAnaW1hZ2Uvd2VicCcsXG5dO1xuZXhwb3J0IGNvbnN0IENvbXByZXNzZWRNaW1lVHlwZXMgPSBbXG4gICAgJ2FwcGxpY2F0aW9uL3gtYnppcCcsXG4gICAgJ2FwcGxpY2F0aW9uL3gtYnppcDInLFxuICAgICdhcHBsaWNhdGlvbi9nemlwJyxcbiAgICAnYXBwbGljYXRpb24vamF2YS1hcmNoaXZlJyxcbiAgICAnYXBwbGljYXRpb24veC10YXInLFxuICAgICdhcHBsaWNhdGlvbi96aXAnLFxuICAgICdhcHBsaWNhdGlvbi94LTd6LWNvbXByZXNzZWQnLFxuXTtcbmV4cG9ydCBjb25zdCBEb2N1bWVudE1pbWVUeXBlcyA9IFtcbiAgICAnYXBwbGljYXRpb24veC1hYml3b3JkJyxcbiAgICAnYXBwbGljYXRpb24veC1mcmVlYXJjJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9vaycsXG4gICAgJ2FwcGxpY2F0aW9uL21zd29yZCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50JyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAgICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnByZXNlbnRhdGlvbicsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQnLFxuICAgICdhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHQnLFxuICAgICdhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nLFxuICAgICdhcHBsaWNhdGlvbi92bmQucmFyJyxcbiAgICAnYXBwbGljYXRpb24vcnRmJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJyxcbiAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXQnLFxuXTtcbmV4cG9ydCBjb25zdCBUZXh0TWltZVR5cGVzID0gW1xuICAgICd0ZXh0L2NzcycsXG4gICAgJ3RleHQvY3N2JyxcbiAgICAndGV4dC9odG1sJyxcbiAgICAndGV4dC9jYWxlbmRhcicsXG4gICAgJ3RleHQvamF2YXNjcmlwdCcsXG4gICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdhcHBsaWNhdGlvbi9sZCtqc29uJyxcbiAgICAndGV4dC9qYXZhc2NyaXB0JyxcbiAgICAndGV4dC9wbGFpbicsXG4gICAgJ2FwcGxpY2F0aW9uL3hodG1sK3htbCcsXG4gICAgJ2FwcGxpY2F0aW9uL3htbCcsXG4gICAgJ3RleHQveG1sJyxcbl07XG5leHBvcnQgY29uc3QgQmluYXJ5RG9jc01pbWVUeXBlcyA9IFtcbiAgICAnYXBwbGljYXRpb24vZXB1Yit6aXAnLFxuICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuXTtcbmV4cG9ydCBjb25zdCBGb250TWltZVR5cGVzID0gW1xuICAgICdmb250L290ZicsXG4gICAgJ2ZvbnQvdHRmJyxcbiAgICAnZm9udC93b2ZmJyxcbiAgICAnZm9udC93b2ZmMicsXG5dO1xuZXhwb3J0IGNvbnN0IE90aGVyTWltZVR5cGVzID0gW1xuICAgICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLFxuICAgICdhcHBsaWNhdGlvbi94LWNzaCcsXG4gICAgJ2FwcGxpY2F0aW9uL3ZuZC5hcHBsZS5pbnN0YWxsZXIreG1sJyxcbiAgICAnYXBwbGljYXRpb24veC1odHRwZC1waHAnLFxuICAgICdhcHBsaWNhdGlvbi94LXNoJyxcbiAgICAnYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2gnLFxuICAgICd2bmQudmlzaW8nLFxuICAgICdhcHBsaWNhdGlvbi92bmQubW96aWxsYS54dWwreG1sJyxcbl07XG5leHBvcnQgY29uc3QgTWltZVR5cGVzID0gW1xuICAgIC4uLkF1ZGlvTWltZVR5cGVzLFxuICAgIC4uLlZpZGVvTWltZVR5cGVzLFxuICAgIC4uLkltYWdlTWltZVR5cGVzLFxuICAgIC4uLkNvbXByZXNzZWRNaW1lVHlwZXMsXG4gICAgLi4uRG9jdW1lbnRNaW1lVHlwZXMsXG4gICAgLi4uVGV4dE1pbWVUeXBlcyxcbiAgICAuLi5CaW5hcnlEb2NzTWltZVR5cGVzLFxuICAgIC4uLk90aGVyTWltZVR5cGVzLFxuICAgIC4uLkZvbnRNaW1lVHlwZXMsXG4gICAgLi4uT3RoZXJNaW1lVHlwZXMsXG5dO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuaW1wb3J0IHsgQm94LCBCdXR0b24sIEljb24gfSBmcm9tICdAYWRtaW5qcy9kZXNpZ24tc3lzdGVtJztcbmltcG9ydCB7IGZsYXQgfSBmcm9tICdhZG1pbmpzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBdWRpb01pbWVUeXBlcywgSW1hZ2VNaW1lVHlwZXMgfSBmcm9tICcuLi90eXBlcy9taW1lLXR5cGVzLnR5cGUuanMnO1xuY29uc3QgU2luZ2xlRmlsZSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgbmFtZSwgcGF0aCwgbWltZVR5cGUsIHdpZHRoIH0gPSBwcm9wcztcbiAgICBpZiAocGF0aCAmJiBwYXRoLmxlbmd0aCkge1xuICAgICAgICBpZiAobWltZVR5cGUgJiYgSW1hZ2VNaW1lVHlwZXMuaW5jbHVkZXMobWltZVR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwgeyBzcmM6IHBhdGgsIHN0eWxlOiB7IG1heEhlaWdodDogd2lkdGgsIG1heFdpZHRoOiB3aWR0aCB9LCBhbHQ6IG5hbWUgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaW1lVHlwZSAmJiBBdWRpb01pbWVUeXBlcy5pbmNsdWRlcyhtaW1lVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImF1ZGlvXCIsIHsgY29udHJvbHM6IHRydWUsIHNyYzogcGF0aCB9LFxuICAgICAgICAgICAgICAgIFwiWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlXCIsXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwgbnVsbCwgXCJhdWRpb1wiKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidHJhY2tcIiwgeyBraW5kOiBcImNhcHRpb25zXCIgfSkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQm94LCBudWxsLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbiwgeyBhczogXCJhXCIsIGhyZWY6IHBhdGgsIG1sOiBcImRlZmF1bHRcIiwgc2l6ZTogXCJzbVwiLCByb3VuZGVkOiB0cnVlLCB0YXJnZXQ6IFwiX2JsYW5rXCIgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbiwgeyBpY29uOiBcIkRvY3VtZW50RG93bmxvYWRcIiwgY29sb3I6IFwid2hpdGVcIiwgbXI6IFwiZGVmYXVsdFwiIH0pLFxuICAgICAgICAgICAgbmFtZSkpKTtcbn07XG5jb25zdCBGaWxlID0gKHsgd2lkdGgsIHJlY29yZCwgcHJvcGVydHkgfSkgPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tIH0gPSBwcm9wZXJ0eTtcbiAgICBsZXQgcGF0aCA9IGZsYXQuZ2V0KHJlY29yZD8ucGFyYW1zLCBjdXN0b20uZmlsZVBhdGhQcm9wZXJ0eSk7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gZmxhdC5nZXQocmVjb3JkPy5wYXJhbXMsIGN1c3RvbS5maWxlTmFtZVByb3BlcnR5ID8gY3VzdG9tLmZpbGVOYW1lUHJvcGVydHkgOiBjdXN0b20ua2V5UHJvcGVydHkpO1xuICAgIGNvbnN0IG1pbWVUeXBlID0gY3VzdG9tLm1pbWVUeXBlUHJvcGVydHlcbiAgICAgICAgJiYgZmxhdC5nZXQocmVjb3JkPy5wYXJhbXMsIGN1c3RvbS5taW1lVHlwZVByb3BlcnR5KTtcbiAgICBpZiAoIXByb3BlcnR5LmN1c3RvbS5tdWx0aXBsZSkge1xuICAgICAgICBpZiAoY3VzdG9tLm9wdHMgJiYgY3VzdG9tLm9wdHMuYmFzZVVybCkge1xuICAgICAgICAgICAgcGF0aCA9IGAke2N1c3RvbS5vcHRzLmJhc2VVcmx9LyR7bmFtZX1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChTaW5nbGVGaWxlLCB7IHBhdGg6IHBhdGgsIG5hbWU6IG5hbWUsIHdpZHRoOiB3aWR0aCwgbWltZVR5cGU6IG1pbWVUeXBlIH0pKTtcbiAgICB9XG4gICAgaWYgKGN1c3RvbS5vcHRzICYmIGN1c3RvbS5vcHRzLmJhc2VVcmwpIHtcbiAgICAgICAgY29uc3QgYmFzZVVybCA9IGN1c3RvbS5vcHRzLmJhc2VVcmwgfHwgJyc7XG4gICAgICAgIHBhdGggPSBwYXRoLm1hcCgoc2luZ2xlUGF0aCwgaW5kZXgpID0+IGAke2Jhc2VVcmx9LyR7bmFtZVtpbmRleF19YCk7XG4gICAgfVxuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgcGF0aC5tYXAoKHNpbmdsZVBhdGgsIGluZGV4KSA9PiAoUmVhY3QuY3JlYXRlRWxlbWVudChTaW5nbGVGaWxlLCB7IGtleTogc2luZ2xlUGF0aCwgcGF0aDogc2luZ2xlUGF0aCwgbmFtZTogbmFtZVtpbmRleF0sIHdpZHRoOiB3aWR0aCwgbWltZVR5cGU6IG1pbWVUeXBlW2luZGV4XSB9KSkpKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgRmlsZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmlsZSBmcm9tICcuL2ZpbGUuanMnO1xuY29uc3QgTGlzdCA9IChwcm9wcykgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmlsZSwgeyB3aWR0aDogMTAwLCAuLi5wcm9wcyB9KSk7XG5leHBvcnQgZGVmYXVsdCBMaXN0O1xuIiwiaW1wb3J0IHsgRm9ybUdyb3VwLCBMYWJlbCB9IGZyb20gJ0BhZG1pbmpzL2Rlc2lnbi1zeXN0ZW0nO1xuaW1wb3J0IHsgdXNlVHJhbnNsYXRpb24gfSBmcm9tICdhZG1pbmpzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmlsZSBmcm9tICcuL2ZpbGUuanMnO1xuY29uc3QgU2hvdyA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IHsgcHJvcGVydHkgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgdHJhbnNsYXRlUHJvcGVydHkgfSA9IHVzZVRyYW5zbGF0aW9uKCk7XG4gICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KEZvcm1Hcm91cCwgbnVsbCxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChMYWJlbCwgbnVsbCwgdHJhbnNsYXRlUHJvcGVydHkocHJvcGVydHkubGFiZWwsIHByb3BlcnR5LnJlc291cmNlSWQpKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChGaWxlLCB7IHdpZHRoOiBcIjEwMCVcIiwgLi4ucHJvcHMgfSkpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBTaG93O1xuIiwiQWRtaW5KUy5Vc2VyQ29tcG9uZW50cyA9IHt9XG5pbXBvcnQgRXF1aXBtZW50Rm9ybSBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0VxdWlwbWVudC9FcXVpcG1lbnRGb3JtJ1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5FcXVpcG1lbnRGb3JtID0gRXF1aXBtZW50Rm9ybVxuaW1wb3J0IERhc2hib2FyZENhcmQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9EYXNoYm9hcmQvRGFzaGJvYXJkJ1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5EYXNoYm9hcmRDYXJkID0gRGFzaGJvYXJkQ2FyZFxuaW1wb3J0IEN1c3RvbVNlbGVjdCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0VxdWlwbWVudC9DdXN0b21TZWxlY3QnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkN1c3RvbVNlbGVjdCA9IEN1c3RvbVNlbGVjdFxuaW1wb3J0IEN1c3RvbUNoZWNrQm94IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0N1c3RvbUNoZWNrQm94J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5DdXN0b21DaGVja0JveCA9IEN1c3RvbUNoZWNrQm94XG5pbXBvcnQgTG9jYXRpb25JbmZvQ29tcG9uZW50IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0xvY2F0aW9uSW5mb0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuTG9jYXRpb25JbmZvQ29tcG9uZW50ID0gTG9jYXRpb25JbmZvQ29tcG9uZW50XG5pbXBvcnQgU2luZ2xlU2VsZWN0IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L1NpbmdsZVNlbGVjdCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuU2luZ2xlU2VsZWN0ID0gU2luZ2xlU2VsZWN0XG5pbXBvcnQgR2FzUGFyYW1zQ29tcG9uZW50IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvRXF1aXBtZW50L0dhc1BhcmFtc0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuR2FzUGFyYW1zQ29tcG9uZW50ID0gR2FzUGFyYW1zQ29tcG9uZW50XG5pbXBvcnQgVG9nZ2xlU3dpdGNoIGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvc3R5bGVkLWNvbXBvbmVucy9Ub2dnbGVTd2l0Y2gnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlRvZ2dsZVN3aXRjaCA9IFRvZ2dsZVN3aXRjaFxuaW1wb3J0IEludGVydmVudGlvbnNRdWVzdGlvbnNDb21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vSW50ZXJ2ZW50aW9uc1F1ZXN0aW9uc0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuSW50ZXJ2ZW50aW9uc1F1ZXN0aW9uc0NvbXBvbmVudCA9IEludGVydmVudGlvbnNRdWVzdGlvbnNDb21wb25lbnRcbmltcG9ydCBTb3VmZmxhZ2VDb21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vU291ZmZsYWdlQ29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5Tb3VmZmxhZ2VDb21wb25lbnQgPSBTb3VmZmxhZ2VDb21wb25lbnRcbmltcG9ydCBBZGRpdGlvbmFsUXVlc3Rpb25zQ29tcG9uZW50IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL0FkZGl0aW9uYWxRdWVzdGlvbnNDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkFkZGl0aW9uYWxRdWVzdGlvbnNDb21wb25lbnQgPSBBZGRpdGlvbmFsUXVlc3Rpb25zQ29tcG9uZW50XG5pbXBvcnQgUXVlc3Rpb25Db21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vUXVlc3Rpb25Db21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlF1ZXN0aW9uQ29tcG9uZW50ID0gUXVlc3Rpb25Db21wb25lbnRcbmltcG9ydCBQcmVzc2lvbnNDb21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vUHJlc3Npb25zQ29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5QcmVzc2lvbnNDb21wb25lbnQgPSBQcmVzc2lvbnNDb21wb25lbnRcbmltcG9ydCBQb21wZUVhdUNvbXBvbmVudCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0ludGVydmVudGlvbi9Qb21wZUVhdUNvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuUG9tcGVFYXVDb21wb25lbnQgPSBQb21wZUVhdUNvbXBvbmVudFxuaW1wb3J0IEV0YW5jaGVpdGVDb21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vRXRhbmNoZWl0ZUNvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuRXRhbmNoZWl0ZUNvbXBvbmVudCA9IEV0YW5jaGVpdGVDb21wb25lbnRcbmltcG9ydCBTZWN1cml0ZUNvbXBvbmVudCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL0ludGVydmVudGlvbi9TZWN1cml0ZUNvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuU2VjdXJpdGVDb21wb25lbnQgPSBTZWN1cml0ZUNvbXBvbmVudFxuaW1wb3J0IFJlc2lzdGFuY2VDb21wb25lbnQgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9JbnRlcnZlbnRpb24vUmVzaXN0YW5jZUNvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuUmVzaXN0YW5jZUNvbXBvbmVudCA9IFJlc2lzdGFuY2VDb21wb25lbnRcbmltcG9ydCBJbnRlcnZlbnRpb25RdWVzdGlvbnNTaG93IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL0ludGVydmVudGlvblF1ZXN0aW9uc1Nob3cnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkludGVydmVudGlvblF1ZXN0aW9uc1Nob3cgPSBJbnRlcnZlbnRpb25RdWVzdGlvbnNTaG93XG5pbXBvcnQgUGFyYW1ldHJhZ2VTaG93Q29tcG9uZW50IGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvSW50ZXJ2ZW50aW9uL1BhcmFtZXRyYWdlU2hvd0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuUGFyYW1ldHJhZ2VTaG93Q29tcG9uZW50ID0gUGFyYW1ldHJhZ2VTaG93Q29tcG9uZW50XG5pbXBvcnQgUHJvZHVjdFNlbGVjdCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL1Byb2R1Y3RTZWxlY3QnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlByb2R1Y3RTZWxlY3QgPSBQcm9kdWN0U2VsZWN0XG5pbXBvcnQgRnJlbmNoRGF0ZSBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0ZyZW5jaERhdGUnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkZyZW5jaERhdGUgPSBGcmVuY2hEYXRlXG5pbXBvcnQgRXF1aXBtZW50U2hvd0NvbXBvbmVudCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0VxdWlwbWVudFNob3dDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkVxdWlwbWVudFNob3dDb21wb25lbnQgPSBFcXVpcG1lbnRTaG93Q29tcG9uZW50XG5pbXBvcnQgSW50ZXJ2ZW50aW9uU2hvd0NvbXBvbmVudCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0ludGVydmVudGlvblNob3dDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkludGVydmVudGlvblNob3dDb21wb25lbnQgPSBJbnRlcnZlbnRpb25TaG93Q29tcG9uZW50XG5pbXBvcnQgRmlsZVVwbG9hZCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL0ZpbGVVcGxvYWQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkZpbGVVcGxvYWQgPSBGaWxlVXBsb2FkXG5pbXBvcnQgU2lnbmF0dXJlQ29tcCBmcm9tICcuLi9hZG1pbmpzLWFwcC9jb21wb25lbnRzL2F0b21zL1NpZ25hdHVyZUNvbXAnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlNpZ25hdHVyZUNvbXAgPSBTaWduYXR1cmVDb21wXG5pbXBvcnQgUHJvZHVjdFNob3cgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9hdG9tcy9Qcm9kdWN0U2hvdydcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuUHJvZHVjdFNob3cgPSBQcm9kdWN0U2hvd1xuaW1wb3J0IFNob3dTaWduYXR1cmUgZnJvbSAnLi4vYWRtaW5qcy1hcHAvY29tcG9uZW50cy9hdG9tcy9TaG93U2lnbmF0dXJlJ1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5TaG93U2lnbmF0dXJlID0gU2hvd1NpZ25hdHVyZVxuaW1wb3J0IERhdGVDb21wIGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvRGF0ZUNvbXAnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLkRhdGVDb21wID0gRGF0ZUNvbXBcbmltcG9ydCBFbXB0eUJyZWFrIGZyb20gJy4uL2FkbWluanMtYXBwL2NvbXBvbmVudHMvYXRvbXMvRW1wdHlCcmVhaydcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuRW1wdHlCcmVhayA9IEVtcHR5QnJlYWtcbmltcG9ydCBJbXBvcnRDb21wb25lbnQgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL2ltcG9ydC1leHBvcnQvbGliL2NvbXBvbmVudHMvSW1wb3J0Q29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5JbXBvcnRDb21wb25lbnQgPSBJbXBvcnRDb21wb25lbnRcbmltcG9ydCBFeHBvcnRDb21wb25lbnQgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL2ltcG9ydC1leHBvcnQvbGliL2NvbXBvbmVudHMvRXhwb3J0Q29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5FeHBvcnRDb21wb25lbnQgPSBFeHBvcnRDb21wb25lbnRcbmltcG9ydCBVcGxvYWRFZGl0Q29tcG9uZW50IGZyb20gJy4uL25vZGVfbW9kdWxlcy9AYWRtaW5qcy91cGxvYWQvYnVpbGQvZmVhdHVyZXMvdXBsb2FkLWZpbGUvY29tcG9uZW50cy9VcGxvYWRFZGl0Q29tcG9uZW50J1xuQWRtaW5KUy5Vc2VyQ29tcG9uZW50cy5VcGxvYWRFZGl0Q29tcG9uZW50ID0gVXBsb2FkRWRpdENvbXBvbmVudFxuaW1wb3J0IFVwbG9hZExpc3RDb21wb25lbnQgZnJvbSAnLi4vbm9kZV9tb2R1bGVzL0BhZG1pbmpzL3VwbG9hZC9idWlsZC9mZWF0dXJlcy91cGxvYWQtZmlsZS9jb21wb25lbnRzL1VwbG9hZExpc3RDb21wb25lbnQnXG5BZG1pbkpTLlVzZXJDb21wb25lbnRzLlVwbG9hZExpc3RDb21wb25lbnQgPSBVcGxvYWRMaXN0Q29tcG9uZW50XG5pbXBvcnQgVXBsb2FkU2hvd0NvbXBvbmVudCBmcm9tICcuLi9ub2RlX21vZHVsZXMvQGFkbWluanMvdXBsb2FkL2J1aWxkL2ZlYXR1cmVzL3VwbG9hZC1maWxlL2NvbXBvbmVudHMvVXBsb2FkU2hvd0NvbXBvbmVudCdcbkFkbWluSlMuVXNlckNvbXBvbmVudHMuVXBsb2FkU2hvd0NvbXBvbmVudCA9IFVwbG9hZFNob3dDb21wb25lbnQiXSwibmFtZXMiOlsicmVhY3RJc19kZXZlbG9wbWVudCIsInJlYWN0SXNNb2R1bGUiLCJyZXF1aXJlJCQwIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0UHJvdG90eXBlT2YiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNiIsImhhc093blByb3BlcnR5IiwiZGlzdCIsIm1lcmdlIiwiZGVmYXVsdHMiLCJzeXN0ZW0iLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsImNvbG9ycyIsImJnIiwicHJpbWFyeSIsImFwcHJvdmFsIiwiZGFuZ2VyIiwiZ3JleTEwMCIsImdyZXk4MCIsIndoaXRlIiwiQnV0dG9uIiwic3R5bGVkIiwiYnV0dG9uIiwicHJvcHMiLCJiZ0NvbG9yIiwiaG92ZXJDb2xvciIsInNwYWNlIiwibGF5b3V0IiwiU2VjdGlvbiIsInNlY3Rpb24iLCJIZWFkaW5nIiwiaDYiLCJSb3ciLCJkaXYiLCJDZWxsIiwic2VsZWN0IiwiaW5wdXQiLCJJbWFnZSIsImltZyIsInRleHRhcmVhIiwiUGFyYWdyYXBoIiwicCIsImZvbnRTdHlsZSIsImZvbnRDb2xvciIsIkNvbG9yZWRTcGFuIiwic3BhbiIsIkFIcmVmIiwiYSIsImxhYmVsIiwiSW5wdXRBdG9tIiwiQm94IiwiZGlyZWN0aW9uIiwiQ2FudmFzQ29udGFpbmVyIiwiQ2hlY2tib3hHcmlkIiwiY29sdW1ucyIsIkxhYmVsIiwiU3R5bGVkVGV4dEFyZWEiLCJFcXVpcG1lbnRGb3JtIiwicmVzb3VyY2UiLCJjb25zb2xlIiwibG9nIiwiUmVhY3QiLCJjcmVhdGVFbGVtZW50IiwiRGFzaGJvYXJkQ2FyZCIsImNvbnRhaW5lclN0eWxlIiwiZGlzcGxheSIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImhlaWdodCIsImNhcmRTdHlsZSIsIndpZHRoIiwicGFkZGluZyIsImJveFNoYWRvdyIsInRleHRBbGlnbiIsImJvcmRlclJhZGl1cyIsImxvZ29TdHlsZSIsIm1hcmdpbkJvdHRvbSIsInN0eWxlIiwic3JjIiwiYWx0IiwiQ3VzdG9tU2VsZWN0IiwicHJvcGVydHkiLCJyZWNvcmQiLCJvbkNoYW5nZSIsIm9wdGlvbnMiLCJzZXRPcHRpb25zIiwidXNlU3RhdGUiLCJwYXJlbnRGaWVsZCIsInNldFBhcmVudEZpZWxkIiwicGFyZW50IiwicGFyZW50VmFsdWUiLCJzZXRQYXJlbnRWYWx1ZSIsInBhcmFtcyIsInNlbGVjdGVkT3B0aW9uVmFsdWUiLCJzZXRTZWxlY3RlZE9wdGlvblZhbHVlIiwiaGFuZGxlQ2hhbmdlIiwic2VsZWN0ZWRPcHRpb24iLCJwYXRoIiwidmFsdWUiLCJmZXRjaE9wdGlvbnMiLCJ1bmRlZmluZWQiLCJyZXNwb25zZSIsImZldGNoIiwidGFibGVOYW1lIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwiZm9ybWF0dGVkT3B0aW9ucyIsInJlY29yZHMiLCJtYXAiLCJpdGVtIiwiaWQiLCJ0aXRsZSIsIm5hbWUiLCJpbml0aWFsVmFsdWUiLCJmaW5kIiwib3B0IiwiZXJyb3IiLCJ1c2VFZmZlY3QiLCJGcmFnbWVudCIsIkZvcm1Hcm91cCIsImh0bWxGb3IiLCJTZWxlY3QiLCJGb3JtTWVzc2FnZSIsIlRvZ2dsZUxhYmVsIiwiY29sb3IiLCJUb2dnbGVJbnB1dCIsImF0dHJzIiwidHlwZSIsIlRvZ2dsZUluZGljYXRvciIsImNoZWNrZWQiLCJzY2FsZSIsIlRvZ2dsZVN3aXRjaCIsIkN1c3RvbUNoZWNrQm94IiwiY2hlY2tCb3hlcyIsImF2YWlsYWJsZVZhbHVlcyIsImluaXRpYWxTdGF0ZSIsInJlZHVjZSIsImFjYyIsImNoZWNrIiwiaXNWaXNpYmxlIiwic2V0SXNWaXNpYmxlIiwiaW5jbHVkZXMiLCJzZXRDaGVja2VkIiwiZmllbGQiLCJwcmV2U3RhdGUiLCJuZXdWaXNpYmlsaXR5IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJINiIsImJveCIsImkiLCJlIiwidGFyZ2V0IiwiTG9jYXRpb25JbmZvQ29tcG9uZW50IiwiaW5wdXRWYWx1ZSIsInNldElucHV0VmFsdWUiLCJoYXNNb3JlIiwic2V0SGFzTW9yZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsInBhZ2UiLCJzZXRQYWdlIiwicGVyUGFnZSIsInNob3dQcmVjaXNpb24iLCJzZXRTaG93UHJlY2lzaW9uIiwibG9hZE9wdGlvbnMiLCJjYWxsYmFjayIsIm5ld09wdGlvbnMiLCJwcmV2IiwibGVuZ3RoIiwidGV4dEZpZWxkVmFsdWUiLCJzZXRUZXh0RmllbGRWYWx1ZSIsImhhbmRsZUNoYW5nZVNlbGVjdCIsImhhbmRsZUNoYW5nZVRleHRGaWVsZCIsInRleHQiLCJ0ZXh0RmllbGQiLCJvbklucHV0Q2hhbmdlIiwib25NZW51U2Nyb2xsVG9Cb3R0b20iLCJpc1NlYXJjaGFibGUiLCJmbGV4R3JvdyIsIm1pbldpZHRoIiwiY2hlY2tCb3giLCJwcm9wZXJ0aWVzIiwicHJvcGVydHlQYXRoIiwicm93cyIsInBsYWNlaG9sZGVyIiwiU2luZ2xlU2VsZWN0IiwiY29udHJvbGVFdGFuY2hlaXRlIiwicG9pZHMiLCJwb3RlbnRpZWwiLCJkZXRlY3Rpb24iLCJjaGFyZ2UiLCJpc05hTiIsInRlbXBlcmF0dXJlT3B0aW9ucyIsInN0YXJ0IiwiZW5kIiwic3RlcCIsInJhbmdlIiwicHVzaCIsInIiLCJHYXNQYXJhbXNDb21wb25lbnQiLCJwZXJpb2RpY2l0ZSIsInNldFBlcmlvZGljaXRlIiwicG9pZHNHYXoiLCJzZXRQb2lkR2F6IiwiaGFzX2xlYWtfZGV0ZWN0aW9uIiwic2V0X2hhc19sZWFrX2RldGVjdGlvbiIsImdhc1R5cGVQcm9wZXJ0eSIsImhhbmRsZUlucHV0VmFsdWUiLCJnYXNfd2VpZ2h0IiwicGFyc2VGbG9hdCIsImhhbmRsZUxlYWtEZXRlY3Rpb24iLCJnYXNfdHlwZV9pZCIsIlN0eWxlZExhYmVsIiwibWIiLCJJbnB1dCIsIlNvdWZmbGFnZUNvbXBvbmVudCIsImZldGNoQXV4Iiwib3B0aW9uc01hcHBlciIsInF1ZXN0aW9uc1ZhbHVlc0hhbmRsZXIiLCJhdXhRdWVzdGlvbnMiLCJzZXRBdXhRdWVzdGlvbnMiLCJtb2RlT3B0aW9uIiwic2V0TW9kZU9wdGlvbiIsInJlbGV2ZVZhbHVlIiwic2V0UmVsZXZlVmFsdWUiLCJyZXByaXNlVmFsdWUiLCJzZXRSZXByaXNlVmFsdWUiLCJzb3VmRGVsdGFWYWx1ZSIsInNldFNvdWZEZWx0YVZhbHVlIiwibW9kZSIsInRlbXBSZWxldmUiLCJ0ZW1wUmVwcmlzZSIsInNvdWZmbGFnZURlbHRhIiwiaGFubGRlTW9kZSIsImhhbmRsZVJlbGV2ZSIsImhhbmRsZVJlcHJpc2UiLCJmZXRjaFF1ZXN0aW9ucyIsInBhcmVudERhdGEiLCJxdWVzdGlvbnMiLCJteSIsIlByZXNzaW9uc0NvbXBvbmVudCIsInByZXNzaW9uUmVsZXZlVmFsdWUiLCJzZXRQcmVzc2lvblJlbGV2ZVZhbHVlIiwicHJlc3Npb25SZWxldmUiLCJoYW5kbGVQcmVzc2lvblJlbGV2ZSIsIlBvbXBlRWF1Q29tcG9uZW50IiwiZGVwYXJ0RWF1VmFsdWUiLCJzZXREZXBhcnRFYXVWYWx1ZSIsInJldG91ckVhdVZhbHVlIiwic2V0UmV0b3VyRWF1VmFsdWUiLCJkZXBhcnRFYXUiLCJyZXRvdXJFYXUiLCJoYW5kbGVEZXBhcnQiLCJoYW5kbGVSZXRvdXIiLCJFdGFuY2hlaXRlQ29tcG9uZW50IiwiZXRhbmNoZVJlc2VhdXhWYWx1ZSIsInNldEV0YW5jaGVSZXNlYXV4VmFsdWUiLCJldGFuY2hlUmVzZWF1eCIsIlNlY3VyaXRlQ29tcG9uZW50IiwiZm9uY3Rpb25Hcm91cGVWYWx1ZSIsInNldEZvbmN0aW9uR3JvdXBlVmFsdWUiLCJmb25jdGlvbkdyb3VwZSIsIlJlc2lzdGFuY2VDb21wb25lbnQiLCJmZXRjaEFkZGl0aW9uYWxRdWVzdGlvbnMiLCJwYXJlbnRJZCIsImNoaWxkSWQiLCJ1cmwiLCJzdHIiLCJzcGxpdCIsIm9wdGlvbiIsIlF1ZXN0aW9uQ29tcG9uZW50IiwicXVlc3Rpb24iLCJjaGlsZFF1ZXN0aW9uc0hhbmRsZXIiLCJwYXJlbnRJZHMiLCJzZXRQYXJlbnRJZHMiLCJzZXRSZXNwb25zZSIsImF1eENvbXAiLCJzZXRBdXhDb21wIiwiYXV4TWFwcGluZyIsIk1hcCIsImNoaWxkIiwic2V0Q2hpbGRJZHMiLCJjaGlsZElkcyIsImludGVydmVudGlvbl90eXBlX2lkIiwiZXF1aXBtZW50X3R5cGVfaWQiLCJnZXQiLCJwcm9kdWl0X2lkIiwicGFyZW50QXJyYXkiLCJJbnRlcnZlbnRpb25zUXVlc3Rpb25zQ29tcG9uZW50Iiwic2V0UXVlc3Rpb25zIiwicXVlc3Rpb25WYWx1ZXMiLCJzZXRRdWVzdGlvblZhbHVlcyIsImNoaWxkUXVlc3Rpb25JZHMiLCJzZXRDaGlsZFF1ZXN0aW9uSWRzIiwiaW50ZXJ2ZW50aW9uVHlwZSIsInNldEludGVydmVudGlvblR5cGUiLCJKU09OIiwic3RyaW5naWZ5IiwibmV3UXVlc3Rpb24iLCJuZXdTdGF0ZSIsImV4aXN0aW5nSW5kZXgiLCJmaW5kSW5kZXgiLCJxIiwiZmlsdGVyIiwidGhlbiIsInJlcyIsImVuZHJvaXRfaWQiLCJjb252ZXJ0T3B0aW9ucyIsImNvbnZlcnRRdWVzdGlvbnMiLCJhcnIiLCJvYmoiLCJwYXJlbnRJbmRleCIsInZhbHVlcyIsIkFkZGl0aW9uYWxRdWVzdGlvbnNDb21wb25lbnQiLCJxdWVzdGlvbkl0ZW1zIiwidHJ1ZUZhbHNlQ29udmVydGVyIiwicGFyc2VJbnQiLCJJbnRlcnZlbnRpb25RdWVzdGlvbnNTaG93IiwiUHJvZHVjdFNob3ciLCJwcm9kdWl0IiwiZW5kcm9pdCIsImVxdWlwbWVudCIsImhyZWYiLCJQYXJhbWV0cmFnZVNob3dDb21wb25lbnQiLCJwb3B1bGF0ZWQiLCJQUk9EVUNUX0ZJRUxEX05BTUUiLCJQUk9EVUNUX1RBQkxFX05BTUUiLCJFTkRST0lUX0ZJRUxEX05BTUUiLCJFTkRST0lUX1RBQkxFX05BTUUiLCJFUVVJUE1FTlRfVFlQRV9GSUVMRF9OQU1FIiwiRVFVSVBNRU5UX1RZUEVfVEFCTEVfTkFNRSIsIlByb2R1Y3RTZWxlY3QiLCJwcm9kdWN0T3B0aW9ucyIsInNldFByb2R1Y3RPcHRpb25zIiwicHJvZHVjdF9pZCIsInNldFByb2R1Y3RJRCIsInByb2R1Y3RTZWxlY3RlZCIsInNldFByb2R1Y3RTZWxlY3RlZCIsImVuZHJvaXRPcHRpb25zIiwic2V0RW5kcm9pdE9wdGlvbnMiLCJzZXRFbmRyb2l0SUQiLCJlbmRyb2l0U2VsZWN0ZWQiLCJzZXRFbmRyb2l0U2VsZWN0ZWQiLCJlcXVpcG1lbnRUeXBlT3B0aW9ucyIsInNldEVxdWlwbWVudFR5cGVPcHRpb25zIiwic2V0RXF1aXBtZW50VHlwZUlkIiwiZXF1aXBtZW50U2VsZWN0ZWQiLCJzZXRFcXVpcG1lbnRTZWxlY3RlZCIsImZldGNoUHJvZHVjdE9wdGlvbnMiLCJmZXRjaEVuZHJvaXRPcHRpb25zIiwiZmV0Y2hFcXVpcG1lbnRPcHRpb25zIiwiaGFuZGxlUHJvZHVjdFNlbGVjdCIsImhhbmRsZUVuZHJvaXRTZWxlY3QiLCJoYW5kbGVFcXVpcG1lbnRTZWxlY3QiLCJGcmVuY2hEYXRlIiwiZGF0ZSIsImRhdGVPYmoiLCJEYXRlIiwiZm9ybWF0dGVkRGF0ZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImRheSIsIm1vbnRoIiwieWVhciIsImZvcm1hdCIsImRpc3BsYXlEYXRlIiwiZ2V0QWxsUHJvcGVydGllcyIsImFsbEVudHJpZXMiLCJlbnRyeSIsImVudHJpZXMiLCJ2YWwiLCJFcXVpcG1lbnRTaG93Q29tcG9uZW50IiwibXgiLCJzaXRlX2lkIiwibmZjX3RhZ19pZCIsInBhcmVudF9lcXVpcG1lbnRfaWQiLCJpbnN0YWxsYXRpb25fZGF0ZSIsImVxdWlwbWVudF9icmFuZF9pZCIsImVxdWlwbWVudF9tb2RlbCIsInNlcmlhbF9udW1iZXIiLCJyZW1vdGVfY29udHJvbF9udW1iZXIiLCJpc19pbnQiLCJ1bml0ZV9pbnRlcmlldXJfdHlwZV9pZCIsImlzX2V4dCIsInVuaXRlX2V4dGVyaWV1cl90eXBlX2lkIiwiaXNfZmluYWxpdGUiLCJpc19wbGFuY2hlcl9jaGF1ZmZhbnQiLCJpc19wbGFuY2hlcl9yYWZmcmFpY2hzc2FudCIsImlzX3JhZGlhdGV1cnMiLCJ2ZW50aWxvX2NvbnZlY3RldXJzIiwiaXNfZ2FzIiwibGVha19kZXRlY3Rpb25fcGVyaW9kaWNpdHkiLCJJbnRlcnZlbnRpb25TaG93Q29tcG9uZW50IiwiaXNEYXRlIiwiZmluZEtleSIsInV0aWxzIiwicHJvdG90eXBlIiwiZW5jb2RlIiwiVVJMU2VhcmNoUGFyYW1zIiwiRm9ybURhdGEiLCJCbG9iIiwicGxhdGZvcm0iLCJ2YWxpZGF0b3JzIiwiRmlsZVVwbG9hZGVyIiwiZmlsZVBhdGgiLCJzZXRGaWxlUGF0aCIsInN1Y2Nlc3NNc2ciLCJzZXRTdWNjZXNzTXNnIiwiZXJyTXNnIiwic2V0RXJyTXNnIiwiZmlsZSIsImZpbGVzIiwiZm9ybURhdGEiLCJhcHBlbmQiLCJheGlvcyIsInBvc3QiLCJlbmNvZGVVUklDb21wb25lbnQiLCJoZWFkZXJzIiwic3RhdHVzVGV4dCIsImlmIiwidGhpcyIsIlNpZ25hdHVyZUNvbXAiLCJzaWdDYW52YXMiLCJ1c2VSZWYiLCJjbGVhciIsImN1cnJlbnQiLCJkYXRhVVJMVG9CbG9iIiwiZGF0YVVSTCIsImhlYWRlciIsImJhc2U2NCIsIm1pbWUiLCJtYXRjaCIsImJzdHIiLCJhdG9iIiwibiIsInU4YXJyIiwiVWludDhBcnJheSIsImNoYXJDb2RlQXQiLCJzZW5kVG9TZXJ2ZXIiLCJibG9iIiwic2F2ZSIsImltYWdlRGF0YVVSTCIsInRvRGF0YVVSTCIsIm9uQ2xpY2siLCJTaWduYXR1cmVDYW52YXMiLCJyZWYiLCJwZW5Db2xvciIsImNhbnZhc1Byb3BzIiwiYmFja2dyb3VuZENvbG9yIiwiU2hvd1NpZ25hdHVyZSIsIkRhdGVDb21wIiwic3RhcnREYXRlIiwic2V0U3RhcnREYXRlIiwiaGFuZGxlRGF0ZUNoYW5nZSIsIkRhdGVQaWNrZXIiLCJwcm9wZXJ0eVR5cGUiLCJkYXRlRm9ybWF0IiwiRW1wdHlCcmVhayIsIkltcG9ydENvbXBvbmVudCIsInNldEZpbGUiLCJzZW5kTm90aWNlIiwidXNlTm90aWNlIiwiaXNGZXRjaGluZyIsInNldEZldGNoaW5nIiwib25VcGxvYWQiLCJ1cGxvYWRlZEZpbGUiLCJvblN1Ym1pdCIsImltcG9ydERhdGEiLCJBcGlDbGllbnQiLCJyZXNvdXJjZUFjdGlvbiIsIm1ldGhvZCIsInJlc291cmNlSWQiLCJhY3Rpb25OYW1lIiwibWVzc2FnZSIsIkxvYWRlciIsIm1hcmdpbiIsIm1heFdpZHRoIiwiZmxleERpcmVjdGlvbiIsIkRyb3Bab25lIiwibXVsdGlwbGUiLCJEcm9wWm9uZUl0ZW0iLCJmaWxlbmFtZSIsIm9uUmVtb3ZlIiwibSIsImRpc2FibGVkIiwiZ2xvYmFsIiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJmb3JtYXR0ZXJzIiwibGlnaHRGb3JtYXR0ZXJzIiwibG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsIm1pbWVUeXBlcyIsImNzdiIsInhtbCIsImdldEV4cG9ydGVkRmlsZU5hbWUiLCJleHRlbnNpb24iLCJub3ciLCJFeHBvcnRDb21wb25lbnQiLCJleHBvcnREYXRhIiwiZXhwb3J0ZWREYXRhIiwic2F2ZUFzIiwiVGV4dCIsInZhcmlhbnQiLCJFeHBvcnRlcnMiLCJwYXJzZXJUeXBlIiwidG9VcHBlckNhc2UiLCJ1c2VUcmFuc2xhdGlvbiIsImZsYXQiLCJJY29uIiwiQWRtaW5KUyIsIlVzZXJDb21wb25lbnRzIiwiRmlsZVVwbG9hZCIsIlVwbG9hZEVkaXRDb21wb25lbnQiLCJVcGxvYWRMaXN0Q29tcG9uZW50IiwiVXBsb2FkU2hvd0NvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0E7Q0FDMkM7Q0FDM0MsRUFBRSxDQUFDLFdBQVc7QUFFZDtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0EsSUFBSSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0NBQ3JELElBQUksaUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztDQUNuRCxJQUFJLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN2RCxJQUFJLHNCQUFzQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztDQUM3RCxJQUFJLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN2RCxJQUFJLG1CQUFtQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUN2RCxJQUFJLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7Q0FDckQsSUFBSSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Q0FDbkUsSUFBSSxzQkFBc0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDN0QsSUFBSSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7Q0FDdkQsSUFBSSx3QkFBd0Is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RyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO0NBQ2xMLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDdkc7Q0FDQSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtDQUMvQixRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFD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S0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUN0RCxHQUFHO0FBQ0g7Q0FDQSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7Q0FDcEIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDcEUsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUNsRixHQUFHO0FBQ0g7Q0FDQSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtDQUMzQyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDMUMsTUFBTSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Q0FDNUQsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDO0NBQ3BCLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUNoQixRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUM7Q0FDaEIsUUFBUSxLQUFLLElBQUk7Q0FDakIsVUFBVSxNQUFNO0FBQ2hCO0NBQ0EsUUFBUTtDQUNSLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNoQixPQUFPO0NBQ1AsS0FBSztBQUNMO0NBQ0EsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDMUIsR0FBRztBQUNIO0NBQ0EsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Q0FDaEIsSUFBSSxRQUFRLENBQUM7Q0FDYixNQUFNLEtBQUssS0FBSyxDQUFDLENBQUM7Q0FDbEIsTUFBTSxLQUFLLElBQUk7Q0FDZixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztDQUN6QixRQUFRLE1BQU07QUFDZDtDQUNBLE1BQU07Q0FDTixRQUFRLElBQUksVUFBVSxLQUFLLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksUUFBUSxLQUFLLE9BQU8sQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Q0FDMUgsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDbEIsU0FBUyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzQixLQUFLO0FBQ0w7Q0FDQSxJQUFJLE9BQU8sQ0FBQyxDQUFDO0NBQ2IsR0FBRztBQUNIO0NBQ0EsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Q0FDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQztDQUNqQixJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxVQUFVLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDN0YsSUFBSSxPQUFPLENBQUMsQ0FBQztDQUNiLEdBQUc7QUFDSDtDQUNBLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtDQUNuQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0NBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDWjtDQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0NBQ2YsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvQyxNQUFNLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLEtBQUssT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ3ZELEtBQUs7QUFDTDtDQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVB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QU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxpQkFBaUIsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUEyQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxPQUFPLE9BQU8sRUFBRSxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxHQUFHLE9BQUEsQ0FBQSxHQUFBLENBQVksaUJBQWlCLEVBQUUsT0FBWSxDQUFBLEdBQUEsQ0FBQSxPQUFPLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxPQUFPLE1BQU0sRUFBRSxhQUFhLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8saUJBQWlCLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLE9BQU8sT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBWSxDQUFBLEdBQUEsQ0FBQSwyQkFBMkIsRUFBRSxFQUFFLEdBQUcsWUFBWSwyQkFBMkIsQ0FBQyxPQUFPLEdBQUcsWUFBWSwyQkFBMkIsRUFBRSxPQUFZLENBQUEsR0FBQSxDQUFBLDJCQUEyQixDQUFDLEtBQUssQ0FBQyxHQUFHLFlBQVksaUJBQWlCLEVBQUUsRUFBRSxHQUFHLE9BQUEsQ0FBQSxHQUFBLENBQVksaUJBQWlCLENBQUMsT0FBTyxHQUFHLE9BQUEsQ0FBQSxHQUFBLENBQVksaUJBQWlCLEVBQUUsT0FBQSxDQUFBLEdBQUEsQ0FBWSxpQkFBaUIsQ0FBQyxZQUFZLEdBQUcsYUFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQXFDLENBQUMsQ0FBQyxDQUFDLHVEQUF1RCxDQUFDLENBQUMsQ0FBQywrUEFBK1AsQ0FBQyxDQUFDLENBQUMscUhBQXFILENBQUMsQ0FBQyxDQUFDLHFNQUFxTSxDQUFDLENBQUMsQ0FBQyxpS0FBaUssQ0FBQyxDQUFDLENBQUMsMk9BQTJPLENBQUMsQ0FBQyxDQUFDLG9IQUFvSCxDQUFDLENBQUMsQ0FBQyw2REFBNkQsQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsRUFBRSxDQUFDLGdVQUFnVSxDQUFDLEVBQUUsQ0FBQyx1TkFBdU4sQ0FBQyxFQUFFLENBQUMsb1dBQW9XLENBQUMsRUFBRSxDQUFDLHdMQUF3TCxDQUFDLEVBQUUsQ0FBQyw4Q0FBOEMsQ0FBQyxFQUFFLENBQUMsMFpBQTBaLENBQUMsRUFBRSxDQUFDLHNRQUFzUSxDQUFDLEVBQUUsQ0FBQyx3SUFBd0ksQ0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQXFLLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUE0QyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsOENBQThDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTSxXQUFXLEVBQUUsT0FBTyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxjQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsQ0FBQyxPQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsYUFBb0QsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFvQyxDQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBcUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFxQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUEyQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtMQUFrTCxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUF3QyxDQUFDLElBQUksQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyx3TkFBd04sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyx1Q0FBdUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU0sUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUF3QyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU0sV0FBVyxHQUFHLENBQUMsRUFBRSxhQUFhLEdBQUcsQ0FBQyxFQUFFLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBc0MsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBMkMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBc0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBcUMsQ0FBQyxDQUFDLGtCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQW9DLENBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdRQUFnUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU0sU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBc0MsV0FBVyxFQUFFLE9BQU8sU0FBUyxFQUFFLGFBQWEsR0FBRyxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsc05BQXNOLENBQUMsQ0FBcUUsV0FBVyxFQUFFLE9BQU8sTUFBTSxHQUFHLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQywwVEFBMFQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUF5Qiw0QkFBQSxDQUFBLGdCQUFBLENBQUMsRUFBRSxDQUFDLDRCQUFBLENBQUEsa0JBQTBCLENBQUMsRUFBRSxDQUFDLDRCQUFBLENBQUEsaUJBQXlCLENBQUMsRUFBRSxDQUEwQiw0QkFBQSxDQUFBLGlCQUFBLENBQUMsRUFBRSxDQUFzQiw0QkFBQSxDQUFBLGFBQUEsQ0FBQyxFQUFFLENBQXFCLDRCQUFBLENBQUEsWUFBQSxDQUFDLEVBQUUsQ0FBc0IsNEJBQUEsQ0FBQSxhQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBMkMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLHlDQUFvQixDQUFDLEVBQUUsQ0FBQyw0QkFBQSxDQUFBLGlCQUF5QixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQTJDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxtRUFBbUUsQ0FBQyxDQUFzQyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyw4VUFBOFUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsT0FBMkMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBWSw0QkFBQSxDQUFBLEdBQUEsQ0FBQyxFQUFFLENBQUMsUUFBZSxHQUFBLDRCQUFBLENBQUEsT0FBQSxDQUFDLEVBQUUsK0NBQTBCLENBQUMsQ0FBQyxDQUFDLDRCQUFBLENBQUEsU0FBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFzQyxXQUFXLEVBQUUsT0FBTyxTQUFTLEVBQUUsYUFBYSxHQUFHLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxpSEFBaUgsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyw0QkFBQSxDQUFBLFFBQWdCLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLDRCQUFBLENBQUEsT0FBZSxDQUFDLE9BQU8sQ0FBQyw0QkFBQSxDQUFBLFNBQWlCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQTJDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLHdIQUF3SCxD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QUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUM1RCxDQUFDO0FBQ0Q7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTtDQUNwQyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxHQUFHLENBQUM7Q0FDeEIsRUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7Q0FDdEQ7Q0FDQSxJQUFJLEtBQUssR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEMsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7Q0FDbEQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7Q0FDM0IsQ0FBQztBQUNEO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxTQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Q0FDMUIsRUFBRSxPQUFPQSxPQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUN0RCxDQUFDO0FBQ0Q7Q0FDQSxNQUFNLFVBQVUsR0FBR0EsT0FBSyxDQUFDLFlBQVksQ0FBQ0EsT0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxNQUFNLENBQUMsSUFBSSxFQUFFO0NBQzdFLEVBQUUsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQy9CLENBQUMsQ0FBQyxDQUFDO0FB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Q0FBQyxDQUFDO0NBQ2IsSUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNiLElBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQztBQUNEO0NBQ0EsRUFBQSxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFVLEtBQUssRUFBRTtLQUM5QyxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMxRixHQUFDLENBQUM7QUFDRjtDQUNBLEVBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsVUFBVSxLQUFLLEVBQUU7Q0FDOUMsSUFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNsRixHQUFDLENBQUM7QUFDRjtDQUNBLEVBQUEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFBVSxLQUFLLEVBQUU7S0FDeEMsT0FBTyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQztDQUM5RSxHQUFDLENBQUM7QUFDRjtHQUNBLFNBQVMsTUFBTSxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtDQUMxRCxJQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0NBQy9CLElBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7Q0FDM0IsSUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztDQUMzQixJQUFFLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzFCO0FBQ0Q7Q0FDQTtDQUNBLEVBQUEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsWUFBWTtDQUN0QyxJQUFFLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztDQUNqQixJQUFFLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztDQUNqQixJQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0NBQ2xCLElBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDbEI7Q0FDQSxJQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtDQUN0QyxNQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Q0FDdEIsTUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xHLE1BQUksSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNsRyxNQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtDQUNm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T0FBTyxFQUFFLENBQUM7Q0FDWixHQUFDLENBQUM7QUFDRjtHQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEdBQUcsVUFBVSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtLQUMxRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdEIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3RCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0QixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEI7Q0FDQSxJQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7Q0FDOUQsSUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzlEO0NBQ0EsSUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0NBQzVDLElBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUM1QztLQUNFLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0QixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEI7S0FDRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7QUFDcEQ7S0FDRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDckIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCO0NBQ0EsSUFBRSxPQUFPO0NBQ1QsTUFBSSxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDdkMsTUFBSSxFQUFFLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7Q0FDdkMsS0FBRyxDQUFDO0NBQ0osR0FBQyxDQUFDO0FBQ0Y7Q0FDQSxFQUFBLFlBQVksQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsVUFBVSxLQUFLLEVBQUU7Q0FDaEUsSUFBRSxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO0NBQ3BDLElBQUUsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztDQUNoQyxJQUFFLElBQUksTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDMUM7S0FDRSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQztBQUN0STtLQUNFLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0M7Q0FDQSxJQUFFLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztDQUNqQyxJQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO0FBQ3hCO0NBQ0EsSUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQztDQUNoQyxJQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO0FBQzdCO0tBQ0UsT0FBTyxNQUFNLENBQUM7Q0FDaEIsR0FBQyxDQUFDO0FBQ0Y7Q0FDQSxFQUFBLFlBQVksQ0FBQyxTQUFTLENBQUMsWUFBWSxHQUFHLFVBQVUsUUFBUSxFQUFFO0NBQzFELElBQUUsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztDQUNqRSxHQUFDLENBQUM7QUFDRjtHQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUU7Q0FDMUQsSUFBRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQ3RCO0tBQ0UsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDakIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDN0MsSUFBRSxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztDQUN4QixHQUFDLENBQUM7QUFDRjtHQUNBLFlBQVksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUU7Q0FDM0UsSUFBRSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0NBQ3RCLElBQUUsSUFBSSxVQUFVLEdBQUcsUUFBUSxHQUFHLFVBQVUsQ0FBQztDQUN6QyxJQUFFLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDN0M7Q0FDQSxJQUFFLEdBQUcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNsQjtDQUNBLElBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO0NBQ3pDO0NBQ0EsTUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO0NBQzFCLE1BQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNuQixNQUFJLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Q0FDckIsTUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0NBQ2xCLE1BQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUNuQixNQUFJLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckI7T0FDSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDckMsTUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Q0FDdkMsTUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FB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QUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUU7Q0FDQSxJQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Q0FDbEQsSUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BEO0NBQ0EsSUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxVQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO09BQzFELElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUM7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxNQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtTQUNoSCxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsUUFB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QUEsQ0FBQSxPQUFBLENBQWUsQ0FBQyxHQUFzSCxDQUFDLENBQUNBLGNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQWMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBOzs7Ozs7RUNBcHBDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQW1ELE1BQWUsQ0FBQSxPQUFBLENBQUEsQ0FBQyxDQUFDamIsMkJBQXFCLENBQUNHLHNCQUFnQixDQUFDQyxvQkFBQSxFQUF3QixDQUFDQyxZQUFzQixFQUFBLEVBQStULENBQUMsQ0FBQzRhLGNBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBYyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsbUNBQW1DLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLDJEQUEyRCxDQUFDLENBQUMsT0FBTSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxFQUFFLE9BQU8sQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQywwREFBMEQsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLGFBQWEsR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FB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QUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsT0FBTyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBT2lFLGNBQU0sRUFBRUEsY0FBTSxDQUFDLE1BQU0sR0FBR0EsY0FBTSxDQUFDQSxjQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUUsT0FBTyxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsT0FBTyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBQyxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENB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Q0FDQTtDQUNBLElBQUksV0FBVyxHQUFHO0NBQ2xCLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7Q0FDdEUsRUFBRSxXQUFXLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztDQUNuRyxFQUFFLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDO0NBQ2xJLENBQUMsQ0FBQztDQUNGLElBQUksU0FBUyxHQUFHO0NBQ2hCLEVBQUUsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0NBQzdDLEVBQUUsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQ25ELEVBQUUsV0FBVyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0NBQ2hFLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDO0NBQ3RGLENBQUMsQ0FBQztD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Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtDQUNBO0NBQ0E7Q0FDQTtBQUNBO0NBQ2UsU0FBUyxNQUFNLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUU7Q0FDbkUsRUFBSyxJQUFDLElBQUksQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQTBDLHFCQUFxQixDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUEwQyxzQkFBc0IsQ0FBQyxDQUFDLHVCQUF1QjtDQUNyUyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7Q0FDN0IsRUFBRSxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDekMsRUFBRSxJQUFJLGNBQWMsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO0NBQzNDLEVBQUUsSUFBSUMsUUFBTSxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsZUFBZSxHQUE0QyxLQUFLLENBQUMsQ0FBaUIsTUFBTSxJQUFJLElBQUksZUFBZSxLQUFLLEtBQUssQ0FBQyxHQUFHLGVBQWUsR0FBRyxjQUFjLENBQUMsTUFBTSxNQUFNLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLEdBQUcsSUFBSSxHQUFHQyxNQUFhLENBQUM7Q0FDalAsRUFBRSxJQUFJLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLHFCQUFxQixHQUE0QyxLQUFLLENBQUMsQ0FBZ0MsTUFBTSxJQUFJLElBQUkscUJBQXFCLEtBQUssS0FBSyxDQUFDLEdBQUcscUJBQXFCLEdBQTRDLEtBQUssQ0FBQyxDQUFnUCxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLGNBQWMsQ0FBQyxxQkFBcUIsTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxJQUFJLHFCQUFxQixLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEdBQUcscUJBQXFCLENBQUMsT0FBTyxNQUFNLElBQUksSUFBSSxzQkFBc0IsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxxQkFBcUIsTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzN0I7Q0FDQTtDQUNBLEVBQUUsSUFBSSxFQUFFLHFCQUFxQixJQUFJLENBQUMsSUFBSSxxQkFBcUIsSUFBSSxDQUFDLENBQUMsRUFBRTtDQUNuRSxJQUFJLE1BQU0sSUFBSSxVQUFVLENBQUMsMkRBQTJELENBQUMsQ0FBQztDQUN0RixHQUFHO0NBQ0gsRUFBRSxJQUFJLFlBQVksR0FBRyxTQUFTLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxxQkFBcUIsR0FBNEMsS0FBSyxDQUFDLENBQXVCLE1BQU0sSUFBSSxJQUFJLHFCQUFxQixLQUFLLEtBQUssQ0FBQyxHQUFHLHFCQUFxQixHQUE0QyxLQUFLLENBQUMsQ0FBdU8sTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxjQUFjLENBQUMsWUFBWSxNQUFNLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsc0JBQXNCLEdBQUcsY0FBYyxDQUFDLE1BQU0sTUFBTSxJQUFJLElBQUksc0JBQXNCLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLE1BQU0sSUFBSSxJQUFJLHNCQUFzQixLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLHNCQUFzQixDQUFDLFlBQVksTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNqNUI7Q0FDQTtDQUNBLEVBQUUsSUFBSSxFQUFFLFlBQVksSUFBSSxDQUFDLElBQUksWUFBWSxJQUFJLENBQUMsQ0FBQyxFQUFFO0NBQ2pELElBQUksTUFBTSxJQUFJLFVBQVUsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0NBQzdFLEdBQUc7Q0FDSCxFQUFFLElBQUksQ0FBQ0QsUUFBTSxDQUFDLFFBQVEsRUFBRTtDQUN4QixJQUFJLE1BQU0sSUFBSSxVQUFVLENBQUMsdUNBQXVDLENBQUMsQ0FBQztDQUNsRSxHQUFHO0NBQ0gsRUFBRSxJQUFJLENBQUNBLFFBQU0sQ0FBQyxVQUFVLEVBQUU7Q0FDMUIsSUFBSSxNQUFNLElBQUksVUFBVSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7Q0FDcEUsR0FBRztDQUNILEVBQUUsSUFBSSxZQUFZLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQ3ZDLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtDQUM5QixJQUFJLE1BQU0sSUFBSSxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQztDQUMvQyxHQUFHO0FBQ0g7Q0FDQTtDQUNBO0NBQ0E7Q0FDQSxFQUFFLElBQUksY0FBYyxHQUFHLCtCQUErQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ3JFLEVBQUUsSUFBSSxPQUFPLEdBQUcsZUFBZSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsQ0FBQztDQUM5RCxFQUFFLElBQUksZ0JBQWdCLEdBQUc7Q0FDekIsSUFBSSxxQkFBcUIsRUFBRSxxQkFBcUI7Q0FDaEQsSUFBSSxZQUFZLEVBQUUsWUFBWTtDQUM5QixJQUFJLE1BQU0sRUFBRUEsUUFBTTtDQUNsQixJQUFJLGFBQWEsRUFBRSxZQUFZO0NBQy9CLEdBQUcsQ0FBQztDQUNKLEVBQUUsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLFNBQVMsRUFBRTtDQUNwRixJQUFJLElBQUksY0FBYyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0QyxJQUFJLElBQUksY0FBYyxLQUFLLEdBQUcsSUFBSSxjQUFjLEtBQUssR0FBRyxFQUFFO0NBQzFELE1BQU0sSUFBSSxhQUFhLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0NBQ3pELE1BQU0sT0FBTyxhQUFhLENBQUMsU0FBUyxFQUFFQSxRQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDekQsS0FBSztDQUNMLElBQUksT0FBTyxTQUFTLENBQUM7Q0FDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLFNBQVMsRUFBRTtDQUNyRTtDQUNBLElBQUksSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO0NBQzVCLE1BQU0sT0FBTyxHQUFHLENBQUM7Q0FDakIsS0FBSztDQUNMLElBQUksSUFBSSxjQUFjLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3RDLElBQUksSUFBSSxjQUFjLEtBQUssR0FBRyxFQUFFO0NBQ2hDLE1BQU0sT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUMzQyxLQUFLO0NBQ0wsSUFBSSxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7Q0FDL0MsSUFBSSxJQUFJLFNBQVMsRUFBRTtDQUNuQixNQUFNLElBQXdGLHdCQUF3QixDQUFDLFNBQVMsQ0FBQyxFQUFFO0NBQ25JLFFBQVEsbUJBQW1CLENBQUMsU0FBUyxFQUFFLGNBQWMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztDQUMxRSxPQUFPO0NBQ1AsTUFBTSxJQUF5Rix5QkFBeUIsQ0FBQyxTQUFTLENBQUMsRUFBRTtDQUNySSxRQUFRLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7Q0FDMUUsT0FBTztDQUNQLE1BQU0sT0FBTyxTQUFTLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRUEsUUFBTSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0NBQzlFLEtBQUs7Q0FDTCxJQUFJLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFO0NBQzdELE1BQU0sTUFBTSxJQUFJLFVBQVUsQ0FBQyxnRUFBZ0UsR0FBRyxjQUFjLEdBQUcsR0FBRyxDQUFDLENBQUM7Q0FDcEgsS0FBSztDQUNMLElBQUksT0FBTyxTQUFTLENBQUM7Q0FDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQ2QsRUFBRSxPQUFPLE1BQU0sQ0FBQztDQUNoQixDQUFDO0NBQ0QsU0FBUyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUU7Q0FDbkMsRUFBRSxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Q0FDakQsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFO0NBQ2hCLElBQUksT0FBTyxLQUFLLENBQUM7Q0FDakIsR0FBRztDQUNILEVBQUUsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0NBQ3BEOztDQ2paTyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDOztDQ014QyxNQUFNRSxTQUFTLEdBQUc7Q0FDckJyWSxFQUFBQSxJQUFJLEVBQUUsa0JBQWtCO0NBQ3hCc1ksRUFBQUEsR0FBRyxFQUFFLFVBQVU7Q0FDZkMsRUFBQUEsR0FBRyxFQUFFLFVBQUE7Q0FDVCxDQUFDLENBQUE7Q0FDTSxNQUFNQyxtQkFBbUIsR0FBSUMsU0FBUyxJQUFLLENBQUEsT0FBQSxFQUFVbkksTUFBTSxDQUFDUCxJQUFJLENBQUMySSxHQUFHLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFBLENBQUEsRUFBSUQsU0FBUyxDQUFFLENBQUEsQ0FBQTtDQUNqSCxNQUFNRSxlQUFlLEdBQUdBLENBQUM7Q0FBRTdiLEVBQUFBLFFBQUFBO0NBQVMsQ0FBQyxLQUFLO0dBQ3RDLE1BQU0sQ0FBQzBaLFVBQVUsRUFBRUMsV0FBVyxDQUFDLEdBQUcvWCxjQUFRLEVBQUUsQ0FBQTtDQUM1QyxFQUFBLE1BQU00WCxVQUFVLEdBQUdDLGlCQUFTLEVBQUUsQ0FBQTtDQUM5QixFQUFBLE1BQU1xQyxVQUFVLEdBQUcsTUFBT3RYLElBQUksSUFBSztLQUMvQm1WLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUNqQixJQUFJO09BQ0EsTUFBTTtDQUFFMVcsUUFBQUEsSUFBSSxFQUFFO0NBQUU4WSxVQUFBQSxZQUFBQTtDQUFhLFNBQUE7UUFBSSxHQUFHLE1BQU0sSUFBSS9CLGlCQUFTLEVBQUUsQ0FBQ0MsY0FBYyxDQUFDO0NBQ3JFQyxRQUFBQSxNQUFNLEVBQUUsTUFBTTtTQUNkQyxVQUFVLEVBQUVuYSxRQUFRLENBQUN1RCxFQUFFO0NBQ3ZCNlcsUUFBQUEsVUFBVSxFQUFFLFFBQVE7Q0FDcEJsWSxRQUFBQSxNQUFNLEVBQUU7Q0FDSnNDLFVBQUFBLElBQUFBO0NBQ0osU0FBQTtDQUNKLE9BQUMsQ0FBQyxDQUFBO09BQ0YsTUFBTTJULElBQUksR0FBRyxJQUFJdkMsSUFBSSxDQUFDLENBQUNtRyxZQUFZLENBQUMsRUFBRTtTQUFFdlgsSUFBSSxFQUFFK1csU0FBUyxDQUFDL1csSUFBSSxDQUFBO0NBQUUsT0FBQyxDQUFDLENBQUE7Q0FDaEV3WCxNQUFBQSwyQkFBTSxDQUFDN0QsSUFBSSxFQUFFdUQsbUJBQW1CLENBQUNsWCxJQUFJLENBQUMsQ0FBQyxDQUFBO0NBQ3ZDZ1YsTUFBQUEsVUFBVSxDQUFDO0NBQUVhLFFBQUFBLE9BQU8sRUFBRSx1QkFBdUI7Q0FBRTdWLFFBQUFBLElBQUksRUFBRSxTQUFBO0NBQVUsT0FBQyxDQUFDLENBQUE7TUFDcEUsQ0FDRCxPQUFPMEIsQ0FBQyxFQUFFO0NBQ05zVCxNQUFBQSxVQUFVLENBQUM7U0FBRWEsT0FBTyxFQUFFblUsQ0FBQyxDQUFDbVUsT0FBTztDQUFFN1YsUUFBQUEsSUFBSSxFQUFFLE9BQUE7Q0FBUSxPQUFDLENBQUMsQ0FBQTtDQUNyRCxLQUFBO0tBQ0FtVixXQUFXLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDckIsQ0FBQTtDQUNELEVBQUEsSUFBSUQsVUFBVSxFQUFFO0NBQ1osSUFBQSxvQkFBT3ZaLHNCQUFBLENBQUFDLGFBQUEsQ0FBQ2thLG1CQUFNLE1BQUUsQ0FBQyxDQUFBO0NBQ3JCLEdBQUE7R0FDQSxvQkFBUW5hLHNCQUFBLENBQUFDLGFBQUEsQ0FBQ1osZ0JBQUcscUJBQ1ZXLHNCQUFBLENBQUFDLGFBQUEsQ0FBQ1osZ0JBQUcsRUFBQTtDQUFDZSxJQUFBQSxPQUFPLEVBQUMsTUFBTTtDQUFDQyxJQUFBQSxjQUFjLEVBQUMsUUFBQTtDQUFRLEdBQUEsZUFDekNMLHNCQUFBLENBQUFDLGFBQUEsQ0FBQzZiLGlCQUFJLEVBQUE7Q0FBQ0MsSUFBQUEsT0FBTyxFQUFDLElBQUE7SUFBSyxFQUFBLHVCQUEyQixDQUMzQyxDQUFDLGVBQ04vYixzQkFBQSxDQUFBQyxhQUFBLENBQUNaLGdCQUFHLEVBQUE7Q0FBQ2UsSUFBQUEsT0FBTyxFQUFDLE1BQU07Q0FBQ0MsSUFBQUEsY0FBYyxFQUFDLFFBQUE7SUFDaEMyYixFQUFBQSxTQUFTLENBQUM5WSxHQUFHLENBQUMrWSxVQUFVLGlCQUFLamMsc0JBQUEsQ0FBQUMsYUFBQSxDQUFDWixnQkFBRyxFQUFBO0NBQUNzRyxJQUFBQSxHQUFHLEVBQUVzVyxVQUFXO0NBQUNyQixJQUFBQSxDQUFDLEVBQUUsQ0FBQTtDQUFFLEdBQUEsZUFDckQ1YSxzQkFBQSxDQUFBQyxhQUFBLENBQUMxQyxtQkFBTSxFQUFBO0NBQUM2YSxJQUFBQSxPQUFPLEVBQUVBLE1BQU11RCxVQUFVLENBQUNNLFVBQVUsQ0FBRTtDQUFDcEIsSUFBQUEsUUFBUSxFQUFFdEIsVUFBQUE7SUFDdEQwQyxFQUFBQSxVQUFVLENBQUNDLFdBQVcsRUFDakIsQ0FDTCxDQUFFLENBQ04sQ0FDRixDQUFDLENBQUE7Q0FDVixDQUFDOztDQy9DRCxNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSztDQUNqRCxJQUFJLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxHQUFHQyxzQkFBYyxFQUFFLENBQUM7Q0FDbkQsSUFBSSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDO0NBQzlCLElBQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztDQUNoQyxJQUFJLE1BQU0sSUFBSSxHQUFHQyxZQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztDQUMzRCxJQUFJLE1BQU0sR0FBRyxHQUFHQSxZQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7Q0FDckQsSUFBSSxNQUFNLElBQUksR0FBR0EsWUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ3ZELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsR0FBRzNhLGNBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN4RCxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUUsZ0JBQWdCLENBQUMsR0FBR0EsY0FBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0NBQzNELElBQUlrQyxlQUFTLENBQUMsTUFBTTtDQUNwQjtDQUNBO0NBQ0E7Q0FDQSxRQUFRLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxLQUFLLFdBQVc7Q0FDM0QsZ0JBQWdCLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQztDQUN4RCxnQkFBZ0IsT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUU7Q0FDckcsWUFBWSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7Q0FDaEMsWUFBWSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUNqQyxTQUFTO0NBQ1QsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7Q0FDM0IsSUFBSSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssS0FBSztDQUNoQyxRQUFRLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQ2hDLFFBQVEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDN0MsS0FBSyxDQUFDO0NBQ04sSUFBSSxNQUFNLFlBQVksR0FBRyxNQUFNO0NBQy9CLFFBQVEsUUFBUSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDNUMsS0FBSyxDQUFDO0NBQ04sSUFBSSxNQUFNLGlCQUFpQixHQUFHLENBQUMsU0FBUyxLQUFLO0NBQzdDLFFBQVEsTUFBTSxLQUFLLEdBQUcsQ0FBQ3lZLFlBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUM3RixRQUFRLE1BQU0sYUFBYSxHQUFHQSxZQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxDQUFDO0NBQzFGLFFBQVEsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Q0FDckMsWUFBWSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0NBQzdGLFlBQVksSUFBSSxTQUFTLEdBQUdBLFlBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxHQUFHLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQzdHLFlBQVksU0FBUyxHQUFHQSxZQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Q0FDOUUsWUFBWSxRQUFRLENBQUM7Q0FDckIsZ0JBQWdCLEdBQUcsTUFBTTtDQUN6QixnQkFBZ0IsTUFBTSxFQUFFLFNBQVM7Q0FDakMsYUFBYSxDQUFDLENBQUM7Q0FDZixTQUFTO0NBQ1QsYUFBYTtDQUNiO0NBQ0EsWUFBWSxPQUFPLENBQUMsR0FBRyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7Q0FDdkYsU0FBUztDQUNULEtBQUssQ0FBQztDQUNOLElBQUksUUFBUXBjLHNCQUFLLENBQUMsYUFBYSxDQUFDNkQsc0JBQVMsRUFBRSxJQUFJO0NBQy9DLFFBQVE3RCxzQkFBSyxDQUFDLGFBQWEsQ0FBQ04sa0JBQUssRUFBRSxJQUFJLEVBQUUsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7Q0FDaEcsUUFBUU0sc0JBQUssQ0FBQyxhQUFhLENBQUN1YSxxQkFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUU7Q0FDakcsZ0JBQWdCLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztDQUMzQyxnQkFBZ0IsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO0NBQ3ZDLGFBQWEsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUM7Q0FDdEMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLElBQUksSUFBSSxLQUFLLElBQUksS0FBS3ZhLHNCQUFLLENBQUMsYUFBYSxDQUFDeWEseUJBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztDQUM5SyxRQUFRLE1BQU0sQ0FBQyxRQUFRLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJemEsc0JBQUssQ0FBQyxhQUFhLENBQUNBLHNCQUFLLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEtBQUssS0FBSztDQUNoSTtDQUNBO0NBQ0E7Q0FDQTtDQUNBLFlBQVksTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzVDLFlBQVksT0FBTyxXQUFXLElBQUlBLHNCQUFLLENBQUMsYUFBYSxDQUFDeWEseUJBQVksRUFBRSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Q0FDbkwsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtDQUNwQixDQUFDOztDQzlETSxNQUFNLGNBQWMsR0FBRztDQUM5QixJQUFJLFdBQVc7Q0FDZixJQUFJLFlBQVk7Q0FDaEIsSUFBSSxjQUFjO0NBQ2xCLElBQUksWUFBWTtDQUNoQixJQUFJLFdBQVc7Q0FDZixJQUFJLGlCQUFpQjtDQUNyQixJQUFJLFlBQVk7Q0FDaEIsSUFBSSxXQUFXO0NBQ2YsSUFBSSxZQUFZO0NBQ2hCLElBQUksYUFBYTtDQUNqQixDQUFDLENBQUM7Q0FVSyxNQUFNLGNBQWMsR0FBRztDQUM5QixJQUFJLFdBQVc7Q0FDZixJQUFJLFdBQVc7Q0FDZixJQUFJLFlBQVk7Q0FDaEIsSUFBSSxXQUFXO0NBQ2YsSUFBSSxlQUFlO0NBQ25CLElBQUksMEJBQTBCO0NBQzlCLElBQUksWUFBWTtDQUNoQixJQUFJLFlBQVk7Q0FDaEIsQ0FBQzs7Q0M5QkQ7Q0FLQSxNQUFNLFVBQVUsR0FBRyxDQUFDLEtBQUssS0FBSztDQUM5QixJQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7Q0FDbEQsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO0NBQzdCLFFBQVEsSUFBSSxRQUFRLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTtDQUMzRCxZQUFZLFFBQVF6YSxzQkFBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO0NBQ3hILFNBQVM7Q0FDVCxRQUFRLElBQUksUUFBUSxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7Q0FDM0QsWUFBWSxRQUFRQSxzQkFBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7Q0FDOUUsZ0JBQWdCLG1DQUFtQztDQUNuRCxnQkFBZ0JBLHNCQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDO0NBQzFELGdCQUFnQkEsc0JBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRTtDQUNyRSxTQUFTO0NBQ1QsS0FBSztDQUNMLElBQUksUUFBUUEsc0JBQUssQ0FBQyxhQUFhLENBQUNYLGdCQUFHLEVBQUUsSUFBSTtDQUN6QyxRQUFRVyxzQkFBSyxDQUFDLGFBQWEsQ0FBQ3pDLG1CQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtDQUN2SCxZQUFZeUMsc0JBQUssQ0FBQyxhQUFhLENBQUNxYyxpQkFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDO0NBQ2xHLFlBQVksSUFBSSxDQUFDLENBQUMsRUFBRTtDQUNwQixDQUFDLENBQUM7Q0FDRixNQUFNLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSztDQUM5QyxJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUM7Q0FDaEMsSUFBSSxJQUFJLElBQUksR0FBR0QsWUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ2pFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtDQUNmLFFBQVEsT0FBTyxJQUFJLENBQUM7Q0FDcEIsS0FBSztDQUNMLElBQUksTUFBTSxJQUFJLEdBQUdBLFlBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztDQUNsSCxJQUFJLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0I7Q0FDNUMsV0FBV0EsWUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQzdELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO0NBQ25DLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0NBQ2hELFlBQVksSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztDQUNwRCxTQUFTO0NBQ1QsUUFBUSxRQUFRcGMsc0JBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUU7Q0FDL0csS0FBSztDQUNMLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO0NBQzVDLFFBQVEsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0NBQ2xELFFBQVEsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1RSxLQUFLO0NBQ0wsSUFBSSxRQUFRQSxzQkFBSyxDQUFDLGFBQWEsQ0FBQ0Esc0JBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsS0FBSyxNQUFNQSxzQkFBSyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0NBQzlOLENBQUM7O0NDekNELE1BQU0sSUFBSSxHQUFHLENBQUMsS0FBSyxNQUFNQSxzQkFBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQzs7Q0NFN0UsTUFBTSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUs7Q0FDeEIsSUFBSSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsS0FBSyxDQUFDO0NBQy9CLElBQUksTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUdtYyxzQkFBYyxFQUFFLENBQUM7Q0FDbkQsSUFBSSxRQUFRbmMsc0JBQUssQ0FBQyxhQUFhLENBQUM2RCxzQkFBUyxFQUFFLElBQUk7Q0FDL0MsUUFBUTdELHNCQUFLLENBQUMsYUFBYSxDQUFDTixrQkFBSyxFQUFFLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztDQUNoRyxRQUFRTSxzQkFBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFO0NBQ2pFLENBQUM7O0NDVkRzYyxPQUFPLENBQUNDLGNBQWMsR0FBRyxFQUFFLENBQUE7Q0FFM0JELE9BQU8sQ0FBQ0MsY0FBYyxDQUFDM2MsYUFBYSxHQUFHQSxhQUFhLENBQUE7Q0FFcEQwYyxPQUFPLENBQUNDLGNBQWMsQ0FBQ3JjLGFBQWEsR0FBR0EsYUFBYSxDQUFBO0NBRXBEb2MsT0FBTyxDQUFDQyxjQUFjLENBQUNwYixZQUFZLEdBQUdBLFlBQVksQ0FBQTtDQUVsRG1iLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDN1gsY0FBYyxHQUFHQSxjQUFjLENBQUE7Q0FFdEQ0WCxPQUFPLENBQUNDLGNBQWMsQ0FBQ3RXLHFCQUFxQixHQUFHQSxxQkFBcUIsQ0FBQTtDQUVwRXFXLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDclUsWUFBWSxHQUFHQSxZQUFZLENBQUE7Q0FFbERvVSxPQUFPLENBQUNDLGNBQWMsQ0FBQ3ZULGtCQUFrQixHQUFHQSxrQkFBa0IsQ0FBQTtDQUU5RHNULE9BQU8sQ0FBQ0MsY0FBYyxDQUFDOVgsWUFBWSxHQUFHQSxZQUFZLENBQUE7Q0FFbEQ2WCxPQUFPLENBQUNDLGNBQWMsQ0FBQzlOLCtCQUErQixHQUFHQSwrQkFBK0IsQ0FBQTtDQUV4RjZOLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDdlMsa0JBQWtCLEdBQUdBLGtCQUFrQixDQUFBO0NBRTlEc1MsT0FBTyxDQUFDQyxjQUFjLENBQUNyTSw0QkFBNEIsR0FBR0EsNEJBQTRCLENBQUE7Q0FFbEZvTSxPQUFPLENBQUNDLGNBQWMsQ0FBQ2hQLGlCQUFpQixHQUFHQSxpQkFBaUIsQ0FBQTtDQUU1RCtPLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDOVEsa0JBQWtCLEdBQUdBLGtCQUFrQixDQUFBO0NBRTlENlEsT0FBTyxDQUFDQyxjQUFjLENBQUN6USxpQkFBaUIsR0FBR0EsaUJBQWlCLENBQUE7Q0FFNUR3USxPQUFPLENBQUNDLGNBQWMsQ0FBQ2hRLG1CQUFtQixHQUFHQSxtQkFBbUIsQ0FBQTtDQUVoRStQLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDNVAsaUJBQWlCLEdBQUdBLGlCQUFpQixDQUFBO0NBRTVEMlAsT0FBTyxDQUFDQyxjQUFjLENBQUN4UCxtQkFBbUIsR0FBR0EsbUJBQW1CLENBQUE7Q0FFaEV1UCxPQUFPLENBQUNDLGNBQWMsQ0FBQ2pNLHlCQUF5QixHQUFHQSx5QkFBeUIsQ0FBQTtDQUU1RWdNLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDM0wsd0JBQXdCLEdBQUdBLHdCQUF3QixDQUFBO0NBRTFFMEwsT0FBTyxDQUFDQyxjQUFjLENBQUNuTCxhQUFhLEdBQUdBLGFBQWEsQ0FBQTtDQUVwRGtMLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDNUosVUFBVSxHQUFHQSxVQUFVLENBQUE7Q0FFOUMySixPQUFPLENBQUNDLGNBQWMsQ0FBQzNJLHNCQUFzQixHQUFHQSxzQkFBc0IsQ0FBQTtDQUV0RTBJLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDdEgseUJBQXlCLEdBQUdBLHlCQUF5QixDQUFBO0NBRTVFcUgsT0FBTyxDQUFDQyxjQUFjLENBQUNDLFVBQVUsR0FBR0EsWUFBVSxDQUFBO0NBRTlDRixPQUFPLENBQUNDLGNBQWMsQ0FBQ3pGLGFBQWEsR0FBR0EsYUFBYSxDQUFBO0NBRXBEd0YsT0FBTyxDQUFDQyxjQUFjLENBQUNoTSxXQUFXLEdBQUdBLFdBQVcsQ0FBQTtDQUVoRCtMLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDN0QsYUFBYSxHQUFHQSxhQUFhLENBQUE7Q0FFcEQ0RCxPQUFPLENBQUNDLGNBQWMsQ0FBQzVELFFBQVEsR0FBR0EsUUFBUSxDQUFBO0NBRTFDMkQsT0FBTyxDQUFDQyxjQUFjLENBQUNyRCxVQUFVLEdBQUdBLFVBQVUsQ0FBQTtDQUU5Q29ELE9BQU8sQ0FBQ0MsY0FBYyxDQUFDcEQsZUFBZSxHQUFHQSxlQUFlLENBQUE7Q0FFeERtRCxPQUFPLENBQUNDLGNBQWMsQ0FBQ2IsZUFBZSxHQUFHQSxlQUFlLENBQUE7Q0FFeERZLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDRSxtQkFBbUIsR0FBR0EsSUFBbUIsQ0FBQTtDQUVoRUgsT0FBTyxDQUFDQyxjQUFjLENBQUNHLG1CQUFtQixHQUFHQSxJQUFtQixDQUFBO0NBRWhFSixPQUFPLENBQUNDLGNBQWMsQ0FBQ0ksbUJBQW1CLEdBQUdBLElBQW1COzs7Ozs7IiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTAsOTEsOTIsOTMsOTQsOTUsOTYsOTcsOTgsOTksMTAwLDEwMSwxMDIsMTAzLDEwNSwxMDYsMTA3LDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDEyNywxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDMsMTQ0LDE0NSwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNTVdfQ==
