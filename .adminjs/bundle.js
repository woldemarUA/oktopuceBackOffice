(function (React, designSystem, adminjs) {
	'use strict';

	function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

	var React__default = /*#__PURE__*/_interopDefault(React);

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var styledComponents_browser_cjs = {};

	var reactIs$2 = {exports: {}};

	var reactIs_development$1 = {};

	/**
	 * @license React
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  (function() {

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	          case REACT_SUSPENSE_LIST_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_SERVER_CONTEXT_TYPE:
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false;
	var hasWarnedAboutDeprecatedIsConcurrentMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isConcurrentMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
	      hasWarnedAboutDeprecatedIsConcurrentMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isConcurrentMode() alias has been deprecated, ' + 'and will be removed in React 18+.');
	    }
	  }

	  return false;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}
	function isSuspenseList(object) {
	  return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
	}

	reactIs_development$1.ContextConsumer = ContextConsumer;
	reactIs_development$1.ContextProvider = ContextProvider;
	reactIs_development$1.Element = Element;
	reactIs_development$1.ForwardRef = ForwardRef;
	reactIs_development$1.Fragment = Fragment;
	reactIs_development$1.Lazy = Lazy;
	reactIs_development$1.Memo = Memo;
	reactIs_development$1.Portal = Portal;
	reactIs_development$1.Profiler = Profiler;
	reactIs_development$1.StrictMode = StrictMode;
	reactIs_development$1.Suspense = Suspense;
	reactIs_development$1.SuspenseList = SuspenseList;
	reactIs_development$1.isAsyncMode = isAsyncMode;
	reactIs_development$1.isConcurrentMode = isConcurrentMode;
	reactIs_development$1.isContextConsumer = isContextConsumer;
	reactIs_development$1.isContextProvider = isContextProvider;
	reactIs_development$1.isElement = isElement;
	reactIs_development$1.isForwardRef = isForwardRef;
	reactIs_development$1.isFragment = isFragment;
	reactIs_development$1.isLazy = isLazy;
	reactIs_development$1.isMemo = isMemo;
	reactIs_development$1.isPortal = isPortal;
	reactIs_development$1.isProfiler = isProfiler;
	reactIs_development$1.isStrictMode = isStrictMode;
	reactIs_development$1.isSuspense = isSuspense;
	reactIs_development$1.isSuspenseList = isSuspenseList;
	reactIs_development$1.isValidElementType = isValidElementType;
	reactIs_development$1.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$2.exports = reactIs_development$1;
	}

	var reactIsExports$1 = reactIs$2.exports;

	//

	var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};

	var stylis_browser_cjs = {};

	Object.defineProperty(stylis_browser_cjs, '__esModule', { value: true });

	function stylis_min (W) {
	  function M(d, c, e, h, a) {
	    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
	      g = e.charCodeAt(l);
	      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

	      if (0 === b + n + v + m) {
	        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
	          switch (g) {
	            case 32:
	            case 9:
	            case 59:
	            case 13:
	            case 10:
	              break;

	            default:
	              f += e.charAt(l);
	          }

	          g = 59;
	        }

	        switch (g) {
	          case 123:
	            f = f.trim();
	            q = f.charCodeAt(0);
	            k = 1;

	            for (t = ++l; l < B;) {
	              switch (g = e.charCodeAt(l)) {
	                case 123:
	                  k++;
	                  break;

	                case 125:
	                  k--;
	                  break;

	                case 47:
	                  switch (g = e.charCodeAt(l + 1)) {
	                    case 42:
	                    case 47:
	                      a: {
	                        for (u = l + 1; u < J; ++u) {
	                          switch (e.charCodeAt(u)) {
	                            case 47:
	                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
	                                l = u + 1;
	                                break a;
	                              }

	                              break;

	                            case 10:
	                              if (47 === g) {
	                                l = u + 1;
	                                break a;
	                              }

	                          }
	                        }

	                        l = u;
	                      }

	                  }

	                  break;

	                case 91:
	                  g++;

	                case 40:
	                  g++;

	                case 34:
	                case 39:
	                  for (; l++ < J && e.charCodeAt(l) !== g;) {
	                  }

	              }

	              if (0 === k) break;
	              l++;
	            }

	            k = e.substring(t, l);
	            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

	            switch (q) {
	              case 64:
	                0 < r && (f = f.replace(N, ''));
	                g = f.charCodeAt(1);

	                switch (g) {
	                  case 100:
	                  case 109:
	                  case 115:
	                  case 45:
	                    r = c;
	                    break;

	                  default:
	                    r = O;
	                }

	                k = M(c, r, k, g, a + 1);
	                t = k.length;
	                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
	                if (0 < t) switch (g) {
	                  case 115:
	                    f = f.replace(da, ea);

	                  case 100:
	                  case 109:
	                  case 45:
	                    k = f + '{' + k + '}';
	                    break;

	                  case 107:
	                    f = f.replace(fa, '$1 $2');
	                    k = f + '{' + k + '}';
	                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
	                    break;

	                  default:
	                    k = f + k, 112 === h && (k = (p += k, ''));
	                } else k = '';
	                break;

	              default:
	                k = M(c, X(c, f, I), k, h, a + 1);
	            }

	            F += k;
	            k = I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	            break;

	          case 125:
	          case 59:
	            f = (0 < r ? f.replace(N, '') : f).trim();
	            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
	              case 0:
	                break;

	              case 64:
	                if (105 === g || 99 === g) {
	                  G += f + e.charAt(l);
	                  break;
	                }

	              default:
	                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
	            }
	            I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	        }
	      }

	      switch (g) {
	        case 13:
	        case 10:
	          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
	          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
	          z = 1;
	          D++;
	          break;

	        case 59:
	        case 125:
	          if (0 === b + n + v + m) {
	            z++;
	            break;
	          }

	        default:
	          z++;
	          y = e.charAt(l);

	          switch (g) {
	            case 9:
	            case 32:
	              if (0 === n + m + b) switch (x) {
	                case 44:
	                case 58:
	                case 9:
	                case 32:
	                  y = '';
	                  break;

	                default:
	                  32 !== g && (y = ' ');
	              }
	              break;

	            case 0:
	              y = '\\0';
	              break;

	            case 12:
	              y = '\\f';
	              break;

	            case 11:
	              y = '\\v';
	              break;

	            case 38:
	              0 === n + b + m && (r = I = 1, y = '\f' + y);
	              break;

	            case 108:
	              if (0 === n + b + m + E && 0 < u) switch (l - u) {
	                case 2:
	                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

	                case 8:
	                  111 === K && (E = K);
	              }
	              break;

	            case 58:
	              0 === n + b + m && (u = l);
	              break;

	            case 44:
	              0 === b + v + n + m && (r = 1, y += '\r');
	              break;

	            case 34:
	            case 39:
	              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
	              break;

	            case 91:
	              0 === n + b + v && m++;
	              break;

	            case 93:
	              0 === n + b + v && m--;
	              break;

	            case 41:
	              0 === n + b + m && v--;
	              break;

	            case 40:
	              if (0 === n + b + m) {
	                if (0 === q) switch (2 * x + 3 * K) {
	                  case 533:
	                    break;

	                  default:
	                    q = 1;
	                }
	                v++;
	              }

	              break;

	            case 64:
	              0 === b + v + n + m + u + k && (k = 1);
	              break;

	            case 42:
	            case 47:
	              if (!(0 < n + m + v)) switch (b) {
	                case 0:
	                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
	                    case 235:
	                      b = 47;
	                      break;

	                    case 220:
	                      t = l, b = 42;
	                  }

	                  break;

	                case 42:
	                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
	              }
	          }

	          0 === b && (f += y);
	      }

	      K = x;
	      x = g;
	      l++;
	    }

	    t = p.length;

	    if (0 < t) {
	      r = c;
	      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
	      p = r.join(',') + '{' + p + '}';

	      if (0 !== w * E) {
	        2 !== w || L(p, 2) || (E = 0);

	        switch (E) {
	          case 111:
	            p = p.replace(ha, ':-moz-$1') + p;
	            break;

	          case 112:
	            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
	        }

	        E = 0;
	      }
	    }

	    return G + p + F;
	  }

	  function X(d, c, e) {
	    var h = c.trim().split(ia);
	    c = h;
	    var a = h.length,
	        m = d.length;

	    switch (m) {
	      case 0:
	      case 1:
	        var b = 0;

	        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
	          c[b] = Z(d, c[b], e).trim();
	        }

	        break;

	      default:
	        var v = b = 0;

	        for (c = []; b < a; ++b) {
	          for (var n = 0; n < m; ++n) {
	            c[v++] = Z(d[n] + ' ', h[b], e).trim();
	          }
	        }

	    }

	    return c;
	  }

	  function Z(d, c, e) {
	    var h = c.charCodeAt(0);
	    33 > h && (h = (c = c.trim()).charCodeAt(0));

	    switch (h) {
	      case 38:
	        return c.replace(F, '$1' + d.trim());

	      case 58:
	        return d.trim() + c.replace(F, '$1' + d.trim());

	      default:
	        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
	    }

	    return d + c;
	  }

	  function P(d, c, e, h) {
	    var a = d + ';',
	        m = 2 * c + 3 * e + 4 * h;

	    if (944 === m) {
	      d = a.indexOf(':', 9) + 1;
	      var b = a.substring(d, a.length - 1).trim();
	      b = a.substring(0, d).trim() + b + ';';
	      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
	    }

	    if (0 === w || 2 === w && !L(a, 1)) return a;

	    switch (m) {
	      case 1015:
	        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

	      case 951:
	        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

	      case 963:
	        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

	      case 1009:
	        if (100 !== a.charCodeAt(4)) break;

	      case 969:
	      case 942:
	        return '-webkit-' + a + a;

	      case 978:
	        return '-webkit-' + a + '-moz-' + a + a;

	      case 1019:
	      case 983:
	        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

	      case 883:
	        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
	        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
	        break;

	      case 932:
	        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
	          case 103:
	            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

	          case 115:
	            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

	          case 98:
	            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
	        }
	        return '-webkit-' + a + '-ms-' + a + a;

	      case 964:
	        return '-webkit-' + a + '-ms-flex-' + a + a;

	      case 1023:
	        if (99 !== a.charCodeAt(8)) break;
	        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
	        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

	      case 1005:
	        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

	      case 1e3:
	        b = a.substring(13).trim();
	        c = b.indexOf('-') + 1;

	        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
	          case 226:
	            b = a.replace(G, 'tb');
	            break;

	          case 232:
	            b = a.replace(G, 'tb-rl');
	            break;

	          case 220:
	            b = a.replace(G, 'lr');
	            break;

	          default:
	            return a;
	        }

	        return '-webkit-' + a + '-ms-' + b + a;

	      case 1017:
	        if (-1 === a.indexOf('sticky', 9)) break;

	      case 975:
	        c = (a = d).length - 10;
	        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

	        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
	          case 203:
	            if (111 > b.charCodeAt(8)) break;

	          case 115:
	            a = a.replace(b, '-webkit-' + b) + ';' + a;
	            break;

	          case 207:
	          case 102:
	            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
	        }

	        return a + ';';

	      case 938:
	        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
	          case 105:
	            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

	          case 115:
	            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

	          default:
	            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
	        }
	        break;

	      case 973:
	      case 989:
	        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

	      case 931:
	      case 953:
	        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
	        break;

	      case 962:
	        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
	    }

	    return a;
	  }

	  function L(d, c) {
	    var e = d.indexOf(1 === c ? ':' : '{'),
	        h = d.substring(0, 3 !== c ? e : 10);
	    e = d.substring(e + 1, d.length - 1);
	    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
	  }

	  function ea(d, c) {
	    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
	    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
	  }

	  function H(d, c, e, h, a, m, b, v, n, q) {
	    for (var g = 0, x = c, w; g < A; ++g) {
	      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
	        case void 0:
	        case !1:
	        case !0:
	        case null:
	          break;

	        default:
	          x = w;
	      }
	    }

	    if (x !== c) return x;
	  }

	  function T(d) {
	    switch (d) {
	      case void 0:
	      case null:
	        A = S.length = 0;
	        break;

	      default:
	        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
	          T(d[c]);
	        } else Y = !!d | 0;
	    }

	    return T;
	  }

	  function U(d) {
	    d = d.prefix;
	    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
	    return U;
	  }

	  function B(d, c) {
	    var e = d;
	    33 > e.charCodeAt(0) && (e = e.trim());
	    V = e;
	    e = [V];

	    if (0 < A) {
	      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
	      void 0 !== h && 'string' === typeof h && (c = h);
	    }

	    var a = M(O, e, c, 0, 0);
	    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
	    V = '';
	    E = 0;
	    z = D = 1;
	    return a;
	  }

	  var ca = /^\0+/g,
	      N = /[\0\r\f]/g,
	      aa = /: */g,
	      ka = /zoo|gra/,
	      ma = /([,: ])(transform)/g,
	      ia = /,\r+?/g,
	      F = /([\t\r\n ])*\f?&/g,
	      fa = /@(k\w+)\s*(\S*)\s*/,
	      Q = /::(place)/g,
	      ha = /:(read-only)/g,
	      G = /[svh]\w+-[tblr]{2}/,
	      da = /\(\s*(.*)\s*\)/g,
	      oa = /([\s\S]*?);/g,
	      ba = /-self|flex-/g,
	      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
	      la = /stretch|:\s*\w+\-(?:conte|avail)/,
	      ja = /([^-])(image-set\()/,
	      z = 1,
	      D = 1,
	      E = 0,
	      w = 1,
	      O = [],
	      S = [],
	      A = 0,
	      R = null,
	      Y = 0,
	      V = '';
	  B.use = T;
	  B.set = U;
	  void 0 !== W && U(W);
	  return B;
	}

	stylis_browser_cjs.default = stylis_min;

	var unitless_browser_cjs = {};

	Object.defineProperty(unitless_browser_cjs, '__esModule', { value: true });

	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	unitless_browser_cjs.default = unitlessKeys;

	function memoize(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */
	  && prop.charCodeAt(1) === 110
	  /* n */
	  && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */
	);

	var emotionIsPropValid_esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: isPropValid
	});

	var require$$5 = /*@__PURE__*/getAugmentedNamespace(emotionIsPropValid_esm);

	var reactIs$1 = {exports: {}};

	var reactIs_development = {};

	/** @license React v16.13.1
	 * react-is.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	{
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}

	{
	  reactIs$1.exports = reactIs_development;
	}

	var reactIsExports = reactIs$1.exports;

	var reactIs = reactIsExports;

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols$1) {
	      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	var _default;
	function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(styledComponents_browser_cjs,"__esModule",{value:!0});var t=reactIsExports$1,n=React__default.default,r=e(n),o=e(shallowequal),s=e(stylis_browser_cjs),i=e(unitless_browser_cjs),a=e(require$$5),c=e(hoistNonReactStatics_cjs);function u(){return (u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e}).apply(this,arguments)}var l=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},d=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!t.typeOf(e)},h=Object.freeze([]),p=Object.freeze({});function f(e){return "function"==typeof e}function m(e){return "string"==typeof e&&e||e.displayName||e.name||"Component"}function y(e){return e&&"string"==typeof e.styledComponentId}var v="undefined"!=typeof process&&void 0!==process.env&&(AdminJS.env.REACT_APP_SC_ATTR||AdminJS.env.SC_ATTR)||"data-styled",g="undefined"!=typeof window&&"HTMLElement"in window,S=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env&&(void 0!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY&&AdminJS.env.REACT_APP_SC_DISABLE_SPEEDY:void 0!==AdminJS.env.SC_DISABLE_SPEEDY&&""!==AdminJS.env.SC_DISABLE_SPEEDY?"false"!==AdminJS.env.SC_DISABLE_SPEEDY&&AdminJS.env.SC_DISABLE_SPEEDY:"production"!=="development")),w={},E={1:"Cannot create styled-component for component: %s.\n\n",2:"Can't collect styles once you've consumed a `ServerStyleSheet`'s styles! `ServerStyleSheet` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n",3:"Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n",4:"The `StyleSheetManager` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n",5:"The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n",6:"Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n",7:'ThemeProvider: Please return an object from your "theme" prop function, e.g.\n\n```js\ntheme={() => ({})}\n```\n\n',8:'ThemeProvider: Please make your "theme" prop an object.\n\n',9:"Missing document `<head>`\n\n",10:"Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n",11:"_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n",12:"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\`\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\n\n",13:"%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n",14:'ThemeProvider: "theme" prop is required.\n\n',15:"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\n\n```js\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\n```\n\n",16:"Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n",17:"CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n"};function b(){for(var e=arguments.length<=0?void 0:arguments[0],t=[],n=1,r=arguments.length;n<r;n+=1)t.push(n<0||arguments.length<=n?void 0:arguments[n]);return t.forEach((function(t){e=e.replace(/%[a-z]/,t);})),e}function _(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error(b.apply(void 0,[E[e]].concat(n)).trim())}var N=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e;}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&_(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0;}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++);},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n);}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),C=new Map,A=new Map,I=1,P=function(e){if(C.has(e))return C.get(e);for(;A.has(I);)I++;var t=I++;return ((0|t)<0||t>1<<30)&&_(16,""+t),C.set(e,t),A.set(t,e),t},O=function(e){return A.get(e)},x=function(e,t){t>=I&&(I=t+1),C.set(e,t),A.set(t,e);},R="style["+v+'][data-styled-version="5.3.9"]',D=new RegExp("^"+v+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),T=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r);},j=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(D);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(x(u,c),T(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0;}else r.push(i);}}},k=function(){return "undefined"!=typeof __webpack_nonce__?__webpack_nonce__:null},V=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(v))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(v,"active"),r.setAttribute("data-styled-version","5.3.9");var i=k();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},M=function(){function e(e){var t=this.element=V(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}_(17);}(t),this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return !1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--;},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),B=function(){function e(e){var t=this.element=V(e);this.nodes=t.childNodes,this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return !1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--;},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),z=function(){function e(e){this.rules=[],this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--;},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),q=g,G={isServer:!g,useCSSOMInjection:!S},L=function(){function e(e,t,n){void 0===e&&(e=p),void 0===t&&(t={}),this.options=u({},G,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&g&&q&&(q=!1,function(e){for(var t=document.querySelectorAll(R),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(v)&&(j(e,o),o.parentNode&&o.parentNode.removeChild(o));}}(this));}e.registerId=function(e){return P(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(u({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new z(o):r?new M(o):new B(o),new N(e)));var e,t,n,r,o;},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(P(e),this.names.has(e))this.names.get(e).add(t);else {var n=new Set;n.add(t),this.names.set(e,n);}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(P(e),n);},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear();},t.clearRules=function(e){this.getTag().clearGroup(P(e)),this.clearNames(e);},t.clearTag=function(){this.tag=void 0;},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=O(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=v+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",");})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n';}}}return r}(this)},e}(),F=/(a)(d)/gi,Y=function(e){return String.fromCharCode(e+(e>25?39:97))};function H(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Y(t%52)+n;return (Y(t%52)+n).replace(F,"$1-$2")}var $=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},W=function(e){return $(5381,e)};function U(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(f(n)&&!y(n))return !1}return !0}var J=W("5.3.9"),X=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic="production"==="development",this.componentId=t,this.baseHash=$(J,t),this.baseStyle=n,L.registerId(t);}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else {var s=me(this.rules,e,t,n).join(""),i=H($(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a);}o.push(i),this.staticRulesId=i;}else {for(var c=this.rules.length,u=$(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h,(u=$(u,h+d));else if(h){var p=me(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=$(u,f+d),l+=f;}}if(l){var m=H(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y);}o.push(m);}}return o.join(" ")},e}(),Z=/^\s*\/\/.*$/gm,K=[":","[",".","#"];function Q(e){var t,n,r,o,i=void 0===e?p:e,a=i.options,c=void 0===a?p:a,u=i.plugins,l=void 0===u?h:u,d=new s(c),f=[],m=function(e){function t(t){if(t)try{e(t+"}");}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t);}}}((function(e){f.push(e);})),y=function(e,r,s){return 0===r&&-1!==K.indexOf(s[n.length])||s.match(o)?e:"."+t};function v(e,s,i,a){void 0===a&&(a="&");var c=e.replace(Z,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),d(i||!s?"":s,u)}return d.use([].concat(l,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,y));},m,function(e){if(-2===e){var t=f;return f=[],t}}])),v.hash=l.length?l.reduce((function(e,t){return t.name||_(15),$(e,t.name)}),5381).toString():"",v}var ee=r.createContext(),te=ee.Consumer,ne=r.createContext(),re=(ne.Consumer,new L),oe=Q();function se(){return n.useContext(ee)||re}function ie(){return n.useContext(ne)||oe}function ae(e){var t=n.useState(e.stylisPlugins),s=t[0],i=t[1],a=se(),c=n.useMemo((function(){var t=a;return e.sheet?t=e.sheet:e.target&&(t=t.reconstructWithOptions({target:e.target},!1)),e.disableCSSOMInjection&&(t=t.reconstructWithOptions({useCSSOMInjection:!1})),t}),[e.disableCSSOMInjection,e.sheet,e.target]),u=n.useMemo((function(){return Q({options:{prefix:!e.disableVendorPrefixes},plugins:s})}),[e.disableVendorPrefixes,s]);return n.useEffect((function(){o(s,e.stylisPlugins)||i(e.stylisPlugins);}),[e.stylisPlugins]),r.createElement(ee.Provider,{value:c},r.createElement(ne.Provider,{value:u},r.Children.only(e.children)))}var ce=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=oe);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"));},this.toString=function(){return _(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t;}return e.prototype.getName=function(e){return void 0===e&&(e=oe),this.name+e.hash},e}(),ue=/([A-Z])/,le=/([A-Z])/g,de=/^ms-/,he=function(e){return "-"+e.toLowerCase()};function pe(e){return ue.test(e)?e.replace(le,he).replace(de,"-ms-"):e}var fe=function(e){return null==e||!1===e||""===e};function me(e,n,r,o){if(Array.isArray(e)){for(var s,a=[],c=0,u=e.length;c<u;c+=1)""!==(s=me(e[c],n,r,o))&&(Array.isArray(s)?a.push.apply(a,s):a.push(s));return a}if(fe(e))return "";if(y(e))return "."+e.styledComponentId;if(f(e)){if("function"!=typeof(h=e)||h.prototype&&h.prototype.isReactComponent||!n)return e;var l=e(n);return t.isElement(l)&&console.warn(m(e)+" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details."),me(l,n,r,o)}var h;return e instanceof ce?r?(e.inject(r,o),e.getName(o)):e:d(e)?function e(t,n){var r,o,s=[];for(var a in t)t.hasOwnProperty(a)&&!fe(t[a])&&(Array.isArray(t[a])&&t[a].isCss||f(t[a])?s.push(pe(a)+":",t[a],";"):d(t[a])?s.push.apply(s,e(t[a],a)):s.push(pe(a)+": "+(r=a,null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in i?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var ye=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ve(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return f(e)||d(e)?ye(me(l(h,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:ye(me(l(e,n)))}var ge=/invalid hook call/i,Se=new Set,we=function(e,t){{var r="The component "+e+(t?' with the id of "'+t+'"':"")+" has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.",o=console.error;try{var s=!0;console.error=function(e){if(ge.test(e))s=!1,Se.delete(r);else {for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];o.apply(void 0,[e].concat(n));}},n.useRef(),s&&!Se.has(r)&&(console.warn(r),Se.add(r));}catch(e){ge.test(e.message)&&Se.delete(r);}finally{console.error=o;}}},Ee=function(e,t,n){return void 0===n&&(n=p),e.theme!==n.theme&&e.theme||t||n.theme},be=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,_e=/(^-|-$)/g;function Ne(e){return e.replace(be,"-").replace(_e,"")}var Ce=function(e){return H(W(e)>>>0)};function Ae(e){return "string"==typeof e&&(e.charAt(0)===e.charAt(0).toLowerCase())}var Ie=function(e){return "function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Pe=function(e){return "__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function Oe(e,t,n){var r=e[n];Ie(t)&&Ie(r)?xe(r,t):e[n]=t;}function xe(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ie(i))for(var a in i)Pe(a)&&Oe(e,i[a],a);}return e}var Re=r.createContext(),De=Re.Consumer,Te={};function je(e,t,o){var s=y(e),i=!Ae(e),l=t.attrs,d=void 0===l?h:l,v=t.componentId,g=void 0===v?function(e,t){var n="string"!=typeof e?"sc":Ne(e);Te[n]=(Te[n]||0)+1;var r=n+"-"+Ce("5.3.9"+n+Te[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):v,S=t.displayName,w=void 0===S?function(e){return Ae(e)?"styled."+e:"Styled("+m(e)+")"}(e):S,E=t.displayName&&t.componentId?Ne(t.displayName)+"-"+t.componentId:t.componentId||g,b=s&&e.attrs?Array.prototype.concat(e.attrs,d).filter(Boolean):d,_=t.shouldForwardProp;s&&e.shouldForwardProp&&(_=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var N,C=new X(o,E,s?e.componentStyle:void 0),A=C.isStatic&&0===d.length,I=function(e,t){return function(e,t,r,o){var s=e.attrs,i=e.componentStyle,c=e.defaultProps,l=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,m=e.target;n.useDebugValue(h);var y=function(e,t,n){void 0===e&&(e=p);var r=u({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in f(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t];})),[r,o]}(Ee(t,n.useContext(Re),c)||p,t,s),v=y[0],g=y[1],S=function(e,t,r,o){var s=se(),i=ie(),a=t?e.generateAndInjectStyles(p,s,i):e.generateAndInjectStyles(r,s,i);return n.useDebugValue(a),!t&&o&&o(a),a}(i,o,v,e.warnTooManyClasses),w=r,E=g.$as||t.$as||g.as||t.as||m,b=Ae(E),_=g!==t?u({},t,{},g):t,N={};for(var C in _)"$"!==C[0]&&"as"!==C&&("forwardedAs"===C?N.as=_[C]:(d?d(C,a,E):!b||a(C))&&(N[C]=_[C]));return t.style&&g.style!==t.style&&(N.style=u({},t.style,{},g.style)),N.className=Array.prototype.concat(l,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),N.ref=w,n.createElement(E,N)}(N,e,t,A)};return I.displayName=w,(N=r.forwardRef(I)).attrs=b,N.componentStyle=C,N.displayName=w,N.shouldForwardProp=_,N.foldedComponentIds=s?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):h,N.styledComponentId=E,N.target=s?e.target:e,N.withComponent=function(e){var n=t.componentId,r=function(e,t){if(null==e)return {};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=n&&n+"-"+(Ae(e)?e:Ne(m(e)));return je(e,u({},r,{attrs:b,componentId:s}),o)},Object.defineProperty(N,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=s?xe({},e.defaultProps,t):t;}}),(we(w,E),N.warnTooManyClasses=function(e,t){var n={},r=!1;return function(o){if(!r&&(n[o]=!0,Object.keys(n).length>=200)){var s=t?' with the id of "'+t+'"':"";console.warn("Over 200 classes were generated for component "+e+s+".\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))`width: 100%;`\n\n  <Component />"),r=!0,n={};}}}(w,E)),Object.defineProperty(N,"toString",{value:function(){return "."+N.styledComponentId}}),i&&c(N,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),N}var ke=function(e){return function e(n,r,o){if(void 0===o&&(o=p),!t.isValidElementType(r))return _(1,String(r));var s=function(){return n(r,o,ve.apply(void 0,arguments))};return s.withConfig=function(t){return e(n,r,u({},o,{},t))},s.attrs=function(t){return e(n,r,u({},o,{attrs:Array.prototype.concat(o.attrs,t).filter(Boolean)}))},s}(je,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){ke[e]=ke(e);}));var Ve=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=U(e),L.registerId(this.componentId+1);}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(me(this.rules,t,n,r).join(""),""),s=this.componentId+e;n.insertRules(s,s,o);},t.removeStyles=function(e,t){t.clearRules(this.componentId+e);},t.renderStyles=function(e,t,n,r){e>2&&L.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r);},e}(),Me=function(){function e(){var e=this;this._emitSheetCSS=function(){var t=e.instance.toString();if(!t)return "";var n=k();return "<style "+[n&&'nonce="'+n+'"',v+'="true"','data-styled-version="5.3.9"'].filter(Boolean).join(" ")+">"+t+"</style>"},this.getStyleTags=function(){return e.sealed?_(2):e._emitSheetCSS()},this.getStyleElement=function(){var t;if(e.sealed)return _(2);var n=((t={})[v]="",t["data-styled-version"]="5.3.9",t.dangerouslySetInnerHTML={__html:e.instance.toString()},t),o=k();return o&&(n.nonce=o),[r.createElement("style",u({},n,{key:"sc-0-0"}))]},this.seal=function(){e.sealed=!0;},this.instance=new L({isServer:!0}),this.sealed=!1;}var t=e.prototype;return t.collectStyles=function(e){return this.sealed?_(2):r.createElement(ae,{sheet:this.instance},e)},t.interleaveWithNodeStream=function(e){return _(3)},e}(),Be={StyleSheet:L,masterSheet:re};"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native"),"undefined"!=typeof window&&(window["__styled-components-init__"]=window["__styled-components-init__"]||0,1===window["__styled-components-init__"]&&console.warn("It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info."),window["__styled-components-init__"]+=1),styledComponents_browser_cjs.ServerStyleSheet=Me,styledComponents_browser_cjs.StyleSheetConsumer=te,styledComponents_browser_cjs.StyleSheetContext=ee,styledComponents_browser_cjs.StyleSheetManager=ae,styledComponents_browser_cjs.ThemeConsumer=De,styledComponents_browser_cjs.ThemeContext=Re,styledComponents_browser_cjs.ThemeProvider=function(e){var t=n.useContext(Re),o=n.useMemo((function(){return function(e,t){if(!e)return _(14);if(f(e)){var n=e(t);return null!==n&&!Array.isArray(n)&&"object"==typeof n?n:_(7)}return Array.isArray(e)||"object"!=typeof e?_(8):t?u({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?r.createElement(Re.Provider,{value:o},e.children):null},styledComponents_browser_cjs.__PRIVATE__=Be,styledComponents_browser_cjs.createGlobalStyle=function(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),s=1;s<t;s++)o[s-1]=arguments[s];var i=ve.apply(void 0,[e].concat(o)),a="sc-global-"+Ce(JSON.stringify(i)),c=new Ve(i,a);function l(e){var t=se(),o=ie(),s=n.useContext(Re),u=n.useRef(t.allocateGSInstance(a)).current;return r.Children.count(e.children)&&console.warn("The global style component "+a+" was given child JSX. createGlobalStyle does not render children."),i.some((function(e){return "string"==typeof e&&-1!==e.indexOf("@import")}))&&console.warn("Please do not use @import CSS syntax in createGlobalStyle at this time, as the CSSOM APIs we use in production do not handle it well. Instead, we recommend using a library such as react-helmet to inject a typical <link> meta tag to the stylesheet, or simply embedding it manually in your index.html <head> section for a simpler app."),t.server&&d(u,e,t,s,o),n.useLayoutEffect((function(){if(!t.server)return d(u,e,t,s,o),function(){return c.removeStyles(u,t)}}),[u,e,t,s,o]),null}function d(e,t,n,r,o){if(c.isStatic)c.renderStyles(e,w,n,o);else {var s=u({},t,{theme:Ee(t,r,l.defaultProps)});c.renderStyles(e,s,n,o);}}return we(a),r.memo(l)},styledComponents_browser_cjs.css=ve,_default = styledComponents_browser_cjs.default=ke,styledComponents_browser_cjs.isStyledComponent=y,styledComponents_browser_cjs.keyframes=function(e){"undefined"!=typeof navigator&&"ReactNative"===navigator.product&&console.warn("`keyframes` cannot be used on ReactNative, only on the web. To do animation in ReactNative please use Animated.");for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=ve.apply(void 0,[e].concat(n)).join(""),s=Ce(o);return new ce(s,o)},styledComponents_browser_cjs.useTheme=function(){return n.useContext(Re)},styledComponents_browser_cjs.version="5.3.9",styledComponents_browser_cjs.withTheme=function(e){var t=r.forwardRef((function(t,o){var s=n.useContext(Re),i=e.defaultProps,a=Ee(t,s,i);return void 0===a&&console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class "'+m(e)+'"'),r.createElement(e,u({},t,{theme:a,ref:o}))}));return c(t,e),t.displayName="WithTheme("+m(e)+")",t};

	var dist$c = {};

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	dist$c.__esModule = true;
	dist$c.compose = dist$c.system = dist$c.createStyleFunction = dist$c.createParser = dist$c.get = dist$c.merge = void 0;

	var _objectAssign = _interopRequireDefault(objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var merge = function merge(a, b) {
	  var result = (0, _objectAssign["default"])({}, a, b);

	  for (var key in a) {
	    var _assign;

	    if (!a[key] || typeof b[key] !== 'object') continue;
	    (0, _objectAssign["default"])(result, (_assign = {}, _assign[key] = (0, _objectAssign["default"])(a[key], b[key]), _assign));
	  }

	  return result;
	}; // sort object-value responsive styles


	dist$c.merge = merge;

	var sort = function sort(obj) {
	  var next = {};
	  Object.keys(obj).sort(function (a, b) {
	    return a.localeCompare(b, undefined, {
	      numeric: true,
	      sensitivity: 'base'
	    });
	  }).forEach(function (key) {
	    next[key] = obj[key];
	  });
	  return next;
	};

	var defaults = {
	  breakpoints: [40, 52, 64].map(function (n) {
	    return n + 'em';
	  })
	};

	var createMediaQuery = function createMediaQuery(n) {
	  return "@media screen and (min-width: " + n + ")";
	};

	var getValue = function getValue(n, scale) {
	  return get(scale, n, n);
	};

	var get = function get(obj, key, def, p, undef) {
	  key = key && key.split ? key.split('.') : [key];

	  for (p = 0; p < key.length; p++) {
	    obj = obj ? obj[key[p]] : undef;
	  }

	  return obj === undef ? def : obj;
	};

	dist$c.get = get;

	var createParser = function createParser(config) {
	  var cache = {};

	  var parse = function parse(props) {
	    var styles = {};
	    var shouldSort = false;
	    var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;

	    for (var key in props) {
	      if (!config[key]) continue;
	      var sx = config[key];
	      var raw = props[key];
	      var scale = get(props.theme, sx.scale, sx.defaults);

	      if (typeof raw === 'object') {
	        cache.breakpoints = !isCacheDisabled && cache.breakpoints || get(props.theme, 'breakpoints', defaults.breakpoints);

	        if (Array.isArray(raw)) {
	          cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
	          styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
	          continue;
	        }

	        if (raw !== null) {
	          styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
	          shouldSort = true;
	        }

	        continue;
	      }

	      (0, _objectAssign["default"])(styles, sx(raw, scale, props));
	    } // sort object-based responsive styles


	    if (shouldSort) {
	      styles = sort(styles);
	    }

	    return styles;
	  };

	  parse.config = config;
	  parse.propNames = Object.keys(config);
	  parse.cache = cache;
	  var keys = Object.keys(config).filter(function (k) {
	    return k !== 'config';
	  });

	  if (keys.length > 1) {
	    keys.forEach(function (key) {
	      var _createParser;

	      parse[key] = createParser((_createParser = {}, _createParser[key] = config[key], _createParser));
	    });
	  }

	  return parse;
	};

	dist$c.createParser = createParser;

	var parseResponsiveStyle = function parseResponsiveStyle(mediaQueries, sx, scale, raw, _props) {
	  var styles = {};
	  raw.slice(0, mediaQueries.length).forEach(function (value, i) {
	    var media = mediaQueries[i];
	    var style = sx(value, scale, _props);

	    if (!media) {
	      (0, _objectAssign["default"])(styles, style);
	    } else {
	      var _assign2;

	      (0, _objectAssign["default"])(styles, (_assign2 = {}, _assign2[media] = (0, _objectAssign["default"])({}, styles[media], style), _assign2));
	    }
	  });
	  return styles;
	};

	var parseResponsiveObject = function parseResponsiveObject(breakpoints, sx, scale, raw, _props) {
	  var styles = {};

	  for (var key in raw) {
	    var breakpoint = breakpoints[key];
	    var value = raw[key];
	    var style = sx(value, scale, _props);

	    if (!breakpoint) {
	      (0, _objectAssign["default"])(styles, style);
	    } else {
	      var _assign3;

	      var media = createMediaQuery(breakpoint);
	      (0, _objectAssign["default"])(styles, (_assign3 = {}, _assign3[media] = (0, _objectAssign["default"])({}, styles[media], style), _assign3));
	    }
	  }

	  return styles;
	};

	var createStyleFunction = function createStyleFunction(_ref) {
	  var properties = _ref.properties,
	      property = _ref.property,
	      scale = _ref.scale,
	      _ref$transform = _ref.transform,
	      transform = _ref$transform === void 0 ? getValue : _ref$transform,
	      defaultScale = _ref.defaultScale;
	  properties = properties || [property];

	  var sx = function sx(value, scale, _props) {
	    var result = {};
	    var n = transform(value, scale, _props);
	    if (n === null) return;
	    properties.forEach(function (prop) {
	      result[prop] = n;
	    });
	    return result;
	  };

	  sx.scale = scale;
	  sx.defaults = defaultScale;
	  return sx;
	}; // new v5 API


	dist$c.createStyleFunction = createStyleFunction;

	var system$1 = function system(args) {
	  if (args === void 0) {
	    args = {};
	  }

	  var config = {};
	  Object.keys(args).forEach(function (key) {
	    var conf = args[key];

	    if (conf === true) {
	      // shortcut definition
	      config[key] = createStyleFunction({
	        property: key,
	        scale: key
	      });
	      return;
	    }

	    if (typeof conf === 'function') {
	      config[key] = conf;
	      return;
	    }

	    config[key] = createStyleFunction(conf);
	  });
	  var parser = createParser(config);
	  return parser;
	};

	dist$c.system = system$1;

	var compose = function compose() {
	  var config = {};

	  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
	    parsers[_key] = arguments[_key];
	  }

	  parsers.forEach(function (parser) {
	    if (!parser || !parser.config) return;
	    (0, _objectAssign["default"])(config, parser.config);
	  });
	  var parser = createParser(config);
	  return parser;
	};

	dist$c.compose = compose;

	var dist$b = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.layout = void 0;

		var _core = dist$c;

		var isNumber = function isNumber(n) {
		  return typeof n === 'number' && !isNaN(n);
		};

		var getWidth = function getWidth(n, scale) {
		  return (0, _core.get)(scale, n, !isNumber(n) || n > 1 ? n : n * 100 + '%');
		};

		var config = {
		  width: {
		    property: 'width',
		    scale: 'sizes',
		    transform: getWidth
		  },
		  height: {
		    property: 'height',
		    scale: 'sizes'
		  },
		  minWidth: {
		    property: 'minWidth',
		    scale: 'sizes'
		  },
		  minHeight: {
		    property: 'minHeight',
		    scale: 'sizes'
		  },
		  maxWidth: {
		    property: 'maxWidth',
		    scale: 'sizes'
		  },
		  maxHeight: {
		    property: 'maxHeight',
		    scale: 'sizes'
		  },
		  size: {
		    properties: ['width', 'height'],
		    scale: 'sizes'
		  },
		  overflow: true,
		  overflowX: true,
		  overflowY: true,
		  display: true,
		  verticalAlign: true
		};
		var layout = (0, _core.system)(config);
		exports.layout = layout;
		var _default = layout;
		exports["default"] = _default; 
	} (dist$b));

	var dist$a = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.color = void 0;

		var _core = dist$c;

		var config = {
		  color: {
		    property: 'color',
		    scale: 'colors'
		  },
		  backgroundColor: {
		    property: 'backgroundColor',
		    scale: 'colors'
		  },
		  opacity: true
		};
		config.bg = config.backgroundColor;
		var color = (0, _core.system)(config);
		exports.color = color;
		var _default = color;
		exports["default"] = _default; 
	} (dist$a));

	var dist$9 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.typography = void 0;

		var _core = dist$c;

		var defaults = {
		  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
		};
		var config = {
		  fontFamily: {
		    property: 'fontFamily',
		    scale: 'fonts'
		  },
		  fontSize: {
		    property: 'fontSize',
		    scale: 'fontSizes',
		    defaultScale: defaults.fontSizes
		  },
		  fontWeight: {
		    property: 'fontWeight',
		    scale: 'fontWeights'
		  },
		  lineHeight: {
		    property: 'lineHeight',
		    scale: 'lineHeights'
		  },
		  letterSpacing: {
		    property: 'letterSpacing',
		    scale: 'letterSpacings'
		  },
		  textAlign: true,
		  fontStyle: true
		};
		var typography = (0, _core.system)(config);
		exports.typography = typography;
		var _default = typography;
		exports["default"] = _default; 
	} (dist$9));

	var dist$8 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.flexbox = void 0;

		var _core = dist$c;

		var config = {
		  alignItems: true,
		  alignContent: true,
		  justifyItems: true,
		  justifyContent: true,
		  flexWrap: true,
		  flexDirection: true,
		  // item
		  flex: true,
		  flexGrow: true,
		  flexShrink: true,
		  flexBasis: true,
		  justifySelf: true,
		  alignSelf: true,
		  order: true
		};
		var flexbox = (0, _core.system)(config);
		exports.flexbox = flexbox;
		var _default = flexbox;
		exports["default"] = _default; 
	} (dist$8));

	var dist$7 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.grid = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};
		var config = {
		  gridGap: {
		    property: 'gridGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridColumnGap: {
		    property: 'gridColumnGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridRowGap: {
		    property: 'gridRowGap',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  gridColumn: true,
		  gridRow: true,
		  gridAutoFlow: true,
		  gridAutoColumns: true,
		  gridAutoRows: true,
		  gridTemplateColumns: true,
		  gridTemplateRows: true,
		  gridTemplateAreas: true,
		  gridArea: true
		};
		var grid = (0, _core.system)(config);
		exports.grid = grid;
		var _default = grid;
		exports["default"] = _default; 
	} (dist$7));

	var dist$6 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.border = void 0;

		var _core = dist$c;

		var config = {
		  border: {
		    property: 'border',
		    scale: 'borders'
		  },
		  borderWidth: {
		    property: 'borderWidth',
		    scale: 'borderWidths'
		  },
		  borderStyle: {
		    property: 'borderStyle',
		    scale: 'borderStyles'
		  },
		  borderColor: {
		    property: 'borderColor',
		    scale: 'colors'
		  },
		  borderRadius: {
		    property: 'borderRadius',
		    scale: 'radii'
		  },
		  borderTop: {
		    property: 'borderTop',
		    scale: 'borders'
		  },
		  borderTopLeftRadius: {
		    property: 'borderTopLeftRadius',
		    scale: 'radii'
		  },
		  borderTopRightRadius: {
		    property: 'borderTopRightRadius',
		    scale: 'radii'
		  },
		  borderRight: {
		    property: 'borderRight',
		    scale: 'borders'
		  },
		  borderBottom: {
		    property: 'borderBottom',
		    scale: 'borders'
		  },
		  borderBottomLeftRadius: {
		    property: 'borderBottomLeftRadius',
		    scale: 'radii'
		  },
		  borderBottomRightRadius: {
		    property: 'borderBottomRightRadius',
		    scale: 'radii'
		  },
		  borderLeft: {
		    property: 'borderLeft',
		    scale: 'borders'
		  },
		  borderX: {
		    properties: ['borderLeft', 'borderRight'],
		    scale: 'borders'
		  },
		  borderY: {
		    properties: ['borderTop', 'borderBottom'],
		    scale: 'borders'
		  }
		};
		config.borderTopWidth = {
		  property: 'borderTopWidth',
		  scale: 'borderWidths'
		};
		config.borderTopColor = {
		  property: 'borderTopColor',
		  scale: 'colors'
		};
		config.borderTopStyle = {
		  property: 'borderTopStyle',
		  scale: 'borderStyles'
		};
		config.borderTopLeftRadius = {
		  property: 'borderTopLeftRadius',
		  scale: 'radii'
		};
		config.borderTopRightRadius = {
		  property: 'borderTopRightRadius',
		  scale: 'radii'
		};
		config.borderBottomWidth = {
		  property: 'borderBottomWidth',
		  scale: 'borderWidths'
		};
		config.borderBottomColor = {
		  property: 'borderBottomColor',
		  scale: 'colors'
		};
		config.borderBottomStyle = {
		  property: 'borderBottomStyle',
		  scale: 'borderStyles'
		};
		config.borderBottomLeftRadius = {
		  property: 'borderBottomLeftRadius',
		  scale: 'radii'
		};
		config.borderBottomRightRadius = {
		  property: 'borderBottomRightRadius',
		  scale: 'radii'
		};
		config.borderLeftWidth = {
		  property: 'borderLeftWidth',
		  scale: 'borderWidths'
		};
		config.borderLeftColor = {
		  property: 'borderLeftColor',
		  scale: 'colors'
		};
		config.borderLeftStyle = {
		  property: 'borderLeftStyle',
		  scale: 'borderStyles'
		};
		config.borderRightWidth = {
		  property: 'borderRightWidth',
		  scale: 'borderWidths'
		};
		config.borderRightColor = {
		  property: 'borderRightColor',
		  scale: 'colors'
		};
		config.borderRightStyle = {
		  property: 'borderRightStyle',
		  scale: 'borderStyles'
		};
		var border = (0, _core.system)(config);
		exports.border = border;
		var _default = border;
		exports["default"] = _default; 
	} (dist$6));

	var dist$5 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.background = void 0;

		var _core = dist$c;

		var config = {
		  background: true,
		  backgroundImage: true,
		  backgroundSize: true,
		  backgroundPosition: true,
		  backgroundRepeat: true
		};
		config.bgImage = config.backgroundImage;
		config.bgSize = config.backgroundSize;
		config.bgPosition = config.backgroundPosition;
		config.bgRepeat = config.backgroundRepeat;
		var background = (0, _core.system)(config);
		exports.background = background;
		var _default = background;
		exports["default"] = _default; 
	} (dist$5));

	var dist$4 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.position = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};
		var config = {
		  position: true,
		  zIndex: {
		    property: 'zIndex',
		    scale: 'zIndices'
		  },
		  top: {
		    property: 'top',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  right: {
		    property: 'right',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  bottom: {
		    property: 'bottom',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  left: {
		    property: 'left',
		    scale: 'space',
		    defaultScale: defaults.space
		  }
		};
		var position = (0, _core.system)(config);
		exports.position = position;
		var _default = position;
		exports["default"] = _default; 
	} (dist$4));

	var dist$3 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.space = exports.padding = exports.margin = void 0;

		var _core = dist$c;

		var defaults = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
		};

		var isNumber = function isNumber(n) {
		  return typeof n === 'number' && !isNaN(n);
		};

		var getMargin = function getMargin(n, scale) {
		  if (!isNumber(n)) {
		    return (0, _core.get)(scale, n, n);
		  }

		  var isNegative = n < 0;
		  var absolute = Math.abs(n);
		  var value = (0, _core.get)(scale, absolute, absolute);

		  if (!isNumber(value)) {
		    return isNegative ? '-' + value : value;
		  }

		  return value * (isNegative ? -1 : 1);
		};

		var configs = {};
		configs.margin = {
		  margin: {
		    property: 'margin',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginTop: {
		    property: 'marginTop',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginRight: {
		    property: 'marginRight',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginBottom: {
		    property: 'marginBottom',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginLeft: {
		    property: 'marginLeft',
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginX: {
		    properties: ['marginLeft', 'marginRight'],
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  },
		  marginY: {
		    properties: ['marginTop', 'marginBottom'],
		    scale: 'space',
		    transform: getMargin,
		    defaultScale: defaults.space
		  }
		};
		configs.margin.m = configs.margin.margin;
		configs.margin.mt = configs.margin.marginTop;
		configs.margin.mr = configs.margin.marginRight;
		configs.margin.mb = configs.margin.marginBottom;
		configs.margin.ml = configs.margin.marginLeft;
		configs.margin.mx = configs.margin.marginX;
		configs.margin.my = configs.margin.marginY;
		configs.padding = {
		  padding: {
		    property: 'padding',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingTop: {
		    property: 'paddingTop',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingRight: {
		    property: 'paddingRight',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingBottom: {
		    property: 'paddingBottom',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingLeft: {
		    property: 'paddingLeft',
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingX: {
		    properties: ['paddingLeft', 'paddingRight'],
		    scale: 'space',
		    defaultScale: defaults.space
		  },
		  paddingY: {
		    properties: ['paddingTop', 'paddingBottom'],
		    scale: 'space',
		    defaultScale: defaults.space
		  }
		};
		configs.padding.p = configs.padding.padding;
		configs.padding.pt = configs.padding.paddingTop;
		configs.padding.pr = configs.padding.paddingRight;
		configs.padding.pb = configs.padding.paddingBottom;
		configs.padding.pl = configs.padding.paddingLeft;
		configs.padding.px = configs.padding.paddingX;
		configs.padding.py = configs.padding.paddingY;
		var margin = (0, _core.system)(configs.margin);
		exports.margin = margin;
		var padding = (0, _core.system)(configs.padding);
		exports.padding = padding;
		var space = (0, _core.compose)(margin, padding);
		exports.space = space;
		var _default = space;
		exports["default"] = _default; 
	} (dist$3));

	var dist$2 = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.shadow = void 0;

		var _core = dist$c;

		var shadow = (0, _core.system)({
		  boxShadow: {
		    property: 'boxShadow',
		    scale: 'shadows'
		  },
		  textShadow: {
		    property: 'textShadow',
		    scale: 'shadows'
		  }
		});
		exports.shadow = shadow;
		var _default = shadow;
		exports["default"] = _default; 
	} (dist$2));

	var dist$1 = {};

	var dist = {};

	(function (exports) {

		exports.__esModule = true;
		exports["default"] = exports.css = exports.responsive = exports.get = void 0;

		function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

		// based on https://github.com/developit/dlv
		var get = function get(obj, key, def, p, undef) {
		  key = key && key.split ? key.split('.') : [key];

		  for (p = 0; p < key.length; p++) {
		    obj = obj ? obj[key[p]] : undef;
		  }

		  return obj === undef ? def : obj;
		};

		exports.get = get;
		var defaultBreakpoints = [40, 52, 64].map(function (n) {
		  return n + 'em';
		});
		var defaultTheme = {
		  space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
		  fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
		};
		var aliases = {
		  bg: 'backgroundColor',
		  m: 'margin',
		  mt: 'marginTop',
		  mr: 'marginRight',
		  mb: 'marginBottom',
		  ml: 'marginLeft',
		  mx: 'marginX',
		  my: 'marginY',
		  p: 'padding',
		  pt: 'paddingTop',
		  pr: 'paddingRight',
		  pb: 'paddingBottom',
		  pl: 'paddingLeft',
		  px: 'paddingX',
		  py: 'paddingY'
		};
		var multiples = {
		  marginX: ['marginLeft', 'marginRight'],
		  marginY: ['marginTop', 'marginBottom'],
		  paddingX: ['paddingLeft', 'paddingRight'],
		  paddingY: ['paddingTop', 'paddingBottom'],
		  size: ['width', 'height']
		};
		var scales = {
		  color: 'colors',
		  backgroundColor: 'colors',
		  borderColor: 'colors',
		  margin: 'space',
		  marginTop: 'space',
		  marginRight: 'space',
		  marginBottom: 'space',
		  marginLeft: 'space',
		  marginX: 'space',
		  marginY: 'space',
		  padding: 'space',
		  paddingTop: 'space',
		  paddingRight: 'space',
		  paddingBottom: 'space',
		  paddingLeft: 'space',
		  paddingX: 'space',
		  paddingY: 'space',
		  top: 'space',
		  right: 'space',
		  bottom: 'space',
		  left: 'space',
		  gridGap: 'space',
		  gridColumnGap: 'space',
		  gridRowGap: 'space',
		  gap: 'space',
		  columnGap: 'space',
		  rowGap: 'space',
		  fontFamily: 'fonts',
		  fontSize: 'fontSizes',
		  fontWeight: 'fontWeights',
		  lineHeight: 'lineHeights',
		  letterSpacing: 'letterSpacings',
		  border: 'borders',
		  borderTop: 'borders',
		  borderRight: 'borders',
		  borderBottom: 'borders',
		  borderLeft: 'borders',
		  borderWidth: 'borderWidths',
		  borderStyle: 'borderStyles',
		  borderRadius: 'radii',
		  borderTopRightRadius: 'radii',
		  borderTopLeftRadius: 'radii',
		  borderBottomRightRadius: 'radii',
		  borderBottomLeftRadius: 'radii',
		  borderTopWidth: 'borderWidths',
		  borderTopColor: 'colors',
		  borderTopStyle: 'borderStyles',
		  borderBottomWidth: 'borderWidths',
		  borderBottomColor: 'colors',
		  borderBottomStyle: 'borderStyles',
		  borderLeftWidth: 'borderWidths',
		  borderLeftColor: 'colors',
		  borderLeftStyle: 'borderStyles',
		  borderRightWidth: 'borderWidths',
		  borderRightColor: 'colors',
		  borderRightStyle: 'borderStyles',
		  outlineColor: 'colors',
		  boxShadow: 'shadows',
		  textShadow: 'shadows',
		  zIndex: 'zIndices',
		  width: 'sizes',
		  minWidth: 'sizes',
		  maxWidth: 'sizes',
		  height: 'sizes',
		  minHeight: 'sizes',
		  maxHeight: 'sizes',
		  flexBasis: 'sizes',
		  size: 'sizes',
		  // svg
		  fill: 'colors',
		  stroke: 'colors'
		};

		var positiveOrNegative = function positiveOrNegative(scale, value) {
		  if (typeof value !== 'number' || value >= 0) {
		    return get(scale, value, value);
		  }

		  var absolute = Math.abs(value);
		  var n = get(scale, absolute, absolute);
		  if (typeof n === 'string') return '-' + n;
		  return n * -1;
		};

		var transforms = ['margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'top', 'bottom', 'left', 'right'].reduce(function (acc, curr) {
		  var _extends2;

		  return _extends({}, acc, (_extends2 = {}, _extends2[curr] = positiveOrNegative, _extends2));
		}, {});

		var responsive = function responsive(styles) {
		  return function (theme) {
		    var next = {};
		    var breakpoints = get(theme, 'breakpoints', defaultBreakpoints);
		    var mediaQueries = [null].concat(breakpoints.map(function (n) {
		      return "@media screen and (min-width: " + n + ")";
		    }));

		    for (var key in styles) {
		      var value = typeof styles[key] === 'function' ? styles[key](theme) : styles[key];
		      if (value == null) continue;

		      if (!Array.isArray(value)) {
		        next[key] = value;
		        continue;
		      }

		      for (var i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
		        var media = mediaQueries[i];

		        if (!media) {
		          next[key] = value[i];
		          continue;
		        }

		        next[media] = next[media] || {};
		        if (value[i] == null) continue;
		        next[media][key] = value[i];
		      }
		    }

		    return next;
		  };
		};

		exports.responsive = responsive;

		var css = function css(args) {
		  return function (props) {
		    if (props === void 0) {
		      props = {};
		    }

		    var theme = _extends({}, defaultTheme, {}, props.theme || props);

		    var result = {};
		    var obj = typeof args === 'function' ? args(theme) : args;
		    var styles = responsive(obj)(theme);

		    for (var key in styles) {
		      var x = styles[key];
		      var val = typeof x === 'function' ? x(theme) : x;

		      if (key === 'variant') {
		        var variant = css(get(theme, val))(theme);
		        result = _extends({}, result, {}, variant);
		        continue;
		      }

		      if (val && typeof val === 'object') {
		        result[key] = css(val)(theme);
		        continue;
		      }

		      var prop = get(aliases, key, key);
		      var scaleName = get(scales, prop);
		      var scale = get(theme, scaleName, get(theme, prop, {}));
		      var transform = get(transforms, prop, get);
		      var value = transform(scale, val, val);

		      if (multiples[prop]) {
		        var dirs = multiples[prop];

		        for (var i = 0; i < dirs.length; i++) {
		          result[dirs[i]] = value;
		        }
		      } else {
		        result[prop] = value;
		      }
		    }

		    return result;
		  };
		};

		exports.css = css;
		var _default = css;
		exports["default"] = _default; 
	} (dist));

	(function (exports) {

		exports.__esModule = true;
		exports.colorStyle = exports.textStyle = exports.buttonStyle = exports["default"] = exports.variant = void 0;

		var _core = dist$c;

		var _css = _interopRequireDefault(dist);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var variant = function variant(_ref) {
		  var _config;

		  var scale = _ref.scale,
		      _ref$prop = _ref.prop,
		      prop = _ref$prop === void 0 ? 'variant' : _ref$prop,
		      _ref$variants = _ref.variants,
		      variants = _ref$variants === void 0 ? {} : _ref$variants,
		      key = _ref.key;
		  var sx;

		  if (Object.keys(variants).length) {
		    sx = function sx(value, scale, props) {
		      return (0, _css["default"])((0, _core.get)(scale, value, null))(props.theme);
		    };
		  } else {
		    sx = function sx(value, scale) {
		      return (0, _core.get)(scale, value, null);
		    };
		  }

		  sx.scale = scale || key;
		  sx.defaults = variants;
		  var config = (_config = {}, _config[prop] = sx, _config);
		  var parser = (0, _core.createParser)(config);
		  return parser;
		};

		exports.variant = variant;
		var _default = variant;
		exports["default"] = _default;
		var buttonStyle = variant({
		  key: 'buttons'
		});
		exports.buttonStyle = buttonStyle;
		var textStyle = variant({
		  key: 'textStyles',
		  prop: 'textStyle'
		});
		exports.textStyle = textStyle;
		var colorStyle = variant({
		  key: 'colorStyles',
		  prop: 'colors'
		});
		exports.colorStyle = colorStyle; 
	} (dist$1));

	space = system = void 0;

	var _core = dist$c;
	var system = _core.system;

	var _layout = _interopRequireWildcard(dist$b);

	var layout = _layout.layout;

	var _color = _interopRequireWildcard(dist$a);

	var color = _color.color;

	var _typography = _interopRequireWildcard(dist$9);

	_typography.typography;

	var _flexbox = _interopRequireWildcard(dist$8);

	_flexbox.flexbox;

	var _grid = _interopRequireWildcard(dist$7);

	_grid.grid;

	var _border = _interopRequireWildcard(dist$6);

	_border.border;
	_border["default"];

	var _background = _interopRequireWildcard(dist$5);

	_background.background;

	var _position = _interopRequireWildcard(dist$4);

	_position.position;

	var _space = dist$3;
	var space = _space.space;

	var _shadow = _interopRequireWildcard(dist$2);

	_shadow.shadow;
	_shadow["default"];
	_shadow["default"];

	function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

	// v4 api shims
	_layout["default"].width;
	    _layout["default"].height;
	    _layout["default"].minWidth;
	    _layout["default"].minHeight;
	    _layout["default"].maxWidth;
	    _layout["default"].maxHeight;
	    _layout["default"].size;
	    _layout["default"].verticalAlign;
	    _layout["default"].display;
	    _layout["default"].overflow;
	    _layout["default"].overflowX;
	    _layout["default"].overflowY;
	_color["default"].opacity;
	_typography["default"].fontSize;
	    _typography["default"].fontFamily;
	    _typography["default"].fontWeight;
	    _typography["default"].lineHeight;
	    _typography["default"].textAlign;
	    _typography["default"].fontStyle;
	    _typography["default"].letterSpacing;
	_flexbox["default"].alignItems;
	    _flexbox["default"].alignContent;
	    _flexbox["default"].justifyItems;
	    _flexbox["default"].justifyContent;
	    _flexbox["default"].flexWrap;
	    _flexbox["default"].flexDirection;
	    _flexbox["default"].flex;
	    _flexbox["default"].flexGrow;
	    _flexbox["default"].flexShrink;
	    _flexbox["default"].flexBasis;
	    _flexbox["default"].justifySelf;
	    _flexbox["default"].alignSelf;
	    _flexbox["default"].order;
	_grid["default"].gridGap;
	    _grid["default"].gridColumnGap;
	    _grid["default"].gridRowGap;
	    _grid["default"].gridColumn;
	    _grid["default"].gridRow;
	    _grid["default"].gridAutoFlow;
	    _grid["default"].gridAutoColumns;
	    _grid["default"].gridAutoRows;
	    _grid["default"].gridTemplateColumns;
	    _grid["default"].gridTemplateRows;
	    _grid["default"].gridTemplateAreas;
	    _grid["default"].gridArea;
	_border["default"].borderWidth;
	    _border["default"].borderStyle;
	    _border["default"].borderColor;
	    _border["default"].borderTop;
	    _border["default"].borderRight;
	    _border["default"].borderBottom;
	    _border["default"].borderLeft;
	    _border["default"].borderRadius;
	_background["default"].backgroundImage;
	    _background["default"].backgroundSize;
	    _background["default"].backgroundPosition;
	    _background["default"].backgroundRepeat;
	_position["default"].zIndex;
	    _position["default"].top;
	    _position["default"].right;
	    _position["default"].bottom;
	    _position["default"].left;

	const colors = {
	  bg: '#000000',
	  // Black background
	  primary: '#39FF14',
	  // Neon Green
	  approval: '#39FF14',
	  // Neon Green
	  danger: '#DC143C',
	  // Crimson Red
	  grey100: '#CCCCCC',
	  // Light Grey
	  grey80: '#333333',
	  // Dark Grey
	  white: '#FFFFFF' // White
	};
	const Section = _default.section`
  //   background-color: #f0f0f0;
  border: 2px solid #ccc;
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Heading = _default.h6`
  color: green;
  font-style: italic;
  margin-bottom: 10px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Row = _default.div`
  display: flex;
  flex-direction: column; /* default mobile view */
  justify-content: space-between;

  @media (min-width: 768px) {
    /* example breakpoint */
    flex-direction: row;
  }
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Cell = _default.div`
  flex-grow: 1;
  margin-bottom: 0.1rem;
  margin-right: 0.5rem;
  width: auto;
  min-width: fit-content;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.div`
  display: flex;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.select`
  border: 2px solid #ccc;
  padding: 8px 12px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.input`
  border: 2px solid #ccc;
  padding: 8px 12px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	_default.textarea`
  border: 2px solid #ccc;
  padding: 8px 12px;
  border-radius: 10px;
  margin-bottom: 20px;
  width: auto;
  min-width: 150px;
  resize: vertical; // Allows the user to resize the textarea vertically
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Paragraph = _default.p`
  font-style: ${props => props.fontStyle || 'normal'};
  color: ${props => props.fontColor || 'none'} ${space} ${layout}; // Allows space and layout props from styled-system
`;
	const ColoredSpan = _default.span`
  font-style: ${props => props.fontStyle || 'normal'};
  color: ${props => props.fontColor ? colors[props.fontColor] : 'inherit'};
  ${space}
  ${layout}
`;
	const AHref = _default.a`
  ${space} ${layout} // Allows space and layout props from styled-system
`;

	// Styled grid container
	const CheckboxGrid = _default.div`
  display: grid;
  background-color: ${props => props.bgColor || 'none'}; // Corrected syntax and default color
  grid-template-columns: repeat(
    ${props => props.columns || 2},
    // Corrected property name
    1fr
  ); // Dynamically sets the number of columns, defaults to 2
  grid-gap: 16px; // Adds space between the grid items
  @media (max-width: 768px) {
    grid-template-columns: 1fr; // One column when the screen is less than 768px
  }
  ${space} ${layout} // Allows space and layout props from styled-system
`;
	const Box = _default.div`
  display: flex;
  flex-direction: ${props => props.direction || 'column'};
  justify-content: space-between;
  @media (max-width: 768px) {
    flex-direction: column;
  }
  ${space}
`;
	const Label = _default.label`
  display: flex; // Changes display to flex to use flexbox properties

  align-items: center; // Vertically centers the children
  justify-content: space-between; // Spreads the children out across the label's width
  cursor: pointer;
  ${space}
`;
	_default.input`
  ${space} ${layout}
`;
	const StyledTextArea = _default.textarea`
  width: 100%; // Corresponds to width={1}
  margin-top: 40px; // my={10} assumes 4 is the base unit for margins
  margin-bottom: 40px; // my={10}
  background-color: white; // bg='white'

  &:focus {
    outline: none;
    border-color: #4a90e2; // Example focus style
  }
`;

	//  import models

	// [
	//   rowConfig,
	//   [
	//     ['site_id', cellConfig],
	//     ['nfc_tag_id', cellConfig],
	//     ['parent_equipment_id', cellConfig],
	//     ['installation_date', cellConfig],
	//   ],
	// ],

	const EquipmentForm = ({
	  resource
	}) => {
	  console.log(props);
	  // console.log(props.resource.properties.produit_id.availableValues);

	  return /*#__PURE__*/React__default.default.createElement(Section, null, /*#__PURE__*/React__default.default.createElement(Heading, null, "Parametrage"));
	};

	const DashboardCard = () => {
	  // Define the inline styles
	  const containerStyle = {
	    display: 'flex',
	    justifyContent: 'center',
	    alignItems: 'center',
	    height: '100vh'
	    // backgroundColor: '#f4f4f4', // Light grey background
	  };
	  const cardStyle = {
	    width: '300px',
	    // Adjust width as needed
	    padding: '20px',
	    boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
	    // backgroundColor: 'white',
	    textAlign: 'center',
	    borderRadius: '8px'
	  };
	  const logoStyle = {
	    width: '100px',
	    // Adjust size as needed
	    height: 'auto',
	    marginBottom: '20px'
	  };
	  return /*#__PURE__*/React__default.default.createElement("div", {
	    style: containerStyle
	  }, /*#__PURE__*/React__default.default.createElement("div", {
	    style: cardStyle
	  }, /*#__PURE__*/React__default.default.createElement("img", {
	    src: "https://oktopuce.com/build/images/logo.5fd235f1.svg",
	    alt: "Company Logo",
	    style: logoStyle
	  }), /*#__PURE__*/React__default.default.createElement("h1", null, "Bienvenue dans votre tableau de bord personnalis\xE9"), /*#__PURE__*/React__default.default.createElement("p", null, "Il s'agit d'une page de tableau de bord personnalis\xE9e pour votre panneau Oktopuce."), /*#__PURE__*/React__default.default.createElement("p", null, "Il sera d\xE9velopp\xE9 dans une page plus utile")));
	};

	const CustomSelect = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [options, setOptions] = React.useState([]);
	  const [parentField, setParentField] = React.useState(property.props.parent);
	  const [parentValue, setParentValue] = React.useState(record.params[property.props.parent]);
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const handleChange = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.path, selectedOption.value);
	  };
	  async function fetchOptions() {
	    if (parentField && parentValue !== undefined) {
	      try {
	        const response = await fetch(`/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`);
	        // `/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`
	        if (!response.ok) {
	          throw new Error(`HTTP error! Status: ${response.status}`);
	        }
	        const data = await response.json();
	        const formattedOptions = data.records.map(item => ({
	          value: item.id,
	          label: item.title
	        }));
	        setOptions(formattedOptions);
	        // FOR EDIT ACTION Set initial value after options have loaded
	        if (record && record.params[property.name]) {
	          const initialValue = formattedOptions.find(opt => opt.value === record.params[property.name]);
	          console.log(initialValue);
	          setSelectedOptionValue(initialValue);
	        }
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	      }
	    }
	  }
	  React.useEffect(() => {
	    setParentField(property.props.parent);
	    setParentValue(record.params[property.props.parent]);
	  }, [record.params]); //, property.props.parent

	  React.useEffect(() => {
	    setOptions([]);
	    setSelectedOptionValue(null);
	    record.params[property.name] = null;
	    fetchOptions();
	  }, [parentField, parentValue]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.FormGroup, {
	    error: ''
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: options,
	    onChange: selectedOption => handleChange(selectedOption),
	    name: property.name,
	    value: selectedOptionValue
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.FormMessage, null, '')));
	};

	// Styled label
	const ToggleLabel = _default.label`
  position: relative;
  display: inline-block;
  width: 56px; // Tailwind's w-14 is 3.5rem or 56px
  height: 32px; // Tailwind's h-8 is 2rem or 32px
  background-color: #e5e7eb; // Tailwind's bg-gray-200
  border-radius: 9999px; // Tailwind's rounded-full
  cursor: pointer;
  ${space} ${layout} ${color}
`;

	// Styled input (checkbox)
	const ToggleInput = _default.input.attrs(props => ({
	  type: 'checkbox'
	}))`
  opacity: 0;
  width: 100%;
  height: 100%;
  position: absolute;
  z-index: -1;
  ${space}
`;

	// Styled toggle indicator
	const ToggleIndicator = _default.span`
  position: absolute;
  left: 4px; // Tailwind's left-1 is 0.25rem or 4px
  top: 4px; // Tailwind's top-1 is 0.25rem or 4px
  width: 24px; // Tailwind's w-6 is 1.5rem or 24px
  height: 24px; // Tailwind's h-6 is 1.5rem or 24px
  border-radius: 9999px;
  background-color: ${({
  checked
}) => checked ? '#065f46' : '#b91c1c'}; // Tailwind's bg-teal-600 and bg-red-600
  transform: ${({
  checked
}) => checked ? 'translateX(24px)' : 'translateX(0px)'};
  transition: transform 0.2s;
  ${system({
  bg: {
    property: 'backgroundColor',
    scale: 'colors'
  }
})}
`;

	function ToggleSwitch({
	  id,
	  checked,
	  onChange,
	  name,
	  label
	}) {
	  return /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: id
	  }, /*#__PURE__*/React__default.default.createElement("span", null, label), /*#__PURE__*/React__default.default.createElement(ToggleLabel, {
	    htmlFor: id
	  }, /*#__PURE__*/React__default.default.createElement(ToggleInput, {
	    id: id,
	    checked: checked,
	    onChange: onChange,
	    name: name
	  }), /*#__PURE__*/React__default.default.createElement(ToggleIndicator, {
	    checked: checked
	  })));
	}

	const CustomCheckBox = props => {
	  const {
	    onChange,
	    record,
	    property,
	    resource
	  } = props;
	  const checkBoxes = property.availableValues;
	  React.useState(record.params[property.props.parent]);
	  const initialState = checkBoxes.reduce((acc, check) => {
	    acc[check.value] = false;
	    return acc;
	  }, {});
	  const [isVisible, setIsVisible] = React.useState(property.props.isVisible.includes(record.params[property.props.parent]));
	  const [checked, setChecked] = React.useState(initialState);
	  const handleChange = field => {
	    setChecked(prevState => ({
	      ...prevState,
	      [field]: !checked[field]
	    }));
	  };
	  console.log(property.props.label);
	  console.log(isVisible);
	  React.useEffect(() => {
	    // if (record.params[property.props.parent]) {
	    //   // setIsVisible(
	    //   //   property.props.isVisible.includes(record.params[property.props.parent])
	    //   // );

	    // }
	    const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	    setIsVisible(newVisibility);
	    // console.log('Visibility updated to:', newVisibility);
	  }, [record.params[property.props.parent]]); // record.params[property.props.parent]  JSON.stringify(record.params[property.props.parent])

	  React.useEffect(() => {
	    Object.keys(checked).forEach(key => onChange(key, checked[key]));
	  }, [checked]);
	  React.useEffect(() => {
	    if (!isVisible) setChecked(initialState);
	  }, [isVisible]);

	  // console.log(isVisible);
	  // console.log(record.params);
	  // console.log('Parent', parentValue);

	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.H6, null, property.props.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, checkBoxes.map((box, i) => /*#__PURE__*/React__default.default.createElement(Box, {
	    key: i
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: i
	  }, box.label, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: i,
	    onChange: e => handleChange(box.value, e.target.checked),
	    checked: checked[box.value],
	    name: box.value
	  })))))));
	};

	const LocationInfoComponent = props => {
	  const {
	    record,
	    property,
	    onChange,
	    resource
	  } = props;
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [inputValue, setInputValue] = React.useState('');
	  const [options, setOptions] = React.useState([]);
	  const [hasMore, setHasMore] = React.useState(true);
	  const [isLoading, setIsLoading] = React.useState(false);
	  const [page, setPage] = React.useState(0);
	  const perPage = 10; // Quanbtité des options par requette

	  // gerer le precision

	  const [showPrecision, setShowPrecision] = React.useState(false);
	  const loadOptions = async (inputValue, callback) => {
	    if (!hasMore && inputValue === '') return; // pas des action sil ny a pas des options

	    setIsLoading(true);
	    try {
	      const response = await fetch(`/api/resources/equipment_locations/actions/list?perPage=${perPage}&page=${page}`);
	      if (!response.ok) {
	        throw new Error(`HTTP error! Status: ${response.status}`);
	      }
	      const data = await response.json();
	      const newOptions = data.records.map(item => ({
	        value: item.id,
	        label: item.title
	      }));
	      setOptions(prev => [...prev, ...newOptions]); // Jounte les options
	      setHasMore(data.records.length >= perPage); // Vefirier si il y aura encore des pages
	      setPage(prev => prev + 1); // MAj Page numero
	      setIsLoading(false);
	      callback(newOptions);
	    } catch (error) {
	      console.error('Failed to fetch options:', error);
	      setIsLoading(false);
	    }
	  };
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const [textFieldValue, setTextFieldValue] = React.useState('');
	  const handleChangeSelect = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.props.select.value, selectedOption.value);
	  };
	  const handleChangeTextField = text => {
	    setTextFieldValue(text);
	    onChange(property.props.textField.value, textFieldValue);
	  };
	  // SET VISIBILITY - CHANGE THE STATE ONCE FINISHED

	  React.useEffect(() => {
	    setIsVisible(property.props.isVisible.includes(record.params[property.props.parent]));
	  }, [record.params[property.props.parent]]);
	  React.useEffect(() => {
	    loadOptions(inputValue, () => {});
	  }, [isVisible]);
	  React.useEffect(() => {
	    if (!isVisible) {
	      onChange(property.props.select.value, null);
	      onChange(property.props.textField.value, '');
	    }
	  }, [isVisible]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.H6, null, property.props.select.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    onInputChange: value => setInputValue(value),
	    options: options,
	    onMenuScrollToBottom: () => {
	      if (!isLoading && hasMore) {
	        loadOptions(inputValue, () => {});
	      }
	    },
	    onChange: selectedOption => handleChangeSelect(selectedOption),
	    isLoading: isLoading,
	    isSearchable: true,
	    flexGrow: 1,
	    width: 2 / 3,
	    minWidth: "fi/t-content"
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    flexGrow: 1,
	    width: 1 / 3
	  }, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    label: property.props.checkBox.label,
	    id: "precision_toggle",
	    checked: showPrecision,
	    onChange: () => setShowPrecision(!showPrecision)
	  }))), showPrecision && /*#__PURE__*/React__default.default.createElement(StyledTextArea, {
	    id: resource.properties[property.props.textField.value].propertyPath,
	    name: resource.properties[property.props.textField.value].propertyPath,
	    onChange: e => handleChangeTextField(e.target.value),
	    rows: 3,
	    placeholder: property.props.textField.label
	  })));
	};

	const SingleSelect = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [options, setOptions] = React.useState([]);
	  const [selectedOptionValue, setSelectedOptionValue] = React.useState(null);
	  const handleChange = selectedOption => {
	    setSelectedOptionValue(selectedOption);
	    onChange(property.path, selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (typeof property.props.isVisible === 'boolean') {
	      setIsVisible(property.props.isVisible);
	    } else {
	      const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	      setIsVisible(newVisibility);
	      //   console.log('Visibility updated to:', newVisibility);
	    }
	  }, [property.props.isVisible, record.params[property.props.parent]]);
	  const fetchOptions = async () => {
	    try {
	      const response = await fetch(`/api/resources/${property.props.tableName}/actions/list`);
	      // `/api/resources/${property.props.tableName}/actions/list?filters.${parentField}=${parentValue}`
	      if (!response.ok) {
	        throw new Error(`HTTP error! Status: ${response.status}`);
	      }
	      const data = await response.json();
	      setOptions(data.records.map(item => ({
	        value: item.id,
	        label: item.title
	      })));
	    } catch (error) {
	      console.error('Failed to fetch options:', error);
	    }
	  };
	  React.useEffect(() => {
	    if (property.props.options) return setOptions(property.props.options);
	    fetchOptions();
	  }, [property.props.tableName]);

	  //   console.log(record.params);

	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: property.name
	  }, property.props.label), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: options,
	    onChange: selectedOption => handleChange(selectedOption),
	    name: property.name,
	    value: selectedOptionValue
	  })));
	};

	const controleEtancheite = (poids, potentiel, detection) => {
	  if (!poids) return `s'il vous plait tapez le poids / choissez type de gaz `;
	  const charge = poids * potentiel / 1000;
	  // console.log(charge);

	  if (isNaN(charge)) return `Pas assez d'information`;
	  if (charge < 5) {
	    return detection ? `pas
        d’obligation` // Avec système de détection
	    : 'Une fois par an'; // Sans système de détection
	  }
	  if (charge >= 5 && charge <= 50) {
	    return detection ? 'Tous les 2 ans' // Avec système de détection
	    : 'Tous les 6 mois'; // Sans système de détection
	  }
	  if (charge > 50 && charge <= 500) {
	    return detection ? 'Tous les ans' // Avec système de détection
	    : 'Tous les 6 mois'; // Sans système de détection
	  }

	  // En supposant des charges supérieures à 500 t Eq. CO2
	  return detection ? 'Tous les 6 mois' // Avec système de détection
	  : 'Tous les 3 mois'; // Sans système de détection
	};
	const temperatureOptions = (start, end, step = 1) => {
	  const range = [];
	  if (step > 0) {
	    for (let i = start; i < end; i += step) {
	      range.push(i);
	    }
	  } else if (step < 0) {
	    for (let i = start; i > end; i += step) {
	      range.push(i);
	    }
	  }
	  const options = [];
	  range.forEach(r => options.push({
	    value: r,
	    label: r
	  }));
	  return options;
	};

	const GasParamsComponent = ({
	  property,
	  record,
	  onChange
	}) => {
	  const [isVisible, setIsVisible] = React.useState(false);
	  const [periodicite, setPeriodicite] = React.useState(controleEtancheite());
	  const [poidsGaz, setPoidGaz] = React.useState(0);
	  const [has_leak_detection, set_has_leak_detection] = React.useState(false);
	  React.useEffect(() => {
	    const newVisibility = property.props.isVisible.includes(record.params[property.props.parent]);
	    setIsVisible(newVisibility);
	  }, [record.params[property.props.parent]]);
	  const gasTypeProperty = {
	    ...property,
	    label: 'gas_type_id',
	    name: 'gas_type_id',
	    path: 'gas_type_id',
	    propertyPath: 'gas_type_id',
	    props: {
	      ...property.props,
	      label: 'Type de gaz',
	      isVisible: true
	    }
	  };
	  const handleInputValue = gas_weight => {
	    console.log(gas_weight);
	    setPoidGaz(parseFloat(gas_weight));
	    onChange('gas_weight', parseFloat(gas_weight));
	  };
	  const handleLeakDetection = () => {
	    set_has_leak_detection(!has_leak_detection);
	  };
	  React.useEffect(() => {
	    const potentiel = property.props.potentiel[record.params.gas_type_id];
	    setPeriodicite(controleEtancheite(poidsGaz, potentiel, has_leak_detection));
	    onChange('has_leak_detection', has_leak_detection);
	    onChange('leak_detection_periodicity', periodicite);
	  }, [record.params.gas_type_id, poidsGaz, has_leak_detection]);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, isVisible && /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, null, property.props.label), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, {
	    mb: "3"
	  }, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(SingleSelect, {
	    property: gasTypeProperty,
	    record: record,
	    onChange: onChange
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Label, {
	    htmlFor: "gas_weight"
	  }, "Poids de gaz"), /*#__PURE__*/React__default.default.createElement(designSystem.Input, {
	    id: "gas_weight",
	    name: "gas_weight",
	    type: "number",
	    step: "0.01",
	    onChange: e => handleInputValue(e.target.value)
	  }))), /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: "has_leak_detection",
	    onChange: () => handleLeakDetection(),
	    checked: has_leak_detection,
	    label: "D\xE9tecteur de fuite",
	    name: "has_leak_detection"
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement("span", null, "Contr\xF4le d\u2019\xE9tanch\xE9it\xE9 obligatoire:"), /*#__PURE__*/React__default.default.createElement("span", null, periodicite)))));
	};

	const SoufflageComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [releveValue, setReleveValue] = React.useState('');
	  const [repriseValue, setRepriseValue] = React.useState('');
	  const [soufDeltaValue, setSoufDeltaValue] = React.useState(null);
	  const mode = auxQuestions && auxQuestions[0];
	  const tempReleve = auxQuestions && auxQuestions[1];
	  const tempReprise = auxQuestions && auxQuestions[2];
	  const soufflageDelta = auxQuestions && auxQuestions[3];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handleReleve = selectedOption => {
	    setReleveValue(selectedOption.value);
	  };
	  const handleReprise = selectedOption => {
	    setRepriseValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: tempReleve.id,
	        response: releveValue
	      });
	      questionsValuesHandler({
	        id: tempReprise.id,
	        response: repriseValue
	      });
	      questionsValuesHandler({
	        id: soufflageDelta.id,
	        response: soufDeltaValue
	      });
	    }
	  }, [modeOption, releveValue, repriseValue, soufflageDelta, soufDeltaValue, auxQuestions]);
	  React.useEffect(() => {
	    if (releveValue !== null && releveValue !== undefined && repriseValue !== null && repriseValue !== undefined) {
	      setSoufDeltaValue(releveValue - repriseValue);
	    } else {
	      setSoufDeltaValue(null);
	    }
	  }, [releveValue, repriseValue]);

	  // useEffect(() => {

	  //   setSoufDeltaValue(
	  //     releveValue && repriseValue ? releveValue - repriseValue : null
	  //   );
	  // }, [releveValue, repriseValue]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: tempReleve.id,
	    mb: 1
	  }, tempReleve.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 61),
	    onChange: selectedOption => handleReleve(selectedOption),
	    name: tempReleve.name,
	    value: releveValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: tempReprise.id,
	    mb: 1
	  }, tempReprise.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 41),
	    onChange: selectedOption => handleReprise(selectedOption),
	    name: tempReprise.name,
	    value: repriseValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: soufflageDelta.id,
	    mb: 1
	  }, soufflageDelta.name), /*#__PURE__*/React__default.default.createElement("span", null, soufDeltaValue ? soufDeltaValue : 'Entrez releve ou reprise'))));
	};

	const PressionsComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [pressionReleveValue, setPressionReleveValue] = React.useState('');
	  const mode = auxQuestions && auxQuestions[0];
	  const pressionReleve = auxQuestions && auxQuestions[1];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handlePressionReleve = selectedOption => {
	    setPressionReleveValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: pressionReleve.id,
	        response: pressionReleveValue
	      });
	    }
	  }, [modeOption, pressionReleveValue, auxQuestions]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: pressionReleve.id,
	    mb: 1
	  }, pressionReleve.name, ", BAR"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(1, 40),
	    onChange: selectedOption => handlePressionReleve(selectedOption),
	    name: pressionReleve.name,
	    value: pressionReleveValue.value
	  }))));
	};

	const PompeEauComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [departEauValue, setDepartEauValue] = React.useState('');
	  const [retourEauValue, setRetourEauValue] = React.useState('');
	  const mode = auxQuestions && auxQuestions[1];
	  const departEau = auxQuestions && auxQuestions[2];
	  const retourEau = auxQuestions && auxQuestions[3];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  const handleDepart = selectedOption => {
	    setDepartEauValue(selectedOption.value);
	  };
	  const handleRetour = selectedOption => {
	    setRetourEauValue(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: departEau.id,
	        response: departEauValue
	      });
	      questionsValuesHandler({
	        id: retourEau.id,
	        response: retourEauValue
	      });
	    }
	  }, [modeOption, departEauValue, retourEauValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: departEau.id,
	    mb: 1
	  }, departEau.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 71),
	    onChange: selectedOption => handleDepart(selectedOption),
	    name: departEau.name,
	    value: departEauValue.value
	  })), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: retourEau.id,
	    mb: 1
	  }, retourEau.name), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: temperatureOptions(-5, 71),
	    onChange: selectedOption => handleRetour(selectedOption),
	    name: retourEau.name,
	    value: retourEauValue.value
	  }))));
	};

	const EtancheiteComponent = ({
	  parent,
	  fetchAux,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [etancheReseauxValue, setEtancheReseauxValue] = React.useState(false);
	  const etancheReseaux = auxQuestions && auxQuestions[0];
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: etancheReseaux.id,
	        response: etancheReseauxValue
	      });
	    }
	  }, [etancheReseauxValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  console.log(auxQuestions);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: etancheReseaux.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, etancheReseaux.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: etancheReseaux.id,
	    name: etancheReseaux.id,
	    checked: etancheReseauxValue,
	    onChange: () => setEtancheReseauxValue(!etancheReseauxValue)
	  })))));
	};

	const SecuriteComponent = ({
	  parent,
	  fetchAux,
	  optionsMapper,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [modeOption, setModeOption] = React.useState('');
	  const [fonctionGroupeValue, setFonctionGroupeValue] = React.useState(false);
	  const fonctionGroupe = auxQuestions && auxQuestions[0];
	  const mode = auxQuestions && auxQuestions[1];
	  const hanldeMode = selectedOption => {
	    setModeOption(selectedOption.value);
	  };
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: mode.id,
	        response: modeOption
	      });
	      questionsValuesHandler({
	        id: fonctionGroupe.id,
	        response: fonctionGroupeValue
	      });
	    }
	  }, [modeOption, fonctionGroupeValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: fonctionGroupe.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, fonctionGroupe.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: fonctionGroupe.id,
	    name: fonctionGroupe.id,
	    checked: fonctionGroupeValue,
	    onChange: () => setFonctionGroupeValue(!fonctionGroupeValue)
	  }))), /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: mode.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, mode.name)), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    options: optionsMapper(mode.options),
	    onChange: selectedOption => hanldeMode(selectedOption),
	    name: mode.name,
	    value: modeOption.value
	  }))));
	};

	const ResistanceComponent = ({
	  parent,
	  fetchAux,
	  questionsValuesHandler
	}) => {
	  const [auxQuestions, setAuxQuestions] = React.useState(null);
	  const [fonctionGroupeValue, setFonctionGroupeValue] = React.useState(false);
	  const fonctionGroupe = auxQuestions && auxQuestions[0];
	  React.useEffect(() => {
	    if (auxQuestions) {
	      questionsValuesHandler({
	        id: fonctionGroupe.id,
	        response: fonctionGroupeValue
	      });
	    }
	  }, [fonctionGroupeValue, auxQuestions]);
	  React.useEffect(() => {
	    async function fetchQuestions() {
	      try {
	        const data = await fetchAux(parent);
	        const parentData = await fetch(`/api/resources/intervention_question_types/records/${parent}/show`);
	        setAuxQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchQuestions();
	  }, [parent]);
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    my: 1
	  }, auxQuestions && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Box, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: fonctionGroupe.id,
	    my: 1
	  }, /*#__PURE__*/React__default.default.createElement("span", null, fonctionGroupe.name), /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: fonctionGroupe.id,
	    name: fonctionGroupe.id,
	    checked: fonctionGroupeValue,
	    onChange: () => setFonctionGroupeValue(!fonctionGroupeValue)
	  })))));
	};

	const fetchAdditionalQuestions = async (parentId, childId = null) => {
	  try {
	    const url = `/api/resources/interventions_dep_questions/actions/getDepQuestions?parent_q_id=${parentId}${childId !== null ? `&child_q_id=${childId}` : ''}`;
	    const response = await fetch(url);
	    if (!response.ok) {
	      throw new Error(`HTTP error! Status: ${response.status}`);
	    }
	    const data = await response.json();
	    return data;
	  } catch (error) {
	    console.error('Failed to fetch options:', error);
	    return null;
	  }
	};
	const optionsMapper = str => {
	  return str.split(',').map(option => ({
	    value: option,
	    label: option
	  }));
	};
	const QuestionComponent = ({
	  question,
	  record,
	  questionsValuesHandler,
	  childQuestionsHandler
	}) => {
	  const [parentIds, setParentIds] = React.useState([]);

	  // api/resources/interventions_dep_questions/actions/getParentAll

	  const [auxQuestions, setAuxQuestions] = React.useState([]);
	  const [response, setResponse] = React.useState(false);
	  const [auxComp, setAuxComp] = React.useState(null);
	  const auxMapping = new Map([[6,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SoufflageComponent, {
	    parent: 7,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [7,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SoufflageComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [51,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PressionsComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [28,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PompeEauComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [69,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(PompeEauComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [57,
	  /*#__PURE__*/
	  // added
	  React__default.default.createElement(SecuriteComponent, {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    optionsMapper: optionsMapper,
	    questionsValuesHandler: questionsValuesHandler
	  })], [58, /*#__PURE__*/React__default.default.createElement(ResistanceComponent // added
	  , {
	    parent: question.id,
	    fetchAux: fetchAdditionalQuestions,
	    questionsValuesHandler: questionsValuesHandler
	  })], [5, /*#__PURE__*/React__default.default.createElement(EtancheiteComponent, {
	    parent: 5,
	    child: 17,
	    fetchAux: fetchAdditionalQuestions,
	    questionsValuesHandler: questionsValuesHandler
	  })]]);
	  //   aux deps - intervention_type_id

	  const handleChange = () => {
	    setAuxComp(null);
	    setResponse(!response);
	  };
	  React.useEffect(() => {
	    questionsValuesHandler({
	      id: question.id,
	      response: response
	    });
	  }, [question, response]);
	  React.useEffect(() => {
	    async function setChildIds() {
	      if (!response && parentIds.includes(question.id)) {
	        const childIds = await fetchAdditionalQuestions(question.id);
	        childQuestionsHandler(childIds.questions.map(question => question.id));
	      }
	    }
	    setChildIds();
	  }, [response, question]);
	  React.useEffect(() => {
	    if (response && parentIds.includes(question.id)) {
	      if (record.params.intervention_type_id === 1 && record.params.equipment_type_id === 28 && question.id !== 5) {
	        // handle pompe mis en service int
	        return setAuxComp(auxMapping.get(record.params.equipment_type_id));
	      }
	      setAuxComp(auxMapping.get(question.id));
	    }
	  }, [response, record.params.intervention_type_id, record.params.produit_id]);
	  React.useEffect(() => {
	    async function fetchAux() {
	      try {
	        const response = await fetchAdditionalQuestions(question.id);
	        const parentArray = await fetch(`/api/resources/interventions_dep_questions/actions/getParentAll`);
	        const data = await parentArray.json();
	        setParentIds(data.questions);
	        setAuxQuestions(response);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	        return null;
	      }
	    }
	    fetchAux();
	  }, [question]);

	  // console.log(record.params);

	  return /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: question.id
	  }, question.name, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: question.id,
	    name: question.id,
	    checked: response,
	    onChange: handleChange
	  })), auxComp);
	};

	const InterventionsQuestionsComponent = ({
	  onChange,
	  record
	}) => {
	  const [questions, setQuestions] = React.useState([]);
	  const [questionValues, setQuestionValues] = React.useState([]);
	  const [childQuestionIds, setChildQuestionIds] = React.useState([]);
	  const [interventionType, setInterventionType] = React.useState(null);
	  React.useEffect(() => {
	    setInterventionType(record.params.intervention_type_id);
	  }, [record.params.intervention_type_id]);

	  //  Set questions into the JSON objet pour backend
	  React.useEffect(() => {
	    onChange('questions', JSON.stringify(questionValues));
	  }, [questionValues]);

	  // check for the duplicated values

	  const questionsValuesHandler = newQuestion => {
	    setQuestionValues(prevState => {
	      const newState = [...prevState];
	      const existingIndex = prevState.findIndex(q => q.id === newQuestion.id);
	      if (existingIndex > -1) {
	        // Replace the existing object with the new one
	        newState[existingIndex] = newQuestion;
	      } else {
	        // Add the new question to the array
	        newState.push(newQuestion);
	      }
	      // Check if the question is a parent and the response is false,
	      // then remove all child questions responses
	      if (newQuestion.response === false) {
	        return newState.filter(q => !childQuestionIds.includes(q.id));
	      }
	      return newState;
	    });
	  };

	  // console.log(questionValues);
	  // console.log(record.params.questions);
	  React.useEffect(() => {
	    setQuestionValues([]);
	    fetch(`/api/resources/interventions_questions_equipment/actions/getInterventionQuestions?intervention_type_id=${record.params.intervention_type_id}&equipment_type_id=${record.params.equipment_type_id}`).then(res => res.json()).then(data => {
	      // const questions = questionsStateMapper(data.questions);
	      setQuestions(data.questions);
	    });
	  }, [record.params.equipment_type_id,
	  // record.params.intervention_type_id,
	  interventionType, record.params.produit_id, record.params.endroit_id]);
	  return /*#__PURE__*/React__default.default.createElement(CheckboxGrid, null, questions.length > 0 ? questions.map(question => /*#__PURE__*/React__default.default.createElement(QuestionComponent, {
	    key: question.id,
	    question: question,
	    record: record,
	    questionsValuesHandler: questionsValuesHandler,
	    childQuestionsHandler: setChildQuestionIds
	  })) : /*#__PURE__*/React__default.default.createElement("div", null, "Choissisez Type d'intervention et / ou equipment"));
	};

	const convertOptions = str => {
	  return str.split(',').map(option => ({
	    value: option,
	    label: option
	  }));
	};
	const convertQuestions = arr => {
	  const obj = {
	    ...arr[0]
	  };
	  delete obj.parentIndex;
	  return Object.values(obj);
	};
	const AdditionalQuestionsComponent = ({
	  questions,
	  onChange,
	  property,
	  record
	}) => {
	  const questionItems = convertQuestions(questions);
	  // console.log(questionItems);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, questionItems.map((question, i) => question.options ? /*#__PURE__*/React__default.default.createElement("div", {
	    key: i
	  }, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: i
	  }, "Mode"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    key: i,
	    id: i,
	    options: convertOptions(question.options)
	  })) : /*#__PURE__*/React__default.default.createElement(Label, {
	    key: i,
	    htmlFor: question.id
	  }, question.name, /*#__PURE__*/React__default.default.createElement(ToggleSwitch, {
	    id: question.id
	  }))));
	};

	const trueFalseConverter = q => {
	  if (q.type === 'checkbox') {
	    return parseInt(q.response, 10) ? 'Oui' : 'Non';
	  }
	  return q.response;
	};
	const InterventionQuestionsShow = ({
	  record
	}) => {
	  const [questions, setQuestions] = React.useState([]);
	  React.useEffect(() => {
	    const fetchQuestions = async () => {
	      try {
	        const response = await fetch(`/api/resources/interventions_questions/actions/getQuestions?intervention_id=${record.params.id}`);
	        if (!response.ok) {
	          throw new Error(`HTTP error! Status: ${response.status}`);
	        }
	        const data = await response.json();
	        setQuestions(data.questions);
	      } catch (error) {
	        console.error('Failed to fetch options:', error);
	      }
	    };
	    fetchQuestions();
	  }, [record.params.id]);
	  return /*#__PURE__*/React__default.default.createElement(CheckboxGrid, {
	    columns: 4
	  }, questions && questions.map(q => /*#__PURE__*/React__default.default.createElement(Box, {
	    key: q.id
	  }, /*#__PURE__*/React__default.default.createElement("span", null, q.name), /*#__PURE__*/React__default.default.createElement("span", null, trueFalseConverter(q)))));
	};

	const ProductShow = ({
	  produit,
	  endroit,
	  equipment
	}) => {
	  return /*#__PURE__*/React__default.default.createElement(Row, null, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "Sur quel produit est install\xE9 la puce "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_produit/records/${produit.id}/show`
	  }, produit.name || 'Link to produit')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "A quel endroit"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_endroit/records/${endroit.id}/show`
	  }, endroit.name || 'Link to endroit')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 2
	  }, "Type d\u2019unit\xE9"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipment_types/records/${equipment.id}/show`
	  }, equipment.name || 'Link to unité')));
	};

	const ParametrageShowComponent = ({
	  record
	}) => {
	  const produit = {
	    id: record.populated.produit_id.id,
	    name: record.populated.produit_id.title
	  };
	  const endroit = {
	    id: record.populated.endroit_id.id,
	    name: record.populated.endroit_id.title
	  };
	  const equipment = {
	    id: record.populated.equipment_type_id.id,
	    name: record.populated.equipment_type_id.title
	  };
	  return /*#__PURE__*/React__default.default.createElement(ProductShow, {
	    produit: produit,
	    endroit: endroit,
	    equipment: equipment
	  });
	};

	async function fetchOptions(tableName, parentField = null, parentValue = null) {
	  try {
	    const url = `/api/resources/${tableName}/actions/list${parentField && parentValue ? `?filters.${parentField}=${parentValue}` : ''}`;
	    const response = await fetch(url);
	    if (!response.ok) {
	      throw new Error(`HTTP error! Status: ${response.status}`);
	    }
	    const data = await response.json();
	    const formattedOptions = data.records.map(item => ({
	      value: item.id,
	      label: item.title
	    }));
	    return formattedOptions;
	  } catch (error) {
	    console.error('Failed to fetch options:', error);
	  }
	}

	const PRODUCT_FIELD_NAME = 'produit_id';
	const PRODUCT_TABLE_NAME = 'equipment_produit';
	const ENDROIT_FIELD_NAME = 'endroit_id';
	const ENDROIT_TABLE_NAME = 'equipment_endroit';
	const EQUIPMENT_TYPE_FIELD_NAME = 'equipment_type_id';
	const EQUIPMENT_TYPE_TABLE_NAME = 'equipment_types';
	const ProductSelect = ({
	  record,
	  onChange
	}) => {
	  const [productOptions, setProductOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [product_id, setProductID] = React.useState(null);
	  const [productSelected, setProductSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [endroitOptions, setEndroitOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [endroit_id, setEndroitID] = React.useState(null);
	  const [endroitSelected, setEndroitSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez produit'
	  }]);
	  const [equipmentTypeOptions, setEquipmentTypeOptions] = React.useState([{
	    value: '',
	    label: 'Choissisez endroit'
	  }]);
	  const [equipment_type_id, setEquipmentTypeId] = React.useState(null);
	  const [equipmentSelected, setEquipmentSelected] = React.useState([{
	    value: '',
	    label: 'Choissisez endroit'
	  }]);

	  // initial setup

	  React.useEffect(() => {
	    async function fetchProductOptions() {
	      const res = await fetchOptions(PRODUCT_TABLE_NAME);
	      setProductOptions(res);
	    }
	    fetchProductOptions();
	  }, [record.params.PRODUCT_FIELD_NAME]);
	  React.useEffect(() => {
	    setEndroitSelected([{
	      value: '',
	      label: 'Choissisez produit'
	    }]);
	    setEndroitID(null);
	    async function fetchEndroitOptions() {
	      if (!product_id) return;
	      const res = await fetchOptions(ENDROIT_TABLE_NAME, PRODUCT_FIELD_NAME, product_id);
	      setEndroitOptions(res);
	    }
	    fetchEndroitOptions();
	  }, [product_id, record.params.PRODUCT_FIELD_NAME]);
	  React.useEffect(() => {
	    setEquipmentSelected([{
	      value: '',
	      label: 'Choissisez endroit'
	    }]);
	    setEquipmentTypeId(null);
	    async function fetchEquipmentOptions() {
	      if (!product_id || !endroit_id) return;
	      const res = await fetchOptions(EQUIPMENT_TYPE_TABLE_NAME, ENDROIT_FIELD_NAME, endroit_id);
	      setEquipmentTypeOptions(res);
	    }
	    fetchEquipmentOptions();
	  }, [product_id, endroit_id, record.params.ENDROIT_FIELD_NAME, record.params.PRODUCT_FIELD_NAME]);

	  // handlers
	  const handleProductSelect = selectedOption => {
	    setProductSelected(selectedOption);
	    setProductID(selectedOption.value);
	  };
	  const handleEndroitSelect = selectedOption => {
	    setEndroitSelected(selectedOption);
	    setEndroitID(selectedOption.value);
	  };
	  const handleEquipmentSelect = selectedOption => {
	    setEquipmentSelected(selectedOption);
	    setEquipmentTypeId(selectedOption.value);
	  };

	  // on change useEffect

	  React.useEffect(() => {
	    onChange(PRODUCT_FIELD_NAME, product_id);
	    onChange(ENDROIT_FIELD_NAME, endroit_id);
	    onChange(EQUIPMENT_TYPE_FIELD_NAME, equipment_type_id);
	  }, [product_id, endroit_id, equipment_type_id]);
	  console.log(record.params);

	  // setOptions(formattedOptions);
	  // // FOR EDIT ACTION Set initial value after options have loaded
	  // if (record && record.params[property.name]) {
	  //   const initialValue = formattedOptions.find(
	  //     (opt) => opt.value === record.params[property.name]
	  //   );
	  //   console.log(initialValue);
	  //   setSelectedOptionValue(initialValue);
	  // }
	  return /*#__PURE__*/React__default.default.createElement(Box, {
	    direction: "row"
	  }, /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: PRODUCT_FIELD_NAME,
	    mb: 1
	  }, "Sur quel produit est install\xE9 le puce?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: PRODUCT_FIELD_NAME,
	    options: productOptions,
	    onChange: selectedOption => handleProductSelect(selectedOption),
	    name: PRODUCT_FIELD_NAME,
	    value: productSelected
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: ENDROIT_FIELD_NAME,
	    my: 1
	  }, "A quel endroit?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: ENDROIT_FIELD_NAME,
	    options: endroitOptions,
	    onChange: selectedOption => handleEndroitSelect(selectedOption),
	    name: ENDROIT_FIELD_NAME,
	    value: endroitSelected
	  })), /*#__PURE__*/React__default.default.createElement(Box, null, /*#__PURE__*/React__default.default.createElement(Label, {
	    htmlFor: EQUIPMENT_TYPE_FIELD_NAME,
	    my: 1
	  }, "Type d'unit\xE9?"), /*#__PURE__*/React__default.default.createElement(designSystem.Select, {
	    id: EQUIPMENT_TYPE_FIELD_NAME,
	    options: equipmentTypeOptions,
	    onChange: selectedOption => handleEquipmentSelect(selectedOption),
	    name: EQUIPMENT_TYPE_FIELD_NAME,
	    value: equipmentSelected
	  })));
	};

	const FrenchDate = ({
	  date
	}) => {
	  // Create a new date object if the date is a string or use the date object directly
	  const dateObj = typeof date === 'string' ? new Date(date) : date;

	  // Format the date using the French locale
	  const formattedDate = new Intl.DateTimeFormat('fr-FR', {
	    day: 'numeric',
	    month: 'long',
	    year: 'numeric'
	  }).format(dateObj);

	  // Output the formatted date in the desired structure "jour - mois - année"
	  const [day, month, year] = formattedDate.split(' ');
	  const displayDate = `${day} - ${month} - ${year}`;
	  return /*#__PURE__*/React__default.default.createElement("span", null, displayDate);
	};

	const getAllProperties = record => {
	  const allEntries = {};
	  for (const entry of Object.entries(record.params)) {
	    allEntries[entry[0]] = entry[1];
	  }
	  for (const entry of Object.entries(record.populated)) {
	    const key = entry[0];
	    const val = entry[1].params;
	    allEntries[key] = val;
	  }
	  return allEntries;
	};
	const EquipmentShowComponent = ({
	  record
	}) => {
	  const allEntries = getAllProperties(record);
	  return /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Section, {
	    mx: "auto"
	  }, /*#__PURE__*/React__default.default.createElement(Heading, null, "Parametrage"), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 3
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Site:"), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/sites/records/${allEntries.site_id.id}/show`
	  }, allEntries.site_id.name || 'Link to Site')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Puce id: "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/nfc_tags/records/${allEntries.nfc_tag_id.id}/show`
	  }, allEntries.nfc_tag_id.id || 'Link to Puce')), allEntries.parent_equipment_id && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Pi\xE8ce coupl\xE9e: "), ' ', /*#__PURE__*/React__default.default.createElement(AHref, {
	    href: `/resources/equipments/records/${allEntries.parent_equipment_id.id}/show`
	  }, allEntries.parent_equipment_id.id || 'Link to Puce')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    mb: 1
	  }, "Date d'installation: "), /*#__PURE__*/React__default.default.createElement(FrenchDate, {
	    date: allEntries.installation_date
	  }))), /*#__PURE__*/React__default.default.createElement(ProductShow, {
	    produit: {
	      id: allEntries.produit_id.id,
	      name: allEntries.produit_id.name
	    },
	    endroit: {
	      id: allEntries.endroit_id.id,
	      name: allEntries.endroit_id.name
	    },
	    equipment: {
	      id: allEntries.equipment_type_id.id,
	      name: allEntries.equipment_type_id.name
	    }
	  })), /*#__PURE__*/React__default.default.createElement(Section, null, /*#__PURE__*/React__default.default.createElement(Heading, null, "Informations"), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Marque"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.equipment_brand_id.name)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Model"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.equipment_model)), allEntries.serial_number && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "N de serie"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.serial_number)), allEntries.remote_control_number && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Telecommande"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.remote_control_number)), allEntries.equipment_type_id.is_int && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Type"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.unite_interieur_type_id ? allEntries.unite_interieur_type_id.name : 'non spécifié ')), allEntries.equipment_type_id.is_ext && /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(Paragraph, null, "Type"), /*#__PURE__*/React__default.default.createElement(Paragraph, null, allEntries.unite_exterieur_type_id ? allEntries.unite_exterieur_type_id.name : 'non spécifié '))), allEntries.equipment_type_id.is_finalite && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    fontStyle: "italic",
	    fontColor: "#39FF14",
	    mb: 1
	  }, "Finalit\xE9s")), /*#__PURE__*/React__default.default.createElement(Row, null, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Plancher chauffant :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_plancher_chauffant ? 'approval' : 'danger'
	  }, allEntries.is_plancher_chauffant ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Plancher raffraichissant :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_plancher_raffraichssant ? 'approval' : 'danger'
	  }, allEntries.is_plancher_raffraichssant ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Radiateurs : "), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.is_radiateurs ? 'approval' : 'danger'
	  }, allEntries.is_radiateurs ? ' Oui' : ' Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Ventilo-onvecteur(s) :"), /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.ventilo_convecteurs ? 'approval' : 'danger'
	  }, ` ${allEntries.ventilo_convecteurs ? ' Oui' : ' Non'}`)))), allEntries.equipment_type_id.is_gas && /*#__PURE__*/React__default.default.createElement(React__default.default.Fragment, null, /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Paragraph, {
	    fontStyle: "italic",
	    fontColor: "#39FF14",
	    mb: 1
	  }, "Gas Informations")), /*#__PURE__*/React__default.default.createElement(Row, {
	    mb: 2
	  }, /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Type de gaz"), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.gas_type_id.name)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Poids de gaz"), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.gas_weight)), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "D\xE9tecteur de fuite: "), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: allEntries.has_leak_detection ? 'approval' : 'danger'
	  }, allEntries.has_leak_detection ? 'Oui' : 'Non')), /*#__PURE__*/React__default.default.createElement(Cell, null, /*#__PURE__*/React__default.default.createElement(ColoredSpan, null, "Contr\xF4le d\u2019\xE9tanch\xE9it\xE9 obligatoire: "), ' ', /*#__PURE__*/React__default.default.createElement(ColoredSpan, {
	    fontColor: "approval"
	  }, allEntries.leak_detection_periodicity))))));
	};

	const InterventionShowComponent = ({
	  record
	}) => {
	  const allEntries = getAllProperties(record);
	  console.log(allEntries);
	  return /*#__PURE__*/React__default.default.createElement("div", null, "InterventionShowComponent");
	};

	const EmptyBreak = () => {
	  return /*#__PURE__*/React__default.default.createElement("div", null);
	};

	const ImportComponent = ({
	  resource
	}) => {
	  const [file, setFile] = React.useState(null);
	  const sendNotice = adminjs.useNotice();
	  const [isFetching, setFetching] = React.useState();
	  const onUpload = uploadedFile => {
	    setFile(uploadedFile?.[0] ?? null);
	  };
	  const onSubmit = async () => {
	    if (!file) {
	      return;
	    }
	    setFetching(true);
	    try {
	      const importData = new FormData();
	      importData.append('file', file, file?.name);
	      await new adminjs.ApiClient().resourceAction({
	        method: 'post',
	        resourceId: resource.id,
	        actionName: 'import',
	        data: importData
	      });
	      sendNotice({
	        message: 'Imported successfully',
	        type: 'success'
	      });
	    } catch (e) {
	      sendNotice({
	        message: e.message,
	        type: 'error'
	      });
	    }
	    setFetching(false);
	  };
	  if (isFetching) {
	    return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
	  }
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    margin: "auto",
	    maxWidth: 600,
	    display: "flex",
	    justifyContent: "center",
	    flexDirection: "column"
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.DropZone, {
	    files: [],
	    onChange: onUpload,
	    multiple: false
	  }), file && /*#__PURE__*/React__default.default.createElement(designSystem.DropZoneItem, {
	    file: file,
	    filename: file.name,
	    onRemove: () => setFile(null)
	  }), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center",
	    m: 10
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
	    onClick: onSubmit,
	    disabled: !file || isFetching
	  }, "Upload")));
	};

	var FileSaver_min = {exports: {}};

	(function (module, exports) {
		(function(a,b){b();})(commonjsGlobal,function(){function b(a,b){return "undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c);},d.onerror=function(){console.error("could not download file");},d.send();}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send();}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"));}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b);}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof commonjsGlobal&&commonjsGlobal.global===commonjsGlobal?commonjsGlobal:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href);},4E4),setTimeout(function(){e(j);},0));}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else {var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i);});}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null;},k.readAsDataURL(b);}else {var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m);},4E4);}});f.saveAs=g.saveAs=g,(module.exports=g);});

		
	} (FileSaver_min));

	var FileSaver_minExports = FileSaver_min.exports;

	function _typeof(o) {
	  "@babel/helpers - typeof";

	  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
	    return typeof o;
	  } : function (o) {
	    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
	  }, _typeof(o);
	}

	function requiredArgs(required, args) {
	  if (args.length < required) {
	    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
	  }
	}

	/**
	 * @name isDate
	 * @category Common Helpers
	 * @summary Is the given value a date?
	 *
	 * @description
	 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
	 *
	 * @param {*} value - the value to check
	 * @returns {boolean} true if the given value is a date
	 * @throws {TypeError} 1 arguments required
	 *
	 * @example
	 * // For a valid date:
	 * const result = isDate(new Date())
	 * //=> true
	 *
	 * @example
	 * // For an invalid date:
	 * const result = isDate(new Date(NaN))
	 * //=> true
	 *
	 * @example
	 * // For some value:
	 * const result = isDate('2014-02-31')
	 * //=> false
	 *
	 * @example
	 * // For an object:
	 * const result = isDate({})
	 * //=> false
	 */
	function isDate(value) {
	  requiredArgs(1, arguments);
	  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
	}

	/**
	 * @name toDate
	 * @category Common Helpers
	 * @summary Convert the given argument to an instance of Date.
	 *
	 * @description
	 * Convert the given argument to an instance of Date.
	 *
	 * If the argument is an instance of Date, the function returns its clone.
	 *
	 * If the argument is a number, it is treated as a timestamp.
	 *
	 * If the argument is none of the above, the function returns Invalid Date.
	 *
	 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
	 *
	 * @param {Date|Number} argument - the value to convert
	 * @returns {Date} the parsed date in the local time zone
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // Clone the date:
	 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
	 * //=> Tue Feb 11 2014 11:30:30
	 *
	 * @example
	 * // Convert the timestamp to date:
	 * const result = toDate(1392098430000)
	 * //=> Tue Feb 11 2014 11:30:30
	 */
	function toDate(argument) {
	  requiredArgs(1, arguments);
	  var argStr = Object.prototype.toString.call(argument);

	  // Clone the date
	  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
	    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
	    return new Date(argument.getTime());
	  } else if (typeof argument === 'number' || argStr === '[object Number]') {
	    return new Date(argument);
	  } else {
	    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
	      // eslint-disable-next-line no-console
	      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments");
	      // eslint-disable-next-line no-console
	      console.warn(new Error().stack);
	    }
	    return new Date(NaN);
	  }
	}

	/**
	 * @name isValid
	 * @category Common Helpers
	 * @summary Is the given date valid?
	 *
	 * @description
	 * Returns false if argument is Invalid Date and true otherwise.
	 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
	 * Invalid Date is a Date, whose time value is NaN.
	 *
	 * Time value of Date: http://es5.github.io/#x15.9.1.1
	 *
	 * @param {*} date - the date to check
	 * @returns {Boolean} the date is valid
	 * @throws {TypeError} 1 argument required
	 *
	 * @example
	 * // For the valid date:
	 * const result = isValid(new Date(2014, 1, 31))
	 * //=> true
	 *
	 * @example
	 * // For the value, convertable into a date:
	 * const result = isValid(1393804800000)
	 * //=> true
	 *
	 * @example
	 * // For the invalid date:
	 * const result = isValid(new Date(''))
	 * //=> false
	 */
	function isValid(dirtyDate) {
	  requiredArgs(1, arguments);
	  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
	    return false;
	  }
	  var date = toDate(dirtyDate);
	  return !isNaN(Number(date));
	}

	function toInteger(dirtyNumber) {
	  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
	    return NaN;
	  }
	  var number = Number(dirtyNumber);
	  if (isNaN(number)) {
	    return number;
	  }
	  return number < 0 ? Math.ceil(number) : Math.floor(number);
	}

	/**
	 * @name addMilliseconds
	 * @category Millisecond Helpers
	 * @summary Add the specified number of milliseconds to the given date.
	 *
	 * @description
	 * Add the specified number of milliseconds to the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds added
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
	 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:30.750
	 */
	function addMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var timestamp = toDate(dirtyDate).getTime();
	  var amount = toInteger(dirtyAmount);
	  return new Date(timestamp + amount);
	}

	/**
	 * @name subMilliseconds
	 * @category Millisecond Helpers
	 * @summary Subtract the specified number of milliseconds from the given date.
	 *
	 * @description
	 * Subtract the specified number of milliseconds from the given date.
	 *
	 * @param {Date|Number} date - the date to be changed
	 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
	 * @returns {Date} the new date with the milliseconds subtracted
	 * @throws {TypeError} 2 arguments required
	 *
	 * @example
	 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
	 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
	 * //=> Thu Jul 10 2014 12:45:29.250
	 */
	function subMilliseconds(dirtyDate, dirtyAmount) {
	  requiredArgs(2, arguments);
	  var amount = toInteger(dirtyAmount);
	  return addMilliseconds(dirtyDate, -amount);
	}

	var MILLISECONDS_IN_DAY = 86400000;
	function getUTCDayOfYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var timestamp = date.getTime();
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	  var startOfYearTimestamp = date.getTime();
	  var difference = timestamp - startOfYearTimestamp;
	  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
	}

	function startOfUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var weekStartsOn = 1;
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var fourthOfJanuaryOfNextYear = new Date(0);
	  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
	  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
	  var fourthOfJanuaryOfThisYear = new Date(0);
	  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
	  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCISOWeekYear(dirtyDate) {
	  requiredArgs(1, arguments);
	  var year = getUTCISOWeekYear(dirtyDate);
	  var fourthOfJanuary = new Date(0);
	  fourthOfJanuary.setUTCFullYear(year, 0, 4);
	  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCISOWeek(fourthOfJanuary);
	  return date;
	}

	var MILLISECONDS_IN_WEEK$1 = 604800000;
	function getUTCISOWeek(dirtyDate) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
	}

	var defaultOptions = {};
	function getDefaultOptions() {
	  return defaultOptions;
	}

	function startOfUTCWeek(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  var date = toDate(dirtyDate);
	  var day = date.getUTCDay();
	  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
	  date.setUTCDate(date.getUTCDate() - diff);
	  date.setUTCHours(0, 0, 0, 0);
	  return date;
	}

	function getUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var year = date.getUTCFullYear();
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var firstWeekOfNextYear = new Date(0);
	  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
	  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
	  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
	  var firstWeekOfThisYear = new Date(0);
	  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
	  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
	  if (date.getTime() >= startOfNextYear.getTime()) {
	    return year + 1;
	  } else if (date.getTime() >= startOfThisYear.getTime()) {
	    return year;
	  } else {
	    return year - 1;
	  }
	}

	function startOfUTCWeekYear(dirtyDate, options) {
	  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
	  requiredArgs(1, arguments);
	  var defaultOptions = getDefaultOptions();
	  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
	  var year = getUTCWeekYear(dirtyDate, options);
	  var firstWeek = new Date(0);
	  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
	  firstWeek.setUTCHours(0, 0, 0, 0);
	  var date = startOfUTCWeek(firstWeek, options);
	  return date;
	}

	var MILLISECONDS_IN_WEEK = 604800000;
	function getUTCWeek(dirtyDate, options) {
	  requiredArgs(1, arguments);
	  var date = toDate(dirtyDate);
	  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

	  // Round the number of days to the nearest integer
	  // because the number of milliseconds in a week is not constant
	  // (e.g. it's different in the week of the daylight saving time clock shift)
	  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
	}

	function addLeadingZeros(number, targetLength) {
	  var sign = number < 0 ? '-' : '';
	  var output = Math.abs(number).toString();
	  while (output.length < targetLength) {
	    output = '0' + output;
	  }
	  return sign + output;
	}

	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* |                                |
	 * |  d  | Day of month                   |  D  |                                |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  y  | Year (abs)                     |  Y  |                                |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 */
	var formatters$1 = {
	  // Year
	  y: function y(date, token) {
	    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
	    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
	    // |----------|-------|----|-------|-------|-------|
	    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
	    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
	    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
	    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
	    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

	    var signedYear = date.getUTCFullYear();
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var year = signedYear > 0 ? signedYear : 1 - signedYear;
	    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
	  },
	  // Month
	  M: function M(date, token) {
	    var month = date.getUTCMonth();
	    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
	  },
	  // Day of the month
	  d: function d(date, token) {
	    return addLeadingZeros(date.getUTCDate(), token.length);
	  },
	  // AM or PM
	  a: function a(date, token) {
	    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return dayPeriodEnumValue.toUpperCase();
	      case 'aaa':
	        return dayPeriodEnumValue;
	      case 'aaaaa':
	        return dayPeriodEnumValue[0];
	      case 'aaaa':
	      default:
	        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token) {
	    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
	  },
	  // Hour [0-23]
	  H: function H(date, token) {
	    return addLeadingZeros(date.getUTCHours(), token.length);
	  },
	  // Minute
	  m: function m(date, token) {
	    return addLeadingZeros(date.getUTCMinutes(), token.length);
	  },
	  // Second
	  s: function s(date, token) {
	    return addLeadingZeros(date.getUTCSeconds(), token.length);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    var numberOfDigits = token.length;
	    var milliseconds = date.getUTCMilliseconds();
	    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
	    return addLeadingZeros(fractionalSeconds, token.length);
	  }
	};

	var dayPeriodEnum = {
	  am: 'am',
	  pm: 'pm',
	  midnight: 'midnight',
	  noon: 'noon',
	  morning: 'morning',
	  afternoon: 'afternoon',
	  evening: 'evening',
	  night: 'night'
	};
	/*
	 * |     | Unit                           |     | Unit                           |
	 * |-----|--------------------------------|-----|--------------------------------|
	 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
	 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
	 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
	 * |  d  | Day of month                   |  D  | Day of year                    |
	 * |  e  | Local day of week              |  E  | Day of week                    |
	 * |  f  |                                |  F* | Day of week in month           |
	 * |  g* | Modified Julian day            |  G  | Era                            |
	 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
	 * |  i! | ISO day of week                |  I! | ISO week of year               |
	 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
	 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
	 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
	 * |  m  | Minute                         |  M  | Month                          |
	 * |  n  |                                |  N  |                                |
	 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
	 * |  p! | Long localized time            |  P! | Long localized date            |
	 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
	 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
	 * |  s  | Second                         |  S  | Fraction of second             |
	 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
	 * |  u  | Extended year                  |  U* | Cyclic year                    |
	 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
	 * |  w  | Local week of year             |  W* | Week of month                  |
	 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
	 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
	 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
	 *
	 * Letters marked by * are not implemented but reserved by Unicode standard.
	 *
	 * Letters marked by ! are non-standard, but implemented by date-fns:
	 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
	 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
	 *   i.e. 7 for Sunday, 1 for Monday, etc.
	 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
	 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
	 *   `R` is supposed to be used in conjunction with `I` and `i`
	 *   for universal ISO week-numbering date, whereas
	 *   `Y` is supposed to be used in conjunction with `w` and `e`
	 *   for week-numbering date specific to the locale.
	 * - `P` is long localized date format
	 * - `p` is long localized time format
	 */

	var formatters = {
	  // Era
	  G: function G(date, token, localize) {
	    var era = date.getUTCFullYear() > 0 ? 1 : 0;
	    switch (token) {
	      // AD, BC
	      case 'G':
	      case 'GG':
	      case 'GGG':
	        return localize.era(era, {
	          width: 'abbreviated'
	        });
	      // A, B
	      case 'GGGGG':
	        return localize.era(era, {
	          width: 'narrow'
	        });
	      // Anno Domini, Before Christ
	      case 'GGGG':
	      default:
	        return localize.era(era, {
	          width: 'wide'
	        });
	    }
	  },
	  // Year
	  y: function y(date, token, localize) {
	    // Ordinal number
	    if (token === 'yo') {
	      var signedYear = date.getUTCFullYear();
	      // Returns 1 for 1 BC (which is year 0 in JavaScript)
	      var year = signedYear > 0 ? signedYear : 1 - signedYear;
	      return localize.ordinalNumber(year, {
	        unit: 'year'
	      });
	    }
	    return formatters$1.y(date, token);
	  },
	  // Local week-numbering year
	  Y: function Y(date, token, localize, options) {
	    var signedWeekYear = getUTCWeekYear(date, options);
	    // Returns 1 for 1 BC (which is year 0 in JavaScript)
	    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

	    // Two digit year
	    if (token === 'YY') {
	      var twoDigitYear = weekYear % 100;
	      return addLeadingZeros(twoDigitYear, 2);
	    }

	    // Ordinal number
	    if (token === 'Yo') {
	      return localize.ordinalNumber(weekYear, {
	        unit: 'year'
	      });
	    }

	    // Padding
	    return addLeadingZeros(weekYear, token.length);
	  },
	  // ISO week-numbering year
	  R: function R(date, token) {
	    var isoWeekYear = getUTCISOWeekYear(date);

	    // Padding
	    return addLeadingZeros(isoWeekYear, token.length);
	  },
	  // Extended year. This is a single number designating the year of this calendar system.
	  // The main difference between `y` and `u` localizers are B.C. years:
	  // | Year | `y` | `u` |
	  // |------|-----|-----|
	  // | AC 1 |   1 |   1 |
	  // | BC 1 |   1 |   0 |
	  // | BC 2 |   2 |  -1 |
	  // Also `yy` always returns the last two digits of a year,
	  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
	  u: function u(date, token) {
	    var year = date.getUTCFullYear();
	    return addLeadingZeros(year, token.length);
	  },
	  // Quarter
	  Q: function Q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'Q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'QQ':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'Qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'QQQ':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'QQQQQ':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'QQQQ':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone quarter
	  q: function q(date, token, localize) {
	    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
	    switch (token) {
	      // 1, 2, 3, 4
	      case 'q':
	        return String(quarter);
	      // 01, 02, 03, 04
	      case 'qq':
	        return addLeadingZeros(quarter, 2);
	      // 1st, 2nd, 3rd, 4th
	      case 'qo':
	        return localize.ordinalNumber(quarter, {
	          unit: 'quarter'
	        });
	      // Q1, Q2, Q3, Q4
	      case 'qqq':
	        return localize.quarter(quarter, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
	      case 'qqqqq':
	        return localize.quarter(quarter, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // 1st quarter, 2nd quarter, ...
	      case 'qqqq':
	      default:
	        return localize.quarter(quarter, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Month
	  M: function M(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      case 'M':
	      case 'MM':
	        return formatters$1.M(date, token);
	      // 1st, 2nd, ..., 12th
	      case 'Mo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'MMM':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // J, F, ..., D
	      case 'MMMMM':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // January, February, ..., December
	      case 'MMMM':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone month
	  L: function L(date, token, localize) {
	    var month = date.getUTCMonth();
	    switch (token) {
	      // 1, 2, ..., 12
	      case 'L':
	        return String(month + 1);
	      // 01, 02, ..., 12
	      case 'LL':
	        return addLeadingZeros(month + 1, 2);
	      // 1st, 2nd, ..., 12th
	      case 'Lo':
	        return localize.ordinalNumber(month + 1, {
	          unit: 'month'
	        });
	      // Jan, Feb, ..., Dec
	      case 'LLL':
	        return localize.month(month, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // J, F, ..., D
	      case 'LLLLL':
	        return localize.month(month, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // January, February, ..., December
	      case 'LLLL':
	      default:
	        return localize.month(month, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // Local week of year
	  w: function w(date, token, localize, options) {
	    var week = getUTCWeek(date, options);
	    if (token === 'wo') {
	      return localize.ordinalNumber(week, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(week, token.length);
	  },
	  // ISO week of year
	  I: function I(date, token, localize) {
	    var isoWeek = getUTCISOWeek(date);
	    if (token === 'Io') {
	      return localize.ordinalNumber(isoWeek, {
	        unit: 'week'
	      });
	    }
	    return addLeadingZeros(isoWeek, token.length);
	  },
	  // Day of the month
	  d: function d(date, token, localize) {
	    if (token === 'do') {
	      return localize.ordinalNumber(date.getUTCDate(), {
	        unit: 'date'
	      });
	    }
	    return formatters$1.d(date, token);
	  },
	  // Day of year
	  D: function D(date, token, localize) {
	    var dayOfYear = getUTCDayOfYear(date);
	    if (token === 'Do') {
	      return localize.ordinalNumber(dayOfYear, {
	        unit: 'dayOfYear'
	      });
	    }
	    return addLeadingZeros(dayOfYear, token.length);
	  },
	  // Day of week
	  E: function E(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    switch (token) {
	      // Tue
	      case 'E':
	      case 'EE':
	      case 'EEE':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'EEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'EEEEEE':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'EEEE':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Local day of week
	  e: function e(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (Nth day of week with current locale or weekStartsOn)
	      case 'e':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'ee':
	        return addLeadingZeros(localDayOfWeek, 2);
	      // 1st, 2nd, ..., 7th
	      case 'eo':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'eee':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'eeeee':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'eeeeee':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'eeee':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Stand-alone local day of week
	  c: function c(date, token, localize, options) {
	    var dayOfWeek = date.getUTCDay();
	    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
	    switch (token) {
	      // Numerical value (same as in `e`)
	      case 'c':
	        return String(localDayOfWeek);
	      // Padded numerical value
	      case 'cc':
	        return addLeadingZeros(localDayOfWeek, token.length);
	      // 1st, 2nd, ..., 7th
	      case 'co':
	        return localize.ordinalNumber(localDayOfWeek, {
	          unit: 'day'
	        });
	      case 'ccc':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'standalone'
	        });
	      // T
	      case 'ccccc':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'standalone'
	        });
	      // Tu
	      case 'cccccc':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'standalone'
	        });
	      // Tuesday
	      case 'cccc':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'standalone'
	        });
	    }
	  },
	  // ISO day of week
	  i: function i(date, token, localize) {
	    var dayOfWeek = date.getUTCDay();
	    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
	    switch (token) {
	      // 2
	      case 'i':
	        return String(isoDayOfWeek);
	      // 02
	      case 'ii':
	        return addLeadingZeros(isoDayOfWeek, token.length);
	      // 2nd
	      case 'io':
	        return localize.ordinalNumber(isoDayOfWeek, {
	          unit: 'day'
	        });
	      // Tue
	      case 'iii':
	        return localize.day(dayOfWeek, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      // T
	      case 'iiiii':
	        return localize.day(dayOfWeek, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      // Tu
	      case 'iiiiii':
	        return localize.day(dayOfWeek, {
	          width: 'short',
	          context: 'formatting'
	        });
	      // Tuesday
	      case 'iiii':
	      default:
	        return localize.day(dayOfWeek, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM or PM
	  a: function a(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    switch (token) {
	      case 'a':
	      case 'aa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'aaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'aaaaa':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'aaaa':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // AM, PM, midnight, noon
	  b: function b(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours === 12) {
	      dayPeriodEnumValue = dayPeriodEnum.noon;
	    } else if (hours === 0) {
	      dayPeriodEnumValue = dayPeriodEnum.midnight;
	    } else {
	      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
	    }
	    switch (token) {
	      case 'b':
	      case 'bb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'bbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        }).toLowerCase();
	      case 'bbbbb':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'bbbb':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // in the morning, in the afternoon, in the evening, at night
	  B: function B(date, token, localize) {
	    var hours = date.getUTCHours();
	    var dayPeriodEnumValue;
	    if (hours >= 17) {
	      dayPeriodEnumValue = dayPeriodEnum.evening;
	    } else if (hours >= 12) {
	      dayPeriodEnumValue = dayPeriodEnum.afternoon;
	    } else if (hours >= 4) {
	      dayPeriodEnumValue = dayPeriodEnum.morning;
	    } else {
	      dayPeriodEnumValue = dayPeriodEnum.night;
	    }
	    switch (token) {
	      case 'B':
	      case 'BB':
	      case 'BBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'abbreviated',
	          context: 'formatting'
	        });
	      case 'BBBBB':
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'narrow',
	          context: 'formatting'
	        });
	      case 'BBBB':
	      default:
	        return localize.dayPeriod(dayPeriodEnumValue, {
	          width: 'wide',
	          context: 'formatting'
	        });
	    }
	  },
	  // Hour [1-12]
	  h: function h(date, token, localize) {
	    if (token === 'ho') {
	      var hours = date.getUTCHours() % 12;
	      if (hours === 0) hours = 12;
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return formatters$1.h(date, token);
	  },
	  // Hour [0-23]
	  H: function H(date, token, localize) {
	    if (token === 'Ho') {
	      return localize.ordinalNumber(date.getUTCHours(), {
	        unit: 'hour'
	      });
	    }
	    return formatters$1.H(date, token);
	  },
	  // Hour [0-11]
	  K: function K(date, token, localize) {
	    var hours = date.getUTCHours() % 12;
	    if (token === 'Ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Hour [1-24]
	  k: function k(date, token, localize) {
	    var hours = date.getUTCHours();
	    if (hours === 0) hours = 24;
	    if (token === 'ko') {
	      return localize.ordinalNumber(hours, {
	        unit: 'hour'
	      });
	    }
	    return addLeadingZeros(hours, token.length);
	  },
	  // Minute
	  m: function m(date, token, localize) {
	    if (token === 'mo') {
	      return localize.ordinalNumber(date.getUTCMinutes(), {
	        unit: 'minute'
	      });
	    }
	    return formatters$1.m(date, token);
	  },
	  // Second
	  s: function s(date, token, localize) {
	    if (token === 'so') {
	      return localize.ordinalNumber(date.getUTCSeconds(), {
	        unit: 'second'
	      });
	    }
	    return formatters$1.s(date, token);
	  },
	  // Fraction of second
	  S: function S(date, token) {
	    return formatters$1.S(date, token);
	  },
	  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
	  X: function X(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    if (timezoneOffset === 0) {
	      return 'Z';
	    }
	    switch (token) {
	      // Hours and optional minutes
	      case 'X':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XX`
	      case 'XXXX':
	      case 'XX':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `XXX`
	      case 'XXXXX':
	      case 'XXX': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
	  x: function x(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Hours and optional minutes
	      case 'x':
	        return formatTimezoneWithOptionalMinutes(timezoneOffset);

	      // Hours, minutes and optional seconds without `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xx`
	      case 'xxxx':
	      case 'xx':
	        // Hours and minutes without `:` delimiter
	        return formatTimezone(timezoneOffset);

	      // Hours, minutes and optional seconds with `:` delimiter
	      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
	      // so this token always has the same output as `xxx`
	      case 'xxxxx':
	      case 'xxx': // Hours and minutes with `:` delimiter
	      default:
	        return formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (GMT)
	  O: function O(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'O':
	      case 'OO':
	      case 'OOO':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'OOOO':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Timezone (specific non-location)
	  z: function z(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timezoneOffset = originalDate.getTimezoneOffset();
	    switch (token) {
	      // Short
	      case 'z':
	      case 'zz':
	      case 'zzz':
	        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
	      // Long
	      case 'zzzz':
	      default:
	        return 'GMT' + formatTimezone(timezoneOffset, ':');
	    }
	  },
	  // Seconds timestamp
	  t: function t(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = Math.floor(originalDate.getTime() / 1000);
	    return addLeadingZeros(timestamp, token.length);
	  },
	  // Milliseconds timestamp
	  T: function T(date, token, _localize, options) {
	    var originalDate = options._originalDate || date;
	    var timestamp = originalDate.getTime();
	    return addLeadingZeros(timestamp, token.length);
	  }
	};
	function formatTimezoneShort(offset, dirtyDelimiter) {
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = Math.floor(absOffset / 60);
	  var minutes = absOffset % 60;
	  if (minutes === 0) {
	    return sign + String(hours);
	  }
	  var delimiter = dirtyDelimiter ;
	  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
	}
	function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
	  if (offset % 60 === 0) {
	    var sign = offset > 0 ? '-' : '+';
	    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
	  }
	  return formatTimezone(offset, dirtyDelimiter);
	}
	function formatTimezone(offset, dirtyDelimiter) {
	  var delimiter = dirtyDelimiter || '';
	  var sign = offset > 0 ? '-' : '+';
	  var absOffset = Math.abs(offset);
	  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
	  var minutes = addLeadingZeros(absOffset % 60, 2);
	  return sign + hours + delimiter + minutes;
	}

	var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'P':
	      return formatLong.date({
	        width: 'short'
	      });
	    case 'PP':
	      return formatLong.date({
	        width: 'medium'
	      });
	    case 'PPP':
	      return formatLong.date({
	        width: 'long'
	      });
	    case 'PPPP':
	    default:
	      return formatLong.date({
	        width: 'full'
	      });
	  }
	};
	var timeLongFormatter = function timeLongFormatter(pattern, formatLong) {
	  switch (pattern) {
	    case 'p':
	      return formatLong.time({
	        width: 'short'
	      });
	    case 'pp':
	      return formatLong.time({
	        width: 'medium'
	      });
	    case 'ppp':
	      return formatLong.time({
	        width: 'long'
	      });
	    case 'pppp':
	    default:
	      return formatLong.time({
	        width: 'full'
	      });
	  }
	};
	var dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {
	  var matchResult = pattern.match(/(P+)(p+)?/) || [];
	  var datePattern = matchResult[1];
	  var timePattern = matchResult[2];
	  if (!timePattern) {
	    return dateLongFormatter(pattern, formatLong);
	  }
	  var dateTimeFormat;
	  switch (datePattern) {
	    case 'P':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'short'
	      });
	      break;
	    case 'PP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'medium'
	      });
	      break;
	    case 'PPP':
	      dateTimeFormat = formatLong.dateTime({
	        width: 'long'
	      });
	      break;
	    case 'PPPP':
	    default:
	      dateTimeFormat = formatLong.dateTime({
	        width: 'full'
	      });
	      break;
	  }
	  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
	};
	var longFormatters = {
	  p: timeLongFormatter,
	  P: dateTimeLongFormatter
	};

	/**
	 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
	 * They usually appear for dates that denote time before the timezones were introduced
	 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
	 * and GMT+01:00:00 after that date)
	 *
	 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
	 * which would lead to incorrect calculations.
	 *
	 * This function returns the timezone offset in milliseconds that takes seconds in account.
	 */
	function getTimezoneOffsetInMilliseconds(date) {
	  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
	  utcDate.setUTCFullYear(date.getFullYear());
	  return date.getTime() - utcDate.getTime();
	}

	var protectedDayOfYearTokens = ['D', 'DD'];
	var protectedWeekYearTokens = ['YY', 'YYYY'];
	function isProtectedDayOfYearToken(token) {
	  return protectedDayOfYearTokens.indexOf(token) !== -1;
	}
	function isProtectedWeekYearToken(token) {
	  return protectedWeekYearTokens.indexOf(token) !== -1;
	}
	function throwProtectedError(token, format, input) {
	  if (token === 'YYYY') {
	    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'YY') {
	    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'D') {
	    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  } else if (token === 'DD') {
	    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
	  }
	}

	var formatDistanceLocale = {
	  lessThanXSeconds: {
	    one: 'less than a second',
	    other: 'less than {{count}} seconds'
	  },
	  xSeconds: {
	    one: '1 second',
	    other: '{{count}} seconds'
	  },
	  halfAMinute: 'half a minute',
	  lessThanXMinutes: {
	    one: 'less than a minute',
	    other: 'less than {{count}} minutes'
	  },
	  xMinutes: {
	    one: '1 minute',
	    other: '{{count}} minutes'
	  },
	  aboutXHours: {
	    one: 'about 1 hour',
	    other: 'about {{count}} hours'
	  },
	  xHours: {
	    one: '1 hour',
	    other: '{{count}} hours'
	  },
	  xDays: {
	    one: '1 day',
	    other: '{{count}} days'
	  },
	  aboutXWeeks: {
	    one: 'about 1 week',
	    other: 'about {{count}} weeks'
	  },
	  xWeeks: {
	    one: '1 week',
	    other: '{{count}} weeks'
	  },
	  aboutXMonths: {
	    one: 'about 1 month',
	    other: 'about {{count}} months'
	  },
	  xMonths: {
	    one: '1 month',
	    other: '{{count}} months'
	  },
	  aboutXYears: {
	    one: 'about 1 year',
	    other: 'about {{count}} years'
	  },
	  xYears: {
	    one: '1 year',
	    other: '{{count}} years'
	  },
	  overXYears: {
	    one: 'over 1 year',
	    other: 'over {{count}} years'
	  },
	  almostXYears: {
	    one: 'almost 1 year',
	    other: 'almost {{count}} years'
	  }
	};
	var formatDistance = function formatDistance(token, count, options) {
	  var result;
	  var tokenValue = formatDistanceLocale[token];
	  if (typeof tokenValue === 'string') {
	    result = tokenValue;
	  } else if (count === 1) {
	    result = tokenValue.one;
	  } else {
	    result = tokenValue.other.replace('{{count}}', count.toString());
	  }
	  if (options !== null && options !== void 0 && options.addSuffix) {
	    if (options.comparison && options.comparison > 0) {
	      return 'in ' + result;
	    } else {
	      return result + ' ago';
	    }
	  }
	  return result;
	};

	function buildFormatLongFn(args) {
	  return function () {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    // TODO: Remove String()
	    var width = options.width ? String(options.width) : args.defaultWidth;
	    var format = args.formats[width] || args.formats[args.defaultWidth];
	    return format;
	  };
	}

	var dateFormats = {
	  full: 'EEEE, MMMM do, y',
	  long: 'MMMM do, y',
	  medium: 'MMM d, y',
	  short: 'MM/dd/yyyy'
	};
	var timeFormats = {
	  full: 'h:mm:ss a zzzz',
	  long: 'h:mm:ss a z',
	  medium: 'h:mm:ss a',
	  short: 'h:mm a'
	};
	var dateTimeFormats = {
	  full: "{{date}} 'at' {{time}}",
	  long: "{{date}} 'at' {{time}}",
	  medium: '{{date}}, {{time}}',
	  short: '{{date}}, {{time}}'
	};
	var formatLong = {
	  date: buildFormatLongFn({
	    formats: dateFormats,
	    defaultWidth: 'full'
	  }),
	  time: buildFormatLongFn({
	    formats: timeFormats,
	    defaultWidth: 'full'
	  }),
	  dateTime: buildFormatLongFn({
	    formats: dateTimeFormats,
	    defaultWidth: 'full'
	  })
	};

	var formatRelativeLocale = {
	  lastWeek: "'last' eeee 'at' p",
	  yesterday: "'yesterday at' p",
	  today: "'today at' p",
	  tomorrow: "'tomorrow at' p",
	  nextWeek: "eeee 'at' p",
	  other: 'P'
	};
	var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
	  return formatRelativeLocale[token];
	};

	function buildLocalizeFn(args) {
	  return function (dirtyIndex, options) {
	    var context = options !== null && options !== void 0 && options.context ? String(options.context) : 'standalone';
	    var valuesArray;
	    if (context === 'formatting' && args.formattingValues) {
	      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
	      var width = options !== null && options !== void 0 && options.width ? String(options.width) : defaultWidth;
	      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
	    } else {
	      var _defaultWidth = args.defaultWidth;
	      var _width = options !== null && options !== void 0 && options.width ? String(options.width) : args.defaultWidth;
	      valuesArray = args.values[_width] || args.values[_defaultWidth];
	    }
	    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
	    // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
	    return valuesArray[index];
	  };
	}

	var eraValues = {
	  narrow: ['B', 'A'],
	  abbreviated: ['BC', 'AD'],
	  wide: ['Before Christ', 'Anno Domini']
	};
	var quarterValues = {
	  narrow: ['1', '2', '3', '4'],
	  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
	  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
	};

	// Note: in English, the names of days of the week and months are capitalized.
	// If you are making a new locale based on this one, check if the same is true for the language you're working on.
	// Generally, formatted dates should look like they are in the middle of a sentence,
	// e.g. in Spanish language the weekdays and months should be in the lowercase.
	var monthValues = {
	  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
	  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
	};
	var dayValues = {
	  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
	  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
	};
	var dayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'morning',
	    afternoon: 'afternoon',
	    evening: 'evening',
	    night: 'night'
	  }
	};
	var formattingDayPeriodValues = {
	  narrow: {
	    am: 'a',
	    pm: 'p',
	    midnight: 'mi',
	    noon: 'n',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  abbreviated: {
	    am: 'AM',
	    pm: 'PM',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  },
	  wide: {
	    am: 'a.m.',
	    pm: 'p.m.',
	    midnight: 'midnight',
	    noon: 'noon',
	    morning: 'in the morning',
	    afternoon: 'in the afternoon',
	    evening: 'in the evening',
	    night: 'at night'
	  }
	};
	var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
	  var number = Number(dirtyNumber);

	  // If ordinal numbers depend on context, for example,
	  // if they are different for different grammatical genders,
	  // use `options.unit`.
	  //
	  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
	  // 'day', 'hour', 'minute', 'second'.

	  var rem100 = number % 100;
	  if (rem100 > 20 || rem100 < 10) {
	    switch (rem100 % 10) {
	      case 1:
	        return number + 'st';
	      case 2:
	        return number + 'nd';
	      case 3:
	        return number + 'rd';
	    }
	  }
	  return number + 'th';
	};
	var localize = {
	  ordinalNumber: ordinalNumber,
	  era: buildLocalizeFn({
	    values: eraValues,
	    defaultWidth: 'wide'
	  }),
	  quarter: buildLocalizeFn({
	    values: quarterValues,
	    defaultWidth: 'wide',
	    argumentCallback: function argumentCallback(quarter) {
	      return quarter - 1;
	    }
	  }),
	  month: buildLocalizeFn({
	    values: monthValues,
	    defaultWidth: 'wide'
	  }),
	  day: buildLocalizeFn({
	    values: dayValues,
	    defaultWidth: 'wide'
	  }),
	  dayPeriod: buildLocalizeFn({
	    values: dayPeriodValues,
	    defaultWidth: 'wide',
	    formattingValues: formattingDayPeriodValues,
	    defaultFormattingWidth: 'wide'
	  })
	};

	function buildMatchFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var width = options.width;
	    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
	    var matchResult = string.match(matchPattern);
	    if (!matchResult) {
	      return null;
	    }
	    var matchedString = matchResult[0];
	    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
	    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    }) : findKey(parsePatterns, function (pattern) {
	      return pattern.test(matchedString);
	    });
	    var value;
	    value = args.valueCallback ? args.valueCallback(key) : key;
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}
	function findKey(object, predicate) {
	  for (var key in object) {
	    if (object.hasOwnProperty(key) && predicate(object[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}
	function findIndex(array, predicate) {
	  for (var key = 0; key < array.length; key++) {
	    if (predicate(array[key])) {
	      return key;
	    }
	  }
	  return undefined;
	}

	function buildMatchPatternFn(args) {
	  return function (string) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var matchResult = string.match(args.matchPattern);
	    if (!matchResult) return null;
	    var matchedString = matchResult[0];
	    var parseResult = string.match(args.parsePattern);
	    if (!parseResult) return null;
	    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
	    value = options.valueCallback ? options.valueCallback(value) : value;
	    var rest = string.slice(matchedString.length);
	    return {
	      value: value,
	      rest: rest
	    };
	  };
	}

	var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
	var parseOrdinalNumberPattern = /\d+/i;
	var matchEraPatterns = {
	  narrow: /^(b|a)/i,
	  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
	  wide: /^(before christ|before common era|anno domini|common era)/i
	};
	var parseEraPatterns = {
	  any: [/^b/i, /^(a|c)/i]
	};
	var matchQuarterPatterns = {
	  narrow: /^[1234]/i,
	  abbreviated: /^q[1234]/i,
	  wide: /^[1234](th|st|nd|rd)? quarter/i
	};
	var parseQuarterPatterns = {
	  any: [/1/i, /2/i, /3/i, /4/i]
	};
	var matchMonthPatterns = {
	  narrow: /^[jfmasond]/i,
	  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
	  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
	};
	var parseMonthPatterns = {
	  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
	  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
	};
	var matchDayPatterns = {
	  narrow: /^[smtwf]/i,
	  short: /^(su|mo|tu|we|th|fr|sa)/i,
	  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
	  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
	};
	var parseDayPatterns = {
	  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
	  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
	};
	var matchDayPeriodPatterns = {
	  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
	  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
	};
	var parseDayPeriodPatterns = {
	  any: {
	    am: /^a/i,
	    pm: /^p/i,
	    midnight: /^mi/i,
	    noon: /^no/i,
	    morning: /morning/i,
	    afternoon: /afternoon/i,
	    evening: /evening/i,
	    night: /night/i
	  }
	};
	var match = {
	  ordinalNumber: buildMatchPatternFn({
	    matchPattern: matchOrdinalNumberPattern,
	    parsePattern: parseOrdinalNumberPattern,
	    valueCallback: function valueCallback(value) {
	      return parseInt(value, 10);
	    }
	  }),
	  era: buildMatchFn({
	    matchPatterns: matchEraPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseEraPatterns,
	    defaultParseWidth: 'any'
	  }),
	  quarter: buildMatchFn({
	    matchPatterns: matchQuarterPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseQuarterPatterns,
	    defaultParseWidth: 'any',
	    valueCallback: function valueCallback(index) {
	      return index + 1;
	    }
	  }),
	  month: buildMatchFn({
	    matchPatterns: matchMonthPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseMonthPatterns,
	    defaultParseWidth: 'any'
	  }),
	  day: buildMatchFn({
	    matchPatterns: matchDayPatterns,
	    defaultMatchWidth: 'wide',
	    parsePatterns: parseDayPatterns,
	    defaultParseWidth: 'any'
	  }),
	  dayPeriod: buildMatchFn({
	    matchPatterns: matchDayPeriodPatterns,
	    defaultMatchWidth: 'any',
	    parsePatterns: parseDayPeriodPatterns,
	    defaultParseWidth: 'any'
	  })
	};

	/**
	 * @type {Locale}
	 * @category Locales
	 * @summary English locale (United States).
	 * @language English
	 * @iso-639-2 eng
	 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
	 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
	 */
	var locale = {
	  code: 'en-US',
	  formatDistance: formatDistance,
	  formatLong: formatLong,
	  formatRelative: formatRelative,
	  localize: localize,
	  match: match,
	  options: {
	    weekStartsOn: 0 /* Sunday */,
	    firstWeekContainsDate: 1
	  }
	};

	// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
	//   (one of the certain letters followed by `o`)
	// - (\w)\1* matches any sequences of the same letter
	// - '' matches two quote characters in a row
	// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
	//   except a single quote symbol, which ends the sequence.
	//   Two quote characters do not end the sequence.
	//   If there is no matching single quote
	//   then the sequence will continue until the end of the string.
	// - . matches any single character unmatched by previous parts of the RegExps
	var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

	// This RegExp catches symbols escaped by quotes, and also
	// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
	var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
	var escapedStringRegExp = /^'([^]*?)'?$/;
	var doubleQuoteRegExp = /''/g;
	var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

	/**
	 * @name format
	 * @category Common Helpers
	 * @summary Format the date.
	 *
	 * @description
	 * Return the formatted date string in the given format. The result may vary by locale.
	 *
	 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
	 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * The characters wrapped between two single quotes characters (') are escaped.
	 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
	 * (see the last example)
	 *
	 * Format of the string is based on Unicode Technical Standard #35:
	 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
	 * with a few additions (see note 7 below the table).
	 *
	 * Accepted patterns:
	 * | Unit                            | Pattern | Result examples                   | Notes |
	 * |---------------------------------|---------|-----------------------------------|-------|
	 * | Era                             | G..GGG  | AD, BC                            |       |
	 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
	 * |                                 | GGGGG   | A, B                              |       |
	 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
	 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
	 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
	 * |                                 | yyyyy   | ...                               | 3,5   |
	 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
	 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
	 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
	 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
	 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
	 * |                                 | YYYYY   | ...                               | 3,5   |
	 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
	 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
	 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
	 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
	 * |                                 | RRRRR   | ...                               | 3,5,7 |
	 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
	 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
	 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
	 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
	 * |                                 | uuuuu   | ...                               | 3,5   |
	 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
	 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | QQ      | 01, 02, 03, 04                    |       |
	 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
	 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
	 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
	 * |                                 | qq      | 01, 02, 03, 04                    |       |
	 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
	 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
	 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
	 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
	 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | MM      | 01, 02, ..., 12                   |       |
	 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
	 * |                                 | MMMM    | January, February, ..., December  | 2     |
	 * |                                 | MMMMM   | J, F, ..., D                      |       |
	 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
	 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
	 * |                                 | LL      | 01, 02, ..., 12                   |       |
	 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
	 * |                                 | LLLL    | January, February, ..., December  | 2     |
	 * |                                 | LLLLL   | J, F, ..., D                      |       |
	 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
	 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | ww      | 01, 02, ..., 53                   |       |
	 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
	 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
	 * |                                 | II      | 01, 02, ..., 53                   | 7     |
	 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
	 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
	 * |                                 | dd      | 01, 02, ..., 31                   |       |
	 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
	 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
	 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
	 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
	 * |                                 | DDDD    | ...                               | 3     |
	 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
	 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
	 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
	 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
	 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
	 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
	 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
	 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
	 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | ee      | 02, 03, ..., 01                   |       |
	 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
	 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
	 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
	 * |                                 | cc      | 02, 03, ..., 01                   |       |
	 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
	 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
	 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
	 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
	 * | AM, PM                          | a..aa   | AM, PM                            |       |
	 * |                                 | aaa     | am, pm                            |       |
	 * |                                 | aaaa    | a.m., p.m.                        | 2     |
	 * |                                 | aaaaa   | a, p                              |       |
	 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
	 * |                                 | bbb     | am, pm, noon, midnight            |       |
	 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
	 * |                                 | bbbbb   | a, p, n, mi                       |       |
	 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
	 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
	 * |                                 | BBBBB   | at night, in the morning, ...     |       |
	 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
	 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
	 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
	 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
	 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
	 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
	 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
	 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
	 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
	 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
	 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
	 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
	 * | Minute                          | m       | 0, 1, ..., 59                     |       |
	 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | mm      | 00, 01, ..., 59                   |       |
	 * | Second                          | s       | 0, 1, ..., 59                     |       |
	 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
	 * |                                 | ss      | 00, 01, ..., 59                   |       |
	 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
	 * |                                 | SS      | 00, 01, ..., 99                   |       |
	 * |                                 | SSS     | 000, 001, ..., 999                |       |
	 * |                                 | SSSS    | ...                               | 3     |
	 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
	 * |                                 | XX      | -0800, +0530, Z                   |       |
	 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
	 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
	 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
	 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
	 * |                                 | xx      | -0800, +0530, +0000               |       |
	 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
	 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
	 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
	 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
	 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
	 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
	 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
	 * | Seconds timestamp               | t       | 512969520                         | 7     |
	 * |                                 | tt      | ...                               | 3,7   |
	 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
	 * |                                 | TT      | ...                               | 3,7   |
	 * | Long localized date             | P       | 04/29/1453                        | 7     |
	 * |                                 | PP      | Apr 29, 1453                      | 7     |
	 * |                                 | PPP     | April 29th, 1453                  | 7     |
	 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
	 * | Long localized time             | p       | 12:00 AM                          | 7     |
	 * |                                 | pp      | 12:00:00 AM                       | 7     |
	 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
	 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
	 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
	 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
	 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
	 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
	 * Notes:
	 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
	 *    are the same as "stand-alone" units, but are different in some languages.
	 *    "Formatting" units are declined according to the rules of the language
	 *    in the context of a date. "Stand-alone" units are always nominative singular:
	 *
	 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
	 *
	 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
	 *
	 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
	 *    the single quote characters (see below).
	 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
	 *    the output will be the same as default pattern for this unit, usually
	 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
	 *    are marked with "2" in the last column of the table.
	 *
	 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
	 *
	 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
	 *
	 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
	 *    The output will be padded with zeros to match the length of the pattern.
	 *
	 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
	 *
	 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
	 *    These tokens represent the shortest form of the quarter.
	 *
	 * 5. The main difference between `y` and `u` patterns are B.C. years:
	 *
	 *    | Year | `y` | `u` |
	 *    |------|-----|-----|
	 *    | AC 1 |   1 |   1 |
	 *    | BC 1 |   1 |   0 |
	 *    | BC 2 |   2 |  -1 |
	 *
	 *    Also `yy` always returns the last two digits of a year,
	 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
	 *
	 *    | Year | `yy` | `uu` |
	 *    |------|------|------|
	 *    | 1    |   01 |   01 |
	 *    | 14   |   14 |   14 |
	 *    | 376  |   76 |  376 |
	 *    | 1453 |   53 | 1453 |
	 *
	 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
	 *    except local week-numbering years are dependent on `options.weekStartsOn`
	 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
	 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
	 *
	 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
	 *    so right now these tokens fall back to GMT timezones.
	 *
	 * 7. These patterns are not in the Unicode Technical Standard #35:
	 *    - `i`: ISO day of week
	 *    - `I`: ISO week of year
	 *    - `R`: ISO week-numbering year
	 *    - `t`: seconds timestamp
	 *    - `T`: milliseconds timestamp
	 *    - `o`: ordinal number modifier
	 *    - `P`: long localized date
	 *    - `p`: long localized time
	 *
	 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
	 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
	 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 *
	 * @param {Date|Number} date - the original date
	 * @param {String} format - the string of tokens
	 * @param {Object} [options] - an object with options.
	 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
	 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
	 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
	 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
	 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @returns {String} the formatted date string
	 * @throws {TypeError} 2 arguments required
	 * @throws {RangeError} `date` must not be Invalid Date
	 * @throws {RangeError} `options.locale` must contain `localize` property
	 * @throws {RangeError} `options.locale` must contain `formatLong` property
	 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
	 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
	 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
	 * @throws {RangeError} format string contains an unescaped latin alphabet character
	 *
	 * @example
	 * // Represent 11 February 2014 in middle-endian format:
	 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
	 * //=> '02/11/2014'
	 *
	 * @example
	 * // Represent 2 July 2014 in Esperanto:
	 * import { eoLocale } from 'date-fns/locale/eo'
	 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
	 *   locale: eoLocale
	 * })
	 * //=> '2-a de julio 2014'
	 *
	 * @example
	 * // Escape string by single quote characters:
	 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
	 * //=> "3 o'clock"
	 */

	function format(dirtyDate, dirtyFormatStr, options) {
	  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _defaultOptions$local3, _defaultOptions$local4;
	  requiredArgs(2, arguments);
	  var formatStr = String(dirtyFormatStr);
	  var defaultOptions = getDefaultOptions();
	  var locale$1 = (_ref = (_options$locale = void 0 ) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : locale;
	  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = void 0 ) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : void 0 ) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);

	  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
	  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
	    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
	  }
	  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = void 0 ) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : void 0 ) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);

	  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
	  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
	    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
	  }
	  if (!locale$1.localize) {
	    throw new RangeError('locale must contain localize property');
	  }
	  if (!locale$1.formatLong) {
	    throw new RangeError('locale must contain formatLong property');
	  }
	  var originalDate = toDate(dirtyDate);
	  if (!isValid(originalDate)) {
	    throw new RangeError('Invalid time value');
	  }

	  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
	  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
	  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
	  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
	  var utcDate = subMilliseconds(originalDate, timezoneOffset);
	  var formatterOptions = {
	    firstWeekContainsDate: firstWeekContainsDate,
	    weekStartsOn: weekStartsOn,
	    locale: locale$1,
	    _originalDate: originalDate
	  };
	  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
	    var firstCharacter = substring[0];
	    if (firstCharacter === 'p' || firstCharacter === 'P') {
	      var longFormatter = longFormatters[firstCharacter];
	      return longFormatter(substring, locale$1.formatLong);
	    }
	    return substring;
	  }).join('').match(formattingTokensRegExp).map(function (substring) {
	    // Replace two single quote characters with one single quote character
	    if (substring === "''") {
	      return "'";
	    }
	    var firstCharacter = substring[0];
	    if (firstCharacter === "'") {
	      return cleanEscapedString(substring);
	    }
	    var formatter = formatters[firstCharacter];
	    if (formatter) {
	      if (isProtectedWeekYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      if (isProtectedDayOfYearToken(substring)) {
	        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
	      }
	      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
	    }
	    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
	      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
	    }
	    return substring;
	  }).join('');
	  return result;
	}
	function cleanEscapedString(input) {
	  var matched = input.match(escapedStringRegExp);
	  if (!matched) {
	    return input;
	  }
	  return matched[1].replace(doubleQuoteRegExp, "'");
	}

	const Exporters = ['csv', 'json', 'xml'];

	const mimeTypes = {
	  json: 'application/json',
	  csv: 'text/csv',
	  xml: 'text/xml'
	};
	const getExportedFileName = extension => `export-${format(Date.now(), 'yyyy-MM-dd_HH-mm')}.${extension}`;
	const ExportComponent = ({
	  resource
	}) => {
	  const [isFetching, setFetching] = React.useState();
	  const sendNotice = adminjs.useNotice();
	  const exportData = async type => {
	    setFetching(true);
	    try {
	      const {
	        data: {
	          exportedData
	        }
	      } = await new adminjs.ApiClient().resourceAction({
	        method: 'post',
	        resourceId: resource.id,
	        actionName: 'export',
	        params: {
	          type
	        }
	      });
	      const blob = new Blob([exportedData], {
	        type: mimeTypes[type]
	      });
	      FileSaver_minExports.saveAs(blob, getExportedFileName(type));
	      sendNotice({
	        message: 'Exported successfully',
	        type: 'success'
	      });
	    } catch (e) {
	      sendNotice({
	        message: e.message,
	        type: 'error'
	      });
	    }
	    setFetching(false);
	  };
	  if (isFetching) {
	    return /*#__PURE__*/React__default.default.createElement(designSystem.Loader, null);
	  }
	  return /*#__PURE__*/React__default.default.createElement(designSystem.Box, null, /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center"
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Text, {
	    variant: "lg"
	  }, "Choose export format:")), /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    display: "flex",
	    justifyContent: "center"
	  }, Exporters.map(parserType => /*#__PURE__*/React__default.default.createElement(designSystem.Box, {
	    key: parserType,
	    m: 2
	  }, /*#__PURE__*/React__default.default.createElement(designSystem.Button, {
	    onClick: () => exportData(parserType),
	    disabled: isFetching
	  }, parserType.toUpperCase())))));
	};

	AdminJS.UserComponents = {};
	AdminJS.UserComponents.EquipmentForm = EquipmentForm;
	AdminJS.UserComponents.DashboardCard = DashboardCard;
	AdminJS.UserComponents.CustomSelect = CustomSelect;
	AdminJS.UserComponents.CustomCheckBox = CustomCheckBox;
	AdminJS.UserComponents.LocationInfoComponent = LocationInfoComponent;
	AdminJS.UserComponents.SingleSelect = SingleSelect;
	AdminJS.UserComponents.GasParamsComponent = GasParamsComponent;
	AdminJS.UserComponents.ToggleSwitch = ToggleSwitch;
	AdminJS.UserComponents.InterventionsQuestionsComponent = InterventionsQuestionsComponent;
	AdminJS.UserComponents.SoufflageComponent = SoufflageComponent;
	AdminJS.UserComponents.AdditionalQuestionsComponent = AdditionalQuestionsComponent;
	AdminJS.UserComponents.QuestionComponent = QuestionComponent;
	AdminJS.UserComponents.PressionsComponent = PressionsComponent;
	AdminJS.UserComponents.PompeEauComponent = PompeEauComponent;
	AdminJS.UserComponents.EtancheiteComponent = EtancheiteComponent;
	AdminJS.UserComponents.SecuriteComponent = SecuriteComponent;
	AdminJS.UserComponents.ResistanceComponent = ResistanceComponent;
	AdminJS.UserComponents.InterventionQuestionsShow = InterventionQuestionsShow;
	AdminJS.UserComponents.ParametrageShowComponent = ParametrageShowComponent;
	AdminJS.UserComponents.ProductSelect = ProductSelect;
	AdminJS.UserComponents.FrenchDate = FrenchDate;
	AdminJS.UserComponents.EquipmentShowComponent = EquipmentShowComponent;
	AdminJS.UserComponents.InterventionShowComponent = InterventionShowComponent;
	AdminJS.UserComponents.ProductShow = ProductShow;
	AdminJS.UserComponents.EmptyBreak = EmptyBreak;
	AdminJS.UserComponents.ImportComponent = ImportComponent;
	AdminJS.UserComponents.ExportComponent = ExportComponent;

})(React, AdminJSDesignSystem, AdminJS);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
